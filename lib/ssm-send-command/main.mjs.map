{
  "version": 3,
  "sources": ["../../node_modules/@actions/core/src/utils.ts", "../../node_modules/@actions/core/src/command.ts", "../../node_modules/uuid/dist/esm-node/rng.js", "../../node_modules/uuid/dist/esm-node/regex.js", "../../node_modules/uuid/dist/esm-node/validate.js", "../../node_modules/uuid/dist/esm-node/stringify.js", "../../node_modules/uuid/dist/esm-node/v1.js", "../../node_modules/uuid/dist/esm-node/parse.js", "../../node_modules/uuid/dist/esm-node/v35.js", "../../node_modules/uuid/dist/esm-node/md5.js", "../../node_modules/uuid/dist/esm-node/v3.js", "../../node_modules/uuid/dist/esm-node/v4.js", "../../node_modules/uuid/dist/esm-node/sha1.js", "../../node_modules/uuid/dist/esm-node/v5.js", "../../node_modules/uuid/dist/esm-node/nil.js", "../../node_modules/uuid/dist/esm-node/version.js", "../../node_modules/uuid/dist/esm-node/index.js", "../../node_modules/@actions/core/src/file-command.ts", "../../node_modules/@actions/http-client/src/proxy.ts", "../../node_modules/tunnel/lib/tunnel.js", "../../node_modules/tunnel/index.js", "../../node_modules/@actions/http-client/src/index.ts", "../../node_modules/@actions/http-client/src/auth.ts", "../../node_modules/@actions/core/src/oidc-utils.ts", "../../node_modules/@actions/core/src/summary.ts", "../../node_modules/@actions/core/src/path-utils.ts", "../../node_modules/@actions/core/src/core.ts", "../../node_modules/fast-xml-parser/src/util.js", "../../node_modules/fast-xml-parser/src/validator.js", "../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js", "../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js", "../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js", "../../node_modules/strnum/strnum.js", "../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js", "../../node_modules/fast-xml-parser/src/xmlparser/node2json.js", "../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js", "../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js", "../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js", "../../node_modules/fast-xml-parser/src/fxp.js", "../../src/ssm-send-command/main.ts", "../../node_modules/@aws-sdk/smithy-client/dist-es/NoOpLogger.js", "../../node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/client.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/command.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/constants.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/parse-utils.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/date-utils.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/exceptions.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/default-error-handler.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/defaults-mode.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/emitWarningIfUnsupportedVersion.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/extended-encode-uri-component.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/get-value-from-text-node.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/lazy-json.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/object-mapping.js", "../../node_modules/@aws-sdk/smithy-client/dist-es/serde-json.js", "../../node_modules/@aws-sdk/middleware-endpoint/dist-es/service-customizations/s3.js", "../../node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/createConfigValueProvider.js", "../../node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/getEndpointFromInstructions.js", "../../node_modules/@aws-sdk/querystring-parser/dist-es/index.js", "../../node_modules/@aws-sdk/url-parser/dist-es/index.js", "../../node_modules/@aws-sdk/middleware-endpoint/dist-es/adaptors/toEndpointV1.js", "../../node_modules/@aws-sdk/middleware-endpoint/dist-es/endpointMiddleware.js", "../../node_modules/@aws-sdk/middleware-serde/dist-es/deserializerMiddleware.js", "../../node_modules/@aws-sdk/middleware-serde/dist-es/serializerMiddleware.js", "../../node_modules/@aws-sdk/middleware-serde/dist-es/serdePlugin.js", "../../node_modules/@aws-sdk/middleware-endpoint/dist-es/getEndpointPlugin.js", "../../node_modules/@aws-sdk/util-middleware/dist-es/normalizeProvider.js", "../../node_modules/@aws-sdk/middleware-endpoint/dist-es/resolveEndpointConfig.js", "../../node_modules/@aws-sdk/protocol-http/dist-es/FieldPosition.js", "../../node_modules/@aws-sdk/protocol-http/dist-es/httpRequest.js", "../../node_modules/@aws-sdk/protocol-http/dist-es/httpResponse.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/models/SSMServiceException.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/models/models_0.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/models/models_1.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/protocols/Aws_json1_1.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/commands/DescribeInstanceInformationCommand.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/commands/GetCommandInvocationCommand.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/commands/SendCommandCommand.js", "../../node_modules/@aws-sdk/util-config-provider/dist-es/booleanSelector.js", "../../node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js", "../../node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/NodeUseFipsEndpointConfigOptions.js", "../../node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/config.js", "../../node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/isFipsRegion.js", "../../node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/getRealRegion.js", "../../node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js", "../../node_modules/@aws-sdk/middleware-content-length/dist-es/index.js", "../../node_modules/@aws-sdk/middleware-host-header/dist-es/index.js", "../../node_modules/@aws-sdk/middleware-logger/dist-es/loggerMiddleware.js", "../../node_modules/@aws-sdk/middleware-recursion-detection/dist-es/index.js", "../../node_modules/@aws-sdk/util-retry/dist-es/config.js", "../../node_modules/@aws-sdk/service-error-classification/dist-es/constants.js", "../../node_modules/@aws-sdk/service-error-classification/dist-es/index.js", "../../node_modules/@aws-sdk/util-retry/dist-es/DefaultRateLimiter.js", "../../node_modules/@aws-sdk/util-retry/dist-es/constants.js", "../../node_modules/@aws-sdk/util-retry/dist-es/defaultRetryBackoffStrategy.js", "../../node_modules/@aws-sdk/util-retry/dist-es/defaultRetryToken.js", "../../node_modules/@aws-sdk/util-retry/dist-es/StandardRetryStrategy.js", "../../node_modules/@aws-sdk/util-retry/dist-es/AdaptiveRetryStrategy.js", "../../node_modules/@aws-sdk/middleware-retry/dist-es/util.js", "../../node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js", "../../node_modules/@aws-sdk/middleware-retry/dist-es/retryMiddleware.js", "../../node_modules/@aws-sdk/property-provider/dist-es/ProviderError.js", "../../node_modules/@aws-sdk/property-provider/dist-es/CredentialsProviderError.js", "../../node_modules/@aws-sdk/property-provider/dist-es/TokenProviderError.js", "../../node_modules/@aws-sdk/property-provider/dist-es/chain.js", "../../node_modules/@aws-sdk/property-provider/dist-es/fromStatic.js", "../../node_modules/@aws-sdk/property-provider/dist-es/memoize.js", "../../node_modules/@aws-sdk/util-hex-encoding/dist-es/index.js", "../../node_modules/@aws-sdk/is-array-buffer/dist-es/index.js", "../../node_modules/@aws-sdk/util-buffer-from/dist-es/index.js", "../../node_modules/@aws-sdk/util-utf8/dist-es/fromUtf8.js", "../../node_modules/@aws-sdk/util-utf8/dist-es/toUint8Array.js", "../../node_modules/@aws-sdk/util-utf8/dist-es/toUtf8.js", "../../node_modules/@aws-sdk/signature-v4/dist-es/constants.js", "../../node_modules/@aws-sdk/signature-v4/dist-es/credentialDerivation.js", "../../node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalHeaders.js", "../../node_modules/@aws-sdk/util-uri-escape/dist-es/escape-uri.js", "../../node_modules/@aws-sdk/signature-v4/dist-es/getCanonicalQuery.js", "../../node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js", "../../node_modules/@aws-sdk/signature-v4/dist-es/headerUtil.js", "../../node_modules/@aws-sdk/signature-v4/dist-es/cloneRequest.js", "../../node_modules/@aws-sdk/signature-v4/dist-es/moveHeadersToQuery.js", "../../node_modules/@aws-sdk/signature-v4/dist-es/prepareRequest.js", "../../node_modules/@aws-sdk/signature-v4/dist-es/utilDate.js", "../../node_modules/@aws-sdk/signature-v4/dist-es/SignatureV4.js", "../../node_modules/@aws-sdk/middleware-signing/dist-es/configurations.js", "../../node_modules/@aws-sdk/middleware-signing/dist-es/utils/getSkewCorrectedDate.js", "../../node_modules/@aws-sdk/middleware-signing/dist-es/utils/isClockSkewed.js", "../../node_modules/@aws-sdk/middleware-signing/dist-es/utils/getUpdatedSystemClockOffset.js", "../../node_modules/@aws-sdk/middleware-signing/dist-es/middleware.js", "../../node_modules/@aws-sdk/middleware-user-agent/dist-es/configurations.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partitions.json", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/debug/debugId.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/debug/toDebugString.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/types/EndpointError.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/index.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/index.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/isIpAddress.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/isValidHostLabel.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/isVirtualHostableS3Bucket.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/parseArn.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/booleanEquals.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttrPathList.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/getAttr.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/isSet.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/not.js", "../../node_modules/@aws-sdk/types/dist-es/auth.js", "../../node_modules/@aws-sdk/types/dist-es/dns.js", "../../node_modules/@aws-sdk/types/dist-es/endpoint.js", "../../node_modules/@aws-sdk/types/dist-es/transfer.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/stringEquals.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/substring.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/lib/uriEncode.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTemplate.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/getReferenceValue.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateExpression.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/callFunction.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateCondition.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateConditions.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointHeaders.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperty.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointProperties.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointUrl.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateEndpointRule.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateErrorRule.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateTreeRule.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/utils/evaluateRules.js", "../../node_modules/@aws-sdk/util-endpoints/dist-es/resolveEndpoint.js", "../../node_modules/@aws-sdk/middleware-user-agent/dist-es/constants.js", "../../node_modules/@aws-sdk/middleware-user-agent/dist-es/user-agent-middleware.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/endpoint/EndpointParameters.js", "../../node_modules/@aws-sdk/client-ssm/package.json", "../../node_modules/@aws-sdk/client-sts/dist-es/protocols/Aws_query.js", "../../node_modules/@aws-sdk/client-sts/dist-es/models/STSServiceException.js", "../../node_modules/@aws-sdk/client-sts/dist-es/models/models_0.js", "../../node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleCommand.js", "../../node_modules/@aws-sdk/client-sts/dist-es/commands/AssumeRoleWithWebIdentityCommand.js", "../../node_modules/@aws-sdk/middleware-sdk-sts/dist-es/index.js", "../../node_modules/@aws-sdk/client-sts/dist-es/endpoint/EndpointParameters.js", "../../node_modules/@aws-sdk/client-sts/package.json", "../../node_modules/@aws-sdk/client-sts/dist-es/defaultStsRoleAssumers.js", "../../node_modules/@aws-sdk/credential-provider-env/dist-es/fromEnv.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getHomeDir.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getProfileName.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getConfigFilepath.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getCredentialsFilepath.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getProfileData.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/parseIni.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/slurpFile.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/getSsoSessionData.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/loadSsoSessionData.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/mergeConfigFiles.js", "../../node_modules/@aws-sdk/shared-ini-file-loader/dist-es/parseKnownFiles.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/fromContainerMetadata.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/remoteProvider/httpRequest.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/remoteProvider/retry.js", "../../node_modules/@aws-sdk/node-config-provider/dist-es/fromEnv.js", "../../node_modules/@aws-sdk/node-config-provider/dist-es/fromSharedConfigFiles.js", "../../node_modules/@aws-sdk/node-config-provider/dist-es/fromStatic.js", "../../node_modules/@aws-sdk/node-config-provider/dist-es/configLoader.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/config/Endpoint.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/config/EndpointConfigOptions.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/config/EndpointMode.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/utils/staticStabilityProvider.js", "../../node_modules/@aws-sdk/credential-provider-imds/dist-es/fromInstanceMetadata.js", "../../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js", "../../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js", "../../node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js", "../../node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js", "../../node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js", "../../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js", "../../node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js", "../../node_modules/@aws-sdk/client-sso/dist-es/models/SSOServiceException.js", "../../node_modules/@aws-sdk/client-sso/dist-es/models/models_0.js", "../../node_modules/@aws-sdk/client-sso/dist-es/protocols/Aws_restJson1.js", "../../node_modules/@aws-sdk/client-sso/dist-es/commands/GetRoleCredentialsCommand.js", "../../node_modules/@aws-sdk/client-sso/dist-es/endpoint/EndpointParameters.js", "../../node_modules/@aws-sdk/client-sso/package.json", "../../node_modules/@aws-sdk/hash-node/dist-es/index.js", "../../node_modules/@aws-sdk/querystring-builder/dist-es/index.js", "../../node_modules/@aws-sdk/node-http-handler/dist-es/node-http-handler.js", "../../node_modules/@aws-sdk/node-http-handler/dist-es/constants.js", "../../node_modules/@aws-sdk/node-http-handler/dist-es/get-transformed-headers.js", "../../node_modules/@aws-sdk/node-http-handler/dist-es/set-connection-timeout.js", "../../node_modules/@aws-sdk/node-http-handler/dist-es/set-socket-timeout.js", "../../node_modules/@aws-sdk/node-http-handler/dist-es/write-request-body.js", "../../node_modules/@aws-sdk/node-http-handler/dist-es/node-http2-connection-pool.js", "../../node_modules/@aws-sdk/node-http-handler/dist-es/stream-collector/collector.js", "../../node_modules/@aws-sdk/node-http-handler/dist-es/stream-collector/index.js", "../../node_modules/@aws-sdk/util-body-length-node/dist-es/calculateBodyLength.js", "../../node_modules/@aws-sdk/util-user-agent-node/dist-es/index.js", "../../node_modules/@aws-sdk/util-user-agent-node/dist-es/is-crt-available.js", "../../node_modules/@aws-sdk/util-base64/dist-es/fromBase64.js", "../../node_modules/@aws-sdk/util-base64/dist-es/toBase64.js", "../../node_modules/@aws-sdk/client-sso/dist-es/endpoint/ruleset.js", "../../node_modules/@aws-sdk/client-sso/dist-es/endpoint/endpointResolver.js", "../../node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.shared.js", "../../node_modules/@aws-sdk/util-defaults-mode-node/dist-es/constants.js", "../../node_modules/@aws-sdk/util-defaults-mode-node/dist-es/defaultsModeConfig.js", "../../node_modules/@aws-sdk/util-defaults-mode-node/dist-es/resolveDefaultsModeConfig.js", "../../node_modules/@aws-sdk/client-sso/dist-es/runtimeConfig.js", "../../node_modules/@aws-sdk/client-sso/dist-es/SSOClient.js", "../../node_modules/@aws-sdk/token-providers/dist-es/constants.js", "../../node_modules/@aws-sdk/client-sso-oidc/dist-es/models/SSOOIDCServiceException.js", "../../node_modules/@aws-sdk/client-sso-oidc/dist-es/models/models_0.js", "../../node_modules/@aws-sdk/client-sso-oidc/dist-es/protocols/Aws_restJson1.js", "../../node_modules/@aws-sdk/client-sso-oidc/dist-es/commands/CreateTokenCommand.js", "../../node_modules/@aws-sdk/client-sso-oidc/dist-es/endpoint/EndpointParameters.js", "../../node_modules/@aws-sdk/client-sso-oidc/package.json", "../../node_modules/@aws-sdk/client-sso-oidc/dist-es/endpoint/ruleset.js", "../../node_modules/@aws-sdk/client-sso-oidc/dist-es/endpoint/endpointResolver.js", "../../node_modules/@aws-sdk/client-sso-oidc/dist-es/runtimeConfig.shared.js", "../../node_modules/@aws-sdk/client-sso-oidc/dist-es/runtimeConfig.js", "../../node_modules/@aws-sdk/client-sso-oidc/dist-es/SSOOIDCClient.js", "../../node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js", "../../node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js", "../../node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js", "../../node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js", "../../node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js", "../../node_modules/@aws-sdk/token-providers/dist-es/fromSso.js", "../../node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js", "../../node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js", "../../node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js", "../../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js", "../../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js", "../../node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js", "../../node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js", "../../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js", "../../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js", "../../node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js", "../../node_modules/@aws-sdk/credential-provider-node/dist-es/remoteProvider.js", "../../node_modules/@aws-sdk/credential-provider-node/dist-es/defaultProvider.js", "../../node_modules/@aws-sdk/client-sts/dist-es/endpoint/ruleset.js", "../../node_modules/@aws-sdk/client-sts/dist-es/endpoint/endpointResolver.js", "../../node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.shared.js", "../../node_modules/@aws-sdk/client-sts/dist-es/runtimeConfig.js", "../../node_modules/@aws-sdk/client-sts/dist-es/STSClient.js", "../../node_modules/@aws-sdk/client-sts/dist-es/defaultRoleAssumers.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/endpoint/ruleset.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/endpoint/endpointResolver.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/runtimeConfig.shared.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/runtimeConfig.js", "../../node_modules/@aws-sdk/client-ssm/dist-es/SSMClient.js", "../../node_modules/@aws-sdk/client-cloudwatch-logs/dist-es/endpoint/EndpointParameters.js", "../../node_modules/@aws-sdk/client-cloudwatch-logs/package.json", "../../node_modules/@aws-sdk/client-cloudwatch-logs/dist-es/endpoint/ruleset.js", "../../node_modules/@aws-sdk/client-cloudwatch-logs/dist-es/endpoint/endpointResolver.js", "../../node_modules/@aws-sdk/client-cloudwatch-logs/dist-es/runtimeConfig.shared.js", "../../node_modules/@aws-sdk/client-cloudwatch-logs/dist-es/runtimeConfig.js", "../../node_modules/@aws-sdk/client-cloudwatch-logs/dist-es/CloudWatchLogsClient.js", "../../node_modules/@aws-sdk/client-cloudwatch-logs/dist-es/models/CloudWatchLogsServiceException.js", "../../node_modules/@aws-sdk/client-cloudwatch-logs/dist-es/models/models_0.js", "../../node_modules/@aws-sdk/client-cloudwatch-logs/dist-es/protocols/Aws_json1_1.js", "../../node_modules/@aws-sdk/client-cloudwatch-logs/dist-es/commands/GetLogEventsCommand.js", "../../node_modules/ansi-styles/index.js"],
  "sourcesContent": [null, null, "import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import rng from './rng.js';\nimport stringify from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || stringify(b);\n}\n\nexport default v1;", "import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;", "import stringify from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function (name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return stringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}", "import crypto from 'crypto';\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto.createHash('md5').update(bytes).digest();\n}\n\nexport default md5;", "import v35 from './v35.js';\nimport md5 from './md5.js';\nconst v3 = v35('v3', 0x30, md5);\nexport default v3;", "import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;", "import crypto from 'crypto';\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto.createHash('sha1').update(bytes).digest();\n}\n\nexport default sha1;", "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nconst v5 = v35('v5', 0x50, sha1);\nexport default v5;", "export default '00000000-0000-0000-0000-000000000000';", "import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\nexport default version;", "export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';", null, null, "'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n", "module.exports = require('./lib/tunnel');\n", null, null, null, null, null, null, "'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n", "'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n", "\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;", "'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;", "//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, entity = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) {\n                if( hasBody && \n                     xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'N' &&\n                     xmlData[i+4] === 'T' &&\n                     xmlData[i+5] === 'I' &&\n                     xmlData[i+6] === 'T' &&\n                     xmlData[i+7] === 'Y'\n                ){\n                    i += 7;\n                    entity = true;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                     xmlData[i+2] === 'E' &&\n                     xmlData[i+3] === 'L' &&\n                     xmlData[i+4] === 'E' &&\n                     xmlData[i+5] === 'M' &&\n                     xmlData[i+6] === 'E' &&\n                     xmlData[i+7] === 'N' &&\n                     xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === 'A' &&\n                    xmlData[i+3] === 'T' &&\n                    xmlData[i+4] === 'T' &&\n                    xmlData[i+5] === 'L' &&\n                    xmlData[i+6] === 'I' &&\n                    xmlData[i+7] === 'S' &&\n                    xmlData[i+8] === 'T'\n                ){\n                    //Not supported\n                    i += 8;\n                }else if( hasBody && \n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === 'N' &&\n                    xmlData[i+3] === 'O' &&\n                    xmlData[i+4] === 'T' &&\n                    xmlData[i+5] === 'A' &&\n                    xmlData[i+6] === 'T' &&\n                    xmlData[i+7] === 'I' &&\n                    xmlData[i+8] === 'O' &&\n                    xmlData[i+9] === 'N'\n                ){\n                    //Not supported\n                    i += 9;\n                }else if( //comment\n                    xmlData[i+1] === '!' &&\n                    xmlData[i+2] === '-' &&\n                    xmlData[i+3] === '-'\n                ){\n                    comment = true;\n                }else{\n                    throw new Error(\"Invalid DOCTYPE\");\n                }\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') {\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    if(entity) {\n                        parseEntityExp(exp, entities);\n                        entity = false;\n                    }\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nconst entityRegex = RegExp(\"^\\\\s([a-zA-z0-0]+)[ \\t](['\\\"])([^&]+)\\\\2\");\nfunction parseEntityExp(exp, entities){\n    const match = entityRegex.exec(exp);\n    if(match){\n        entities[ match[1] ] = {\n            regx : RegExp( `&${match[1]};`,\"g\"),\n            val: match[3]\n        };\n    }\n}\nmodule.exports = readDocType;", "const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n", "'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n        \n        currentNode = this.tagsNodeStack.pop();//avoid recurssion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath);\n          }\n          currentNode.addChild(childNode);\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n        }\n\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //boolean tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          currentNode.addChild(childNode);\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n            currentNode.addChild(childNode);\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath);\n            }\n            currentNode.addChild(childNode);\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-dobule quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n", "'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const propCount = Object.keys(obj).length;\n  if( propCount === 0 || (propCount === 1 && obj[options.textNodeName]) ) return true;\n  return false;\n}\nexports.prettify = prettify;\n", "const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;", "const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n", "'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node\n    } else if (jObj[key] === null) {\n      if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          val += this.processTextOrObjNode(item, key, level)\n        } else {\n          val += this.buildTextValNode(item, key, '', level);\n        }\n      }\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    if (attrStr && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix)) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n", "'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}", "import type { GetCommandInvocationCommandOutput } from \"@aws-sdk/client-ssm\";\n\nimport { setInterval, clearInterval } from \"node:timers\";\nimport { scheduler } from \"node:timers/promises\";\nimport { inspect } from \"node:util\";\nimport { getBooleanInput, getInput, setOutput, setFailed, info, debug, isDebug } from \"@actions/core\";\nimport {\n  SSMClient,\n  DescribeInstanceInformationCommand,\n  SendCommandCommand,\n  GetCommandInvocationCommand,\n} from \"@aws-sdk/client-ssm\";\nimport { CloudWatchLogsClient, GetLogEventsCommand } from \"@aws-sdk/client-cloudwatch-logs\";\nimport styles from \"ansi-styles\";\n\nconst ssm = new SSMClient({});\nconst cloudWatchLogs = new CloudWatchLogsClient({});\n\ntry {\n  const command = getInput(\"command\", { required: true });\n  const instanceId = getInput(\"instance-id\") || process.env.SSM_COMMAND_INSTANCE_ID;\n  const powershell = getBooleanInput(\"powershell\");\n  const waitForAgent = getBooleanInput(\"wait-for-agent\");\n\n  if (instanceId === undefined) {\n    setFailed(Error(\"An instance ID must be provided.\"));\n    process.exit(1);\n  }\n\n  if (waitForAgent) {\n    info(\"Waiting for SSM agent to come online...\");\n    const timer = setInterval(() => info(\"Still waiting...\"), 10_000);\n    timer.unref(); // Don't let the timer prevent the event loop from exiting.\n\n    await waitSsmAgent(instanceId);\n\n    clearInterval(timer);\n    info(\"SSM agent is online.\");\n  }\n\n  const ssmDocumentName = powershell ? \"AWS-RunPowerShellScript\" : \"AWS-RunShellScript\";\n\n  const sendCommandResponse = await ssm.send(\n    new SendCommandCommand({\n      DocumentName: ssmDocumentName,\n      InstanceIds: [instanceId],\n      Parameters: { commands: [command] },\n      CloudWatchOutputConfig: { CloudWatchOutputEnabled: true },\n    })\n  );\n\n  if (isDebug()) {\n    debug(`sendCommandOutput: ${inspect(sendCommandResponse)}`);\n  }\n\n  const commandId = sendCommandResponse.Command?.CommandId;\n\n  if (!commandId) {\n    setFailed(Error(\"The 'SSM Send Command' command failed to return a command ID.\"));\n    process.exit(1);\n  }\n\n  info(\"Waiting for remote command invocation to complete...\");\n  const timer = setInterval(() => info(\"Still waiting...\"), 10_000);\n  timer.unref(); // Don't let the timer prevent the event loop from exiting.\n\n  const response = await waitCommandInvocationComplete(instanceId, commandId);\n\n  clearInterval(timer);\n  info(`Remote command invocation completed with status: \"${response.Status ?? \"undefined\"}\". Fetching output...`);\n\n  // Add a slight delay to prevent returning before all logs are published to CloudWatch.\n  await scheduler.wait(3000);\n\n  if (response.StandardOutputContent) {\n    const messages = await getLogMessages(response, \"stdout\");\n    printContent(messages.join(\"\"), \"stdout\");\n  }\n\n  if (response.StandardErrorContent) {\n    const messages = await getLogMessages(response, \"stderr\");\n    printContent(messages.join(\"\"), \"stderr\");\n  }\n\n  if (!response.StandardOutputContent && !response.StandardErrorContent) {\n    info(styles.gray.open + styles.bold.open + \"No output found.\");\n  }\n\n  if (response.ResponseCode !== undefined) {\n    setOutput(\"exit-code\", response.ResponseCode);\n  }\n\n  info(`Remote command invocation has completed with exit code: ${response.ResponseCode ?? \"undefined\"}`);\n} catch (err) {\n  if (err instanceof Error) setFailed(err);\n}\n\nasync function waitSsmAgent(instanceId: string, i = 0): Promise<void> {\n  const response = await ssm.send(\n    new DescribeInstanceInformationCommand({\n      Filters: [\n        {\n          Key: \"InstanceIds\",\n          Values: [instanceId],\n        },\n      ],\n    })\n  );\n\n  if (isDebug()) {\n    debug(`describeInstanceInformationOutput: ${inspect(response)}`);\n  }\n\n  if (response.InstanceInformationList?.[0]?.PingStatus !== \"Online\") {\n    await scheduler.wait(5000);\n    return waitSsmAgent(instanceId, i + 1);\n  }\n}\n\nasync function waitCommandInvocationComplete(\n  instanceId: string,\n  commandId: string\n): Promise<GetCommandInvocationCommandOutput> {\n  await scheduler.wait(5000);\n\n  const response = await ssm.send(\n    new GetCommandInvocationCommand({\n      InstanceId: instanceId,\n      CommandId: commandId,\n    })\n  );\n\n  if (isDebug()) {\n    debug(`getCommandInvocationOutput: ${inspect(response)}`);\n  }\n\n  if (response.Status && [\"Success\", \"Failed\", \"Cancelled\", \"TimedOut\"].includes(response.Status)) {\n    return response;\n  }\n\n  return waitCommandInvocationComplete(instanceId, commandId);\n}\n\nfunction printContent(content: string, stream: \"stdout\" | \"stderr\") {\n  const style = stream === \"stdout\" ? styles.cyan.open : styles.red.open + styles.bold.open;\n  info(style + `----- BEGIN ${stream.toUpperCase()} CONTENT -----`);\n  content\n    .trim()\n    .split(/\\r?\\n/)\n    .forEach((line) => info(style + line));\n  info(style + `----- END ${stream.toUpperCase()} CONTENT -----`);\n}\n\nasync function getLogMessages(\n  commandInvocationOutput: GetCommandInvocationCommandOutput,\n  stream: \"stdout\" | \"stderr\",\n  token?: string\n): Promise<string[]> {\n  const { DocumentName, CommandId, InstanceId, PluginName } = commandInvocationOutput;\n\n  if (!DocumentName) {\n    throw Error(\"DocumentName is undefined.\");\n  }\n\n  if (!CommandId) {\n    throw Error(\"CommandId is undefined.\");\n  }\n\n  if (!InstanceId) {\n    throw Error(\"InstanceId is undefined.\");\n  }\n\n  if (!PluginName) {\n    throw Error(\"PluginName is undefined.\");\n  }\n\n  const response = await cloudWatchLogs.send(\n    new GetLogEventsCommand({\n      logGroupName: \"/aws/ssm/\" + DocumentName,\n      logStreamName: `${CommandId}/${InstanceId}/${PluginName.replace(\":\", \"-\")}/${stream}`,\n      startFromHead: true,\n      nextToken: token,\n    })\n  );\n\n  if (isDebug()) {\n    debug(`getLogEventsCommandOutput: ${inspect(response)}`);\n  }\n\n  const result = (response.events ?? []).map((e) => e.message).filter((m): m is string => m !== undefined);\n\n  return token === response.nextForwardToken\n    ? result\n    : result.concat(await getLogMessages(commandInvocationOutput, stream, response.nextForwardToken));\n}\n", "export class NoOpLogger {\n    trace() { }\n    debug() { }\n    info() { }\n    warn() { }\n    error() { }\n}\n", "export const constructStack = () => {\n    let absoluteEntries = [];\n    let relativeEntries = [];\n    const entriesNameSet = new Set();\n    const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]);\n    const removeByName = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.name && entry.name === toRemove) {\n                isRemoved = true;\n                entriesNameSet.delete(toRemove);\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const removeByReference = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.middleware === toRemove) {\n                isRemoved = true;\n                if (entry.name)\n                    entriesNameSet.delete(entry.name);\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const cloneTo = (toStack) => {\n        absoluteEntries.forEach((entry) => {\n            toStack.add(entry.middleware, { ...entry });\n        });\n        relativeEntries.forEach((entry) => {\n            toStack.addRelativeTo(entry.middleware, { ...entry });\n        });\n        return toStack;\n    };\n    const expandRelativeMiddlewareList = (from) => {\n        const expandedMiddlewareList = [];\n        from.before.forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        expandedMiddlewareList.push(from);\n        from.after.reverse().forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        return expandedMiddlewareList;\n    };\n    const getMiddlewareList = (debug = false) => {\n        const normalizedAbsoluteEntries = [];\n        const normalizedRelativeEntries = [];\n        const normalizedEntriesNameMap = {};\n        absoluteEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            if (normalizedEntry.name)\n                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n            normalizedAbsoluteEntries.push(normalizedEntry);\n        });\n        relativeEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            if (normalizedEntry.name)\n                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n            normalizedRelativeEntries.push(normalizedEntry);\n        });\n        normalizedRelativeEntries.forEach((entry) => {\n            if (entry.toMiddleware) {\n                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n                if (toMiddleware === undefined) {\n                    if (debug) {\n                        return;\n                    }\n                    throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${entry.toMiddleware}`);\n                }\n                if (entry.relation === \"after\") {\n                    toMiddleware.after.push(entry);\n                }\n                if (entry.relation === \"before\") {\n                    toMiddleware.before.push(entry);\n                }\n            }\n        });\n        const mainChain = sort(normalizedAbsoluteEntries)\n            .map(expandRelativeMiddlewareList)\n            .reduce((wholeList, expendedMiddlewareList) => {\n            wholeList.push(...expendedMiddlewareList);\n            return wholeList;\n        }, []);\n        return mainChain;\n    };\n    const stack = {\n        add: (middleware, options = {}) => {\n            const { name, override } = options;\n            const entry = {\n                step: \"initialize\",\n                priority: \"normal\",\n                middleware,\n                ...options,\n            };\n            if (name) {\n                if (entriesNameSet.has(name)) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${name}'`);\n                    const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === name);\n                    const toOverride = absoluteEntries[toOverrideIndex];\n                    if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n                        throw new Error(`\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` +\n                            `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);\n                    }\n                    absoluteEntries.splice(toOverrideIndex, 1);\n                }\n                entriesNameSet.add(name);\n            }\n            absoluteEntries.push(entry);\n        },\n        addRelativeTo: (middleware, options) => {\n            const { name, override } = options;\n            const entry = {\n                middleware,\n                ...options,\n            };\n            if (name) {\n                if (entriesNameSet.has(name)) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${name}'`);\n                    const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === name);\n                    const toOverride = relativeEntries[toOverrideIndex];\n                    if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n                        throw new Error(`\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                            `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`);\n                    }\n                    relativeEntries.splice(toOverrideIndex, 1);\n                }\n                entriesNameSet.add(name);\n            }\n            relativeEntries.push(entry);\n        },\n        clone: () => cloneTo(constructStack()),\n        use: (plugin) => {\n            plugin.applyToStack(stack);\n        },\n        remove: (toRemove) => {\n            if (typeof toRemove === \"string\")\n                return removeByName(toRemove);\n            else\n                return removeByReference(toRemove);\n        },\n        removeByTag: (toRemove) => {\n            let isRemoved = false;\n            const filterCb = (entry) => {\n                const { tags, name } = entry;\n                if (tags && tags.includes(toRemove)) {\n                    if (name)\n                        entriesNameSet.delete(name);\n                    isRemoved = true;\n                    return false;\n                }\n                return true;\n            };\n            absoluteEntries = absoluteEntries.filter(filterCb);\n            relativeEntries = relativeEntries.filter(filterCb);\n            return isRemoved;\n        },\n        concat: (from) => {\n            const cloned = cloneTo(constructStack());\n            cloned.use(from);\n            return cloned;\n        },\n        applyToStack: cloneTo,\n        identify: () => {\n            return getMiddlewareList(true).map((mw) => {\n                return mw.name + \": \" + (mw.tags || []).join(\",\");\n            });\n        },\n        resolve: (handler, context) => {\n            for (const middleware of getMiddlewareList()\n                .map((entry) => entry.middleware)\n                .reverse()) {\n                handler = middleware(handler, context);\n            }\n            return handler;\n        },\n    };\n    return stack;\n};\nconst stepWeights = {\n    initialize: 5,\n    serialize: 4,\n    build: 3,\n    finalizeRequest: 2,\n    deserialize: 1,\n};\nconst priorityWeights = {\n    high: 3,\n    normal: 2,\n    low: 1,\n};\n", "import { constructStack } from \"@aws-sdk/middleware-stack\";\nexport class Client {\n    constructor(config) {\n        this.middlewareStack = constructStack();\n        this.config = config;\n    }\n    send(command, optionsOrCb, cb) {\n        const options = typeof optionsOrCb !== \"function\" ? optionsOrCb : undefined;\n        const callback = typeof optionsOrCb === \"function\" ? optionsOrCb : cb;\n        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);\n        if (callback) {\n            handler(command)\n                .then((result) => callback(null, result.output), (err) => callback(err))\n                .catch(() => { });\n        }\n        else {\n            return handler(command).then((result) => result.output);\n        }\n    }\n    destroy() {\n        if (this.config.requestHandler.destroy)\n            this.config.requestHandler.destroy();\n    }\n}\n", "import { constructStack } from \"@aws-sdk/middleware-stack\";\nexport class Command {\n    constructor() {\n        this.middlewareStack = constructStack();\n    }\n}\n", "export const SENSITIVE_STRING = \"***SensitiveInformation***\";\n", "export const parseBoolean = (value) => {\n    switch (value) {\n        case \"true\":\n            return true;\n        case \"false\":\n            return false;\n        default:\n            throw new Error(`Unable to parse boolean value \"${value}\"`);\n    }\n};\nexport const expectBoolean = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"number\") {\n        if (value === 0 || value === 1) {\n            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (value === 0) {\n            return false;\n        }\n        if (value === 1) {\n            return true;\n        }\n    }\n    if (typeof value === \"string\") {\n        const lower = value.toLowerCase();\n        if (lower === \"false\" || lower === \"true\") {\n            logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));\n        }\n        if (lower === \"false\") {\n            return false;\n        }\n        if (lower === \"true\") {\n            return true;\n        }\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);\n};\nexport const expectNumber = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        const parsed = parseFloat(value);\n        if (!Number.isNaN(parsed)) {\n            if (String(parsed) !== String(value)) {\n                logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));\n            }\n            return parsed;\n        }\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);\n};\nconst MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));\nexport const expectFloat32 = (value) => {\n    const expected = expectNumber(value);\n    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {\n        if (Math.abs(expected) > MAX_FLOAT) {\n            throw new TypeError(`Expected 32-bit float, got ${value}`);\n        }\n    }\n    return expected;\n};\nexport const expectLong = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (Number.isInteger(value) && !Number.isNaN(value)) {\n        return value;\n    }\n    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);\n};\nexport const expectInt = expectLong;\nexport const expectInt32 = (value) => expectSizedInt(value, 32);\nexport const expectShort = (value) => expectSizedInt(value, 16);\nexport const expectByte = (value) => expectSizedInt(value, 8);\nconst expectSizedInt = (value, size) => {\n    const expected = expectLong(value);\n    if (expected !== undefined && castInt(expected, size) !== expected) {\n        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);\n    }\n    return expected;\n};\nconst castInt = (value, size) => {\n    switch (size) {\n        case 32:\n            return Int32Array.of(value)[0];\n        case 16:\n            return Int16Array.of(value)[0];\n        case 8:\n            return Int8Array.of(value)[0];\n    }\n};\nexport const expectNonNull = (value, location) => {\n    if (value === null || value === undefined) {\n        if (location) {\n            throw new TypeError(`Expected a non-null value for ${location}`);\n        }\n        throw new TypeError(\"Expected a non-null value\");\n    }\n    return value;\n};\nexport const expectObject = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"object\" && !Array.isArray(value)) {\n        return value;\n    }\n    const receivedType = Array.isArray(value) ? \"array\" : typeof value;\n    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);\n};\nexport const expectString = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if ([\"boolean\", \"number\", \"bigint\"].includes(typeof value)) {\n        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));\n        return String(value);\n    }\n    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);\n};\nexport const expectUnion = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    const asObject = expectObject(value);\n    const setKeys = Object.entries(asObject)\n        .filter(([, v]) => v != null)\n        .map(([k]) => k);\n    if (setKeys.length === 0) {\n        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);\n    }\n    if (setKeys.length > 1) {\n        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);\n    }\n    return asObject;\n};\nexport const strictParseDouble = (value) => {\n    if (typeof value == \"string\") {\n        return expectNumber(parseNumber(value));\n    }\n    return expectNumber(value);\n};\nexport const strictParseFloat = strictParseDouble;\nexport const strictParseFloat32 = (value) => {\n    if (typeof value == \"string\") {\n        return expectFloat32(parseNumber(value));\n    }\n    return expectFloat32(value);\n};\nconst NUMBER_REGEX = /(-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)|(-?Infinity)|(NaN)/g;\nconst parseNumber = (value) => {\n    const matches = value.match(NUMBER_REGEX);\n    if (matches === null || matches[0].length !== value.length) {\n        throw new TypeError(`Expected real number, got implicit NaN`);\n    }\n    return parseFloat(value);\n};\nexport const limitedParseDouble = (value) => {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectNumber(value);\n};\nexport const handleFloat = limitedParseDouble;\nexport const limitedParseFloat = limitedParseDouble;\nexport const limitedParseFloat32 = (value) => {\n    if (typeof value == \"string\") {\n        return parseFloatString(value);\n    }\n    return expectFloat32(value);\n};\nconst parseFloatString = (value) => {\n    switch (value) {\n        case \"NaN\":\n            return NaN;\n        case \"Infinity\":\n            return Infinity;\n        case \"-Infinity\":\n            return -Infinity;\n        default:\n            throw new Error(`Unable to parse float value: ${value}`);\n    }\n};\nexport const strictParseLong = (value) => {\n    if (typeof value === \"string\") {\n        return expectLong(parseNumber(value));\n    }\n    return expectLong(value);\n};\nexport const strictParseInt = strictParseLong;\nexport const strictParseInt32 = (value) => {\n    if (typeof value === \"string\") {\n        return expectInt32(parseNumber(value));\n    }\n    return expectInt32(value);\n};\nexport const strictParseShort = (value) => {\n    if (typeof value === \"string\") {\n        return expectShort(parseNumber(value));\n    }\n    return expectShort(value);\n};\nexport const strictParseByte = (value) => {\n    if (typeof value === \"string\") {\n        return expectByte(parseNumber(value));\n    }\n    return expectByte(value);\n};\nconst stackTraceWarning = (message) => {\n    return String(new TypeError(message).stack || message)\n        .split(\"\\n\")\n        .slice(0, 5)\n        .filter((s) => !s.includes(\"stackTraceWarning\"))\n        .join(\"\\n\");\n};\nexport const logger = {\n    warn: console.warn,\n};\n", "import { strictParseByte, strictParseDouble, strictParseFloat32, strictParseShort } from \"./parse-utils\";\nconst DAYS = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\nconst MONTHS = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nexport function dateToUtcString(date) {\n    const year = date.getUTCFullYear();\n    const month = date.getUTCMonth();\n    const dayOfWeek = date.getUTCDay();\n    const dayOfMonthInt = date.getUTCDate();\n    const hoursInt = date.getUTCHours();\n    const minutesInt = date.getUTCMinutes();\n    const secondsInt = date.getUTCSeconds();\n    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;\n    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;\n    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;\n    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;\n    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;\n}\nconst RFC3339 = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?[zZ]$/);\nexport const parseRfc3339DateTime = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    const match = RFC3339.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n    const year = strictParseShort(stripLeadingZeroes(yearStr));\n    const month = parseDateValue(monthStr, \"month\", 1, 12);\n    const day = parseDateValue(dayStr, \"day\", 1, 31);\n    return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });\n};\nconst RFC3339_WITH_OFFSET = new RegExp(/^(\\d{4})-(\\d{2})-(\\d{2})[tT](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))?(([-+]\\d{2}\\:\\d{2})|[zZ])$/);\nexport const parseRfc3339DateTimeWithOffset = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-3339 date-times must be expressed as strings\");\n    }\n    const match = RFC3339_WITH_OFFSET.exec(value);\n    if (!match) {\n        throw new TypeError(\"Invalid RFC-3339 date-time value\");\n    }\n    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, offsetStr] = match;\n    const year = strictParseShort(stripLeadingZeroes(yearStr));\n    const month = parseDateValue(monthStr, \"month\", 1, 12);\n    const day = parseDateValue(dayStr, \"day\", 1, 31);\n    const date = buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });\n    if (offsetStr.toUpperCase() != \"Z\") {\n        date.setTime(date.getTime() - parseOffsetToMilliseconds(offsetStr));\n    }\n    return date;\n};\nconst IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nconst RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? GMT$/);\nconst ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\d{2}) (\\d{1,2}):(\\d{2}):(\\d{2})(?:\\.(\\d+))? (\\d{4})$/);\nexport const parseRfc7231DateTime = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    if (typeof value !== \"string\") {\n        throw new TypeError(\"RFC-7231 date-times must be expressed as strings\");\n    }\n    let match = IMF_FIXDATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });\n    }\n    match = RFC_850_DATE.exec(value);\n    if (match) {\n        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;\n        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \"day\", 1, 31), {\n            hours,\n            minutes,\n            seconds,\n            fractionalMilliseconds,\n        }));\n    }\n    match = ASC_TIME.exec(value);\n    if (match) {\n        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;\n        return buildDate(strictParseShort(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \"day\", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });\n    }\n    throw new TypeError(\"Invalid RFC-7231 date-time value\");\n};\nexport const parseEpochTimestamp = (value) => {\n    if (value === null || value === undefined) {\n        return undefined;\n    }\n    let valueAsDouble;\n    if (typeof value === \"number\") {\n        valueAsDouble = value;\n    }\n    else if (typeof value === \"string\") {\n        valueAsDouble = strictParseDouble(value);\n    }\n    else {\n        throw new TypeError(\"Epoch timestamps must be expressed as floating point numbers or their string representation\");\n    }\n    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {\n        throw new TypeError(\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\");\n    }\n    return new Date(Math.round(valueAsDouble * 1000));\n};\nconst buildDate = (year, month, day, time) => {\n    const adjustedMonth = month - 1;\n    validateDayOfMonth(year, adjustedMonth, day);\n    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \"hour\", 0, 23), parseDateValue(time.minutes, \"minute\", 0, 59), parseDateValue(time.seconds, \"seconds\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));\n};\nconst parseTwoDigitYear = (value) => {\n    const thisYear = new Date().getUTCFullYear();\n    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + strictParseShort(stripLeadingZeroes(value));\n    if (valueInThisCentury < thisYear) {\n        return valueInThisCentury + 100;\n    }\n    return valueInThisCentury;\n};\nconst FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1000;\nconst adjustRfc850Year = (input) => {\n    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {\n        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));\n    }\n    return input;\n};\nconst parseMonthByShortName = (value) => {\n    const monthIdx = MONTHS.indexOf(value);\n    if (monthIdx < 0) {\n        throw new TypeError(`Invalid month: ${value}`);\n    }\n    return monthIdx + 1;\n};\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst validateDayOfMonth = (year, month, day) => {\n    let maxDays = DAYS_IN_MONTH[month];\n    if (month === 1 && isLeapYear(year)) {\n        maxDays = 29;\n    }\n    if (day > maxDays) {\n        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);\n    }\n};\nconst isLeapYear = (year) => {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n};\nconst parseDateValue = (value, type, lower, upper) => {\n    const dateVal = strictParseByte(stripLeadingZeroes(value));\n    if (dateVal < lower || dateVal > upper) {\n        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);\n    }\n    return dateVal;\n};\nconst parseMilliseconds = (value) => {\n    if (value === null || value === undefined) {\n        return 0;\n    }\n    return strictParseFloat32(\"0.\" + value) * 1000;\n};\nconst parseOffsetToMilliseconds = (value) => {\n    const directionStr = value[0];\n    let direction = 1;\n    if (directionStr == \"+\") {\n        direction = 1;\n    }\n    else if (directionStr == \"-\") {\n        direction = -1;\n    }\n    else {\n        throw new TypeError(`Offset direction, ${directionStr}, must be \"+\" or \"-\"`);\n    }\n    const hour = Number(value.substring(1, 3));\n    const minute = Number(value.substring(4, 6));\n    return direction * (hour * 60 + minute) * 60 * 1000;\n};\nconst stripLeadingZeroes = (value) => {\n    let idx = 0;\n    while (idx < value.length - 1 && value.charAt(idx) === \"0\") {\n        idx++;\n    }\n    if (idx === 0) {\n        return value;\n    }\n    return value.slice(idx);\n};\n", "export class ServiceException extends Error {\n    constructor(options) {\n        super(options.message);\n        Object.setPrototypeOf(this, ServiceException.prototype);\n        this.name = options.name;\n        this.$fault = options.$fault;\n        this.$metadata = options.$metadata;\n    }\n}\nexport const decorateServiceException = (exception, additions = {}) => {\n    Object.entries(additions)\n        .filter(([, v]) => v !== undefined)\n        .forEach(([k, v]) => {\n        if (exception[k] == undefined || exception[k] === \"\") {\n            exception[k] = v;\n        }\n    });\n    const message = exception.message || exception.Message || \"UnknownError\";\n    exception.message = message;\n    delete exception.Message;\n    return exception;\n};\n", "import { decorateServiceException } from \"./exceptions\";\nexport const throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {\n    const $metadata = deserializeMetadata(output);\n    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + \"\" : undefined;\n    const response = new exceptionCtor({\n        name: parsedBody?.code || parsedBody?.Code || errorCode || statusCode || \"UnknownError\",\n        $fault: \"client\",\n        $metadata,\n    });\n    throw decorateServiceException(response, parsedBody);\n};\nexport const withBaseException = (ExceptionCtor) => {\n    return ({ output, parsedBody, errorCode }) => {\n        throwDefaultError({ output, parsedBody, exceptionCtor: ExceptionCtor, errorCode });\n    };\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\n", "export const loadConfigsForDefaultMode = (mode) => {\n    switch (mode) {\n        case \"standard\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 3100,\n            };\n        case \"in-region\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 1100,\n            };\n        case \"cross-region\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 3100,\n            };\n        case \"mobile\":\n            return {\n                retryMode: \"standard\",\n                connectionTimeout: 30000,\n            };\n        default:\n            return {};\n    }\n};\n", "let warningEmitted = false;\nexport const emitWarningIfUnsupportedVersion = (version) => {\n    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf(\".\"))) < 14) {\n        warningEmitted = true;\n    }\n};\n", "export function extendedEncodeURIComponent(str) {\n    return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\n", "export const getValueFromTextNode = (obj) => {\n    const textNodeName = \"#text\";\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) {\n            obj[key] = obj[key][textNodeName];\n        }\n        else if (typeof obj[key] === \"object\" && obj[key] !== null) {\n            obj[key] = getValueFromTextNode(obj[key]);\n        }\n    }\n    return obj;\n};\n", "export const StringWrapper = function () {\n    const Class = Object.getPrototypeOf(this).constructor;\n    const Constructor = Function.bind.apply(String, [null, ...arguments]);\n    const instance = new Constructor();\n    Object.setPrototypeOf(instance, Class.prototype);\n    return instance;\n};\nStringWrapper.prototype = Object.create(String.prototype, {\n    constructor: {\n        value: StringWrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true,\n    },\n});\nObject.setPrototypeOf(StringWrapper, String);\nexport class LazyJsonString extends StringWrapper {\n    deserializeJSON() {\n        return JSON.parse(super.toString());\n    }\n    toJSON() {\n        return super.toString();\n    }\n    static fromObject(object) {\n        if (object instanceof LazyJsonString) {\n            return object;\n        }\n        else if (object instanceof String || typeof object === \"string\") {\n            return new LazyJsonString(object);\n        }\n        return new LazyJsonString(JSON.stringify(object));\n    }\n}\n", "export function map(arg0, arg1, arg2) {\n    let target;\n    let filter;\n    let instructions;\n    if (typeof arg1 === \"undefined\" && typeof arg2 === \"undefined\") {\n        target = {};\n        instructions = arg0;\n    }\n    else {\n        target = arg0;\n        if (typeof arg1 === \"function\") {\n            filter = arg1;\n            instructions = arg2;\n            return mapWithFilter(target, filter, instructions);\n        }\n        else {\n            instructions = arg1;\n        }\n    }\n    for (const key of Object.keys(instructions)) {\n        if (!Array.isArray(instructions[key])) {\n            target[key] = instructions[key];\n            continue;\n        }\n        applyInstruction(target, null, instructions, key);\n    }\n    return target;\n}\nexport const convertMap = (target) => {\n    const output = {};\n    for (const [k, v] of Object.entries(target || {})) {\n        output[k] = [, v];\n    }\n    return output;\n};\nexport const take = (source, instructions) => {\n    const out = {};\n    for (const key in instructions) {\n        applyInstruction(out, source, instructions, key);\n    }\n    return out;\n};\nconst mapWithFilter = (target, filter, instructions) => {\n    return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {\n        if (Array.isArray(value)) {\n            _instructions[key] = value;\n        }\n        else {\n            if (typeof value === \"function\") {\n                _instructions[key] = [filter, value()];\n            }\n            else {\n                _instructions[key] = [filter, value];\n            }\n        }\n        return _instructions;\n    }, {}));\n};\nconst applyInstruction = (target, source, instructions, targetKey) => {\n    if (source !== null) {\n        let instruction = instructions[targetKey];\n        if (typeof instruction === \"function\") {\n            instruction = [, instruction];\n        }\n        const [filter = nonNullish, valueFn = pass, sourceKey = targetKey] = instruction;\n        if ((typeof filter === \"function\" && filter(source[sourceKey])) || (typeof filter !== \"function\" && !!filter)) {\n            target[targetKey] = valueFn(source[sourceKey]);\n        }\n        return;\n    }\n    let [filter, value] = instructions[targetKey];\n    if (typeof value === \"function\") {\n        let _value;\n        const defaultFilterPassed = filter === undefined && (_value = value()) != null;\n        const customFilterPassed = (typeof filter === \"function\" && !!filter(void 0)) || (typeof filter !== \"function\" && !!filter);\n        if (defaultFilterPassed) {\n            target[targetKey] = _value;\n        }\n        else if (customFilterPassed) {\n            target[targetKey] = value();\n        }\n    }\n    else {\n        const defaultFilterPassed = filter === undefined && value != null;\n        const customFilterPassed = (typeof filter === \"function\" && !!filter(value)) || (typeof filter !== \"function\" && !!filter);\n        if (defaultFilterPassed || customFilterPassed) {\n            target[targetKey] = value;\n        }\n    }\n};\nconst nonNullish = (_) => _ != null;\nconst pass = (_) => _;\n", "export const _json = (obj) => {\n    if (obj == null) {\n        return {};\n    }\n    if (Array.isArray(obj)) {\n        return obj.filter((_) => _ != null);\n    }\n    if (typeof obj === \"object\") {\n        const target = {};\n        for (const key of Object.keys(obj)) {\n            if (obj[key] == null) {\n                continue;\n            }\n            target[key] = _json(obj[key]);\n        }\n        return target;\n    }\n    return obj;\n};\n", "export const resolveParamsForS3 = async (endpointParams) => {\n    const bucket = endpointParams?.Bucket || \"\";\n    if (typeof endpointParams.Bucket === \"string\") {\n        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent(\"#\")).replace(/\\?/g, encodeURIComponent(\"?\"));\n    }\n    if (isArnBucketName(bucket)) {\n        if (endpointParams.ForcePathStyle === true) {\n            throw new Error(\"Path-style addressing cannot be used with ARN buckets\");\n        }\n    }\n    else if (!isDnsCompatibleBucketName(bucket) ||\n        (bucket.indexOf(\".\") !== -1 && !String(endpointParams.Endpoint).startsWith(\"http:\")) ||\n        bucket.toLowerCase() !== bucket ||\n        bucket.length < 3) {\n        endpointParams.ForcePathStyle = true;\n    }\n    if (endpointParams.DisableMultiRegionAccessPoints) {\n        endpointParams.disableMultiRegionAccessPoints = true;\n        endpointParams.DisableMRAP = true;\n    }\n    return endpointParams;\n};\nconst DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nconst IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nconst DOTS_PATTERN = /\\.\\./;\nexport const DOT_PATTERN = /\\./;\nexport const S3_HOSTNAME_PATTERN = /^(.+\\.)?s3(-fips)?(\\.dualstack)?[.-]([a-z0-9-]+)\\./;\nexport const isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);\nexport const isArnBucketName = (bucketName) => {\n    const [arn, partition, service, region, account, typeOrId] = bucketName.split(\":\");\n    const isArn = arn === \"arn\" && bucketName.split(\":\").length >= 6;\n    const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;\n    if (isArn && !isValidArn) {\n        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);\n    }\n    return arn === \"arn\" && !!partition && !!service && !!account && !!typeOrId;\n};\n", "export const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {\n    const configProvider = async () => {\n        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];\n        if (typeof configValue === \"function\") {\n            return configValue();\n        }\n        return configValue;\n    };\n    if (configKey === \"endpoint\" || canonicalEndpointParamKey === \"endpoint\") {\n        return async () => {\n            const endpoint = await configProvider();\n            if (endpoint && typeof endpoint === \"object\") {\n                if (\"url\" in endpoint) {\n                    return endpoint.url.href;\n                }\n                if (\"hostname\" in endpoint) {\n                    const { protocol, hostname, port, path } = endpoint;\n                    return `${protocol}//${hostname}${port ? \":\" + port : \"\"}${path}`;\n                }\n            }\n            return endpoint;\n        };\n    }\n    return configProvider;\n};\n", "import { resolveParamsForS3 } from \"../service-customizations\";\nimport { createConfigValueProvider } from \"./createConfigValueProvider\";\nexport const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {\n    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);\n    if (typeof clientConfig.endpointProvider !== \"function\") {\n        throw new Error(\"config.endpointProvider is not set.\");\n    }\n    const endpoint = clientConfig.endpointProvider(endpointParams, context);\n    return endpoint;\n};\nexport const resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {\n    const endpointParams = {};\n    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};\n    for (const [name, instruction] of Object.entries(instructions)) {\n        switch (instruction.type) {\n            case \"staticContextParams\":\n                endpointParams[name] = instruction.value;\n                break;\n            case \"contextParams\":\n                endpointParams[name] = commandInput[instruction.name];\n                break;\n            case \"clientContextParams\":\n            case \"builtInParams\":\n                endpointParams[name] = await createConfigValueProvider(instruction.name, name, clientConfig)();\n                break;\n            default:\n                throw new Error(\"Unrecognized endpoint parameter instruction: \" + JSON.stringify(instruction));\n        }\n    }\n    if (Object.keys(instructions).length === 0) {\n        Object.assign(endpointParams, clientConfig);\n    }\n    if (String(clientConfig.serviceId).toLowerCase() === \"s3\") {\n        await resolveParamsForS3(endpointParams);\n    }\n    return endpointParams;\n};\n", "export function parseQueryString(querystring) {\n    const query = {};\n    querystring = querystring.replace(/^\\?/, \"\");\n    if (querystring) {\n        for (const pair of querystring.split(\"&\")) {\n            let [key, value = null] = pair.split(\"=\");\n            key = decodeURIComponent(key);\n            if (value) {\n                value = decodeURIComponent(value);\n            }\n            if (!(key in query)) {\n                query[key] = value;\n            }\n            else if (Array.isArray(query[key])) {\n                query[key].push(value);\n            }\n            else {\n                query[key] = [query[key], value];\n            }\n        }\n    }\n    return query;\n}\n", "import { parseQueryString } from \"@aws-sdk/querystring-parser\";\nexport const parseUrl = (url) => {\n    if (typeof url === \"string\") {\n        return parseUrl(new URL(url));\n    }\n    const { hostname, pathname, port, protocol, search } = url;\n    let query;\n    if (search) {\n        query = parseQueryString(search);\n    }\n    return {\n        hostname,\n        port: port ? parseInt(port) : undefined,\n        protocol,\n        path: pathname,\n        query,\n    };\n};\n", "import { parseUrl } from \"@aws-sdk/url-parser\";\nexport const toEndpointV1 = (endpoint) => {\n    if (typeof endpoint === \"object\") {\n        if (\"url\" in endpoint) {\n            return parseUrl(endpoint.url);\n        }\n        return endpoint;\n    }\n    return parseUrl(endpoint);\n};\n", "import { getEndpointFromInstructions } from \"./adaptors/getEndpointFromInstructions\";\nexport const endpointMiddleware = ({ config, instructions, }) => {\n    return (next, context) => async (args) => {\n        const endpoint = await getEndpointFromInstructions(args.input, {\n            getEndpointParameterInstructions() {\n                return instructions;\n            },\n        }, { ...config }, context);\n        context.endpointV2 = endpoint;\n        context.authSchemes = endpoint.properties?.authSchemes;\n        const authScheme = context.authSchemes?.[0];\n        if (authScheme) {\n            context[\"signing_region\"] = authScheme.signingRegion;\n            context[\"signing_service\"] = authScheme.signingName;\n        }\n        return next({\n            ...args,\n        });\n    };\n};\n", "export const deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {\n    const { response } = await next(args);\n    try {\n        const parsed = await deserializer(response, options);\n        return {\n            response,\n            output: parsed,\n        };\n    }\n    catch (error) {\n        Object.defineProperty(error, \"$response\", {\n            value: response,\n        });\n        if (!('$metadata' in error)) {\n            const hint = `Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.`;\n            error.message += \"\\n  \" + hint;\n        }\n        throw error;\n    }\n};\n", "export const serializerMiddleware = (options, serializer) => (next, context) => async (args) => {\n    const endpoint = context.endpointV2?.url && options.urlParser\n        ? async () => options.urlParser(context.endpointV2.url)\n        : options.endpoint;\n    if (!endpoint) {\n        throw new Error(\"No valid endpoint provider available.\");\n    }\n    const request = await serializer(args.input, { ...options, endpoint });\n    return next({\n        ...args,\n        request,\n    });\n};\n", "import { deserializerMiddleware } from \"./deserializerMiddleware\";\nimport { serializerMiddleware } from \"./serializerMiddleware\";\nexport const deserializerMiddlewareOption = {\n    name: \"deserializerMiddleware\",\n    step: \"deserialize\",\n    tags: [\"DESERIALIZER\"],\n    override: true,\n};\nexport const serializerMiddlewareOption = {\n    name: \"serializerMiddleware\",\n    step: \"serialize\",\n    tags: [\"SERIALIZER\"],\n    override: true,\n};\nexport function getSerdePlugin(config, serializer, deserializer) {\n    return {\n        applyToStack: (commandStack) => {\n            commandStack.add(deserializerMiddleware(config, deserializer), deserializerMiddlewareOption);\n            commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);\n        },\n    };\n}\n", "import { serializerMiddlewareOption } from \"@aws-sdk/middleware-serde\";\nimport { endpointMiddleware } from \"./endpointMiddleware\";\nexport const endpointMiddlewareOptions = {\n    step: \"serialize\",\n    tags: [\"ENDPOINT_PARAMETERS\", \"ENDPOINT_V2\", \"ENDPOINT\"],\n    name: \"endpointV2Middleware\",\n    override: true,\n    relation: \"before\",\n    toMiddleware: serializerMiddlewareOption.name,\n};\nexport const getEndpointPlugin = (config, instructions) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(endpointMiddleware({\n            config,\n            instructions,\n        }), endpointMiddlewareOptions);\n    },\n});\n", "export const normalizeProvider = (input) => {\n    if (typeof input === \"function\")\n        return input;\n    const promisified = Promise.resolve(input);\n    return () => promisified;\n};\n", "import { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { toEndpointV1 } from \"./adaptors/toEndpointV1\";\nexport const resolveEndpointConfig = (input) => {\n    const tls = input.tls ?? true;\n    const { endpoint } = input;\n    const customEndpointProvider = endpoint != null ? async () => toEndpointV1(await normalizeProvider(endpoint)()) : undefined;\n    const isCustomEndpoint = !!endpoint;\n    return {\n        ...input,\n        endpoint: customEndpointProvider,\n        tls,\n        isCustomEndpoint,\n        useDualstackEndpoint: normalizeProvider(input.useDualstackEndpoint ?? false),\n        useFipsEndpoint: normalizeProvider(input.useFipsEndpoint ?? false),\n    };\n};\n", "export var FieldPosition;\n(function (FieldPosition) {\n    FieldPosition[FieldPosition[\"HEADER\"] = 0] = \"HEADER\";\n    FieldPosition[FieldPosition[\"TRAILER\"] = 1] = \"TRAILER\";\n})(FieldPosition || (FieldPosition = {}));\n", "export class HttpRequest {\n    constructor(options) {\n        this.method = options.method || \"GET\";\n        this.hostname = options.hostname || \"localhost\";\n        this.port = options.port;\n        this.query = options.query || {};\n        this.headers = options.headers || {};\n        this.body = options.body;\n        this.protocol = options.protocol\n            ? options.protocol.slice(-1) !== \":\"\n                ? `${options.protocol}:`\n                : options.protocol\n            : \"https:\";\n        this.path = options.path ? (options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path) : \"/\";\n    }\n    static isInstance(request) {\n        if (!request)\n            return false;\n        const req = request;\n        return (\"method\" in req &&\n            \"protocol\" in req &&\n            \"hostname\" in req &&\n            \"path\" in req &&\n            typeof req[\"query\"] === \"object\" &&\n            typeof req[\"headers\"] === \"object\");\n    }\n    clone() {\n        const cloned = new HttpRequest({\n            ...this,\n            headers: { ...this.headers },\n        });\n        if (cloned.query)\n            cloned.query = cloneQuery(cloned.query);\n        return cloned;\n    }\n}\nfunction cloneQuery(query) {\n    return Object.keys(query).reduce((carry, paramName) => {\n        const param = query[paramName];\n        return {\n            ...carry,\n            [paramName]: Array.isArray(param) ? [...param] : param,\n        };\n    }, {});\n}\n", "export class HttpResponse {\n    constructor(options) {\n        this.statusCode = options.statusCode;\n        this.headers = options.headers || {};\n        this.body = options.body;\n    }\n    static isInstance(response) {\n        if (!response)\n            return false;\n        const resp = response;\n        return typeof resp.statusCode === \"number\" && typeof resp.headers === \"object\";\n    }\n}\n", "import { ServiceException as __ServiceException, } from \"@aws-sdk/smithy-client\";\nexport class SSMServiceException extends __ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, SSMServiceException.prototype);\n    }\n}\n", "import { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nimport { SSMServiceException as __BaseException } from \"./SSMServiceException\";\nexport const ResourceTypeForTagging = {\n    ASSOCIATION: \"Association\",\n    AUTOMATION: \"Automation\",\n    DOCUMENT: \"Document\",\n    MAINTENANCE_WINDOW: \"MaintenanceWindow\",\n    MANAGED_INSTANCE: \"ManagedInstance\",\n    OPSMETADATA: \"OpsMetadata\",\n    OPS_ITEM: \"OpsItem\",\n    PARAMETER: \"Parameter\",\n    PATCH_BASELINE: \"PatchBaseline\",\n};\nexport class InternalServerError extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InternalServerError\",\n            $fault: \"server\",\n            ...opts,\n        });\n        this.name = \"InternalServerError\";\n        this.$fault = \"server\";\n        Object.setPrototypeOf(this, InternalServerError.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidResourceId extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidResourceId\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidResourceId\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidResourceId.prototype);\n    }\n}\nexport class InvalidResourceType extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidResourceType\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidResourceType\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidResourceType.prototype);\n    }\n}\nexport class TooManyTagsError extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TooManyTagsError\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TooManyTagsError\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TooManyTagsError.prototype);\n    }\n}\nexport class TooManyUpdates extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TooManyUpdates\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TooManyUpdates\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TooManyUpdates.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const ExternalAlarmState = {\n    ALARM: \"ALARM\",\n    UNKNOWN: \"UNKNOWN\",\n};\nexport class AlreadyExistsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AlreadyExistsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AlreadyExistsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AlreadyExistsException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class OpsItemInvalidParameterException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemInvalidParameterException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemInvalidParameterException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemInvalidParameterException.prototype);\n        this.ParameterNames = opts.ParameterNames;\n        this.Message = opts.Message;\n    }\n}\nexport class OpsItemLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemLimitExceededException.prototype);\n        this.ResourceTypes = opts.ResourceTypes;\n        this.Limit = opts.Limit;\n        this.LimitType = opts.LimitType;\n        this.Message = opts.Message;\n    }\n}\nexport class OpsItemNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class OpsItemRelatedItemAlreadyExistsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemRelatedItemAlreadyExistsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemRelatedItemAlreadyExistsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemRelatedItemAlreadyExistsException.prototype);\n        this.Message = opts.Message;\n        this.ResourceUri = opts.ResourceUri;\n        this.OpsItemId = opts.OpsItemId;\n    }\n}\nexport class DuplicateInstanceId extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"DuplicateInstanceId\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"DuplicateInstanceId\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, DuplicateInstanceId.prototype);\n    }\n}\nexport class InvalidCommandId extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidCommandId\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidCommandId\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidCommandId.prototype);\n    }\n}\nexport class InvalidInstanceId extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidInstanceId\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidInstanceId\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidInstanceId.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class DoesNotExistException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"DoesNotExistException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"DoesNotExistException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, DoesNotExistException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidParameters extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidParameters\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidParameters\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidParameters.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AssociationAlreadyExists extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AssociationAlreadyExists\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AssociationAlreadyExists\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AssociationAlreadyExists.prototype);\n    }\n}\nexport class AssociationLimitExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AssociationLimitExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AssociationLimitExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AssociationLimitExceeded.prototype);\n    }\n}\nexport const AssociationComplianceSeverity = {\n    Critical: \"CRITICAL\",\n    High: \"HIGH\",\n    Low: \"LOW\",\n    Medium: \"MEDIUM\",\n    Unspecified: \"UNSPECIFIED\",\n};\nexport const AssociationSyncCompliance = {\n    Auto: \"AUTO\",\n    Manual: \"MANUAL\",\n};\nexport const AssociationStatusName = {\n    Failed: \"Failed\",\n    Pending: \"Pending\",\n    Success: \"Success\",\n};\nexport class InvalidDocument extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDocument\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDocument\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDocument.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidDocumentVersion extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDocumentVersion\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDocumentVersion\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDocumentVersion.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidOutputLocation extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidOutputLocation\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidOutputLocation\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidOutputLocation.prototype);\n    }\n}\nexport class InvalidSchedule extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidSchedule\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidSchedule\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidSchedule.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidTag extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidTag\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidTag\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidTag.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidTarget extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidTarget\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidTarget\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidTarget.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidTargetMaps extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidTargetMaps\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidTargetMaps\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidTargetMaps.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class UnsupportedPlatformType extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedPlatformType\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedPlatformType\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedPlatformType.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const Fault = {\n    Client: \"Client\",\n    Server: \"Server\",\n    Unknown: \"Unknown\",\n};\nexport const AttachmentsSourceKey = {\n    AttachmentReference: \"AttachmentReference\",\n    S3FileUrl: \"S3FileUrl\",\n    SourceUrl: \"SourceUrl\",\n};\nexport const DocumentFormat = {\n    JSON: \"JSON\",\n    TEXT: \"TEXT\",\n    YAML: \"YAML\",\n};\nexport const DocumentType = {\n    ApplicationConfiguration: \"ApplicationConfiguration\",\n    ApplicationConfigurationSchema: \"ApplicationConfigurationSchema\",\n    Automation: \"Automation\",\n    ChangeCalendar: \"ChangeCalendar\",\n    ChangeTemplate: \"Automation.ChangeTemplate\",\n    CloudFormation: \"CloudFormation\",\n    Command: \"Command\",\n    ConformancePackTemplate: \"ConformancePackTemplate\",\n    DeploymentStrategy: \"DeploymentStrategy\",\n    Package: \"Package\",\n    Policy: \"Policy\",\n    ProblemAnalysis: \"ProblemAnalysis\",\n    ProblemAnalysisTemplate: \"ProblemAnalysisTemplate\",\n    QuickSetup: \"QuickSetup\",\n    Session: \"Session\",\n};\nexport const DocumentHashType = {\n    SHA1: \"Sha1\",\n    SHA256: \"Sha256\",\n};\nexport const DocumentParameterType = {\n    String: \"String\",\n    StringList: \"StringList\",\n};\nexport const PlatformType = {\n    LINUX: \"Linux\",\n    MACOS: \"MacOS\",\n    WINDOWS: \"Windows\",\n};\nexport const ReviewStatus = {\n    APPROVED: \"APPROVED\",\n    NOT_REVIEWED: \"NOT_REVIEWED\",\n    PENDING: \"PENDING\",\n    REJECTED: \"REJECTED\",\n};\nexport const DocumentStatus = {\n    Active: \"Active\",\n    Creating: \"Creating\",\n    Deleting: \"Deleting\",\n    Failed: \"Failed\",\n    Updating: \"Updating\",\n};\nexport class DocumentAlreadyExists extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"DocumentAlreadyExists\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"DocumentAlreadyExists\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, DocumentAlreadyExists.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class DocumentLimitExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"DocumentLimitExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"DocumentLimitExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, DocumentLimitExceeded.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidDocumentContent extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDocumentContent\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDocumentContent\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDocumentContent.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidDocumentSchemaVersion extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDocumentSchemaVersion\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDocumentSchemaVersion\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDocumentSchemaVersion.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class MaxDocumentSizeExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"MaxDocumentSizeExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"MaxDocumentSizeExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, MaxDocumentSizeExceeded.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class IdempotentParameterMismatch extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"IdempotentParameterMismatch\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"IdempotentParameterMismatch\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, IdempotentParameterMismatch.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ResourceLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceLimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const OpsItemDataType = {\n    SEARCHABLE_STRING: \"SearchableString\",\n    STRING: \"String\",\n};\nexport class OpsItemAccessDeniedException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemAccessDeniedException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemAccessDeniedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemAccessDeniedException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class OpsItemAlreadyExistsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemAlreadyExistsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemAlreadyExistsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemAlreadyExistsException.prototype);\n        this.Message = opts.Message;\n        this.OpsItemId = opts.OpsItemId;\n    }\n}\nexport class OpsMetadataAlreadyExistsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsMetadataAlreadyExistsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsMetadataAlreadyExistsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsMetadataAlreadyExistsException.prototype);\n    }\n}\nexport class OpsMetadataInvalidArgumentException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsMetadataInvalidArgumentException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsMetadataInvalidArgumentException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsMetadataInvalidArgumentException.prototype);\n    }\n}\nexport class OpsMetadataLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsMetadataLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsMetadataLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsMetadataLimitExceededException.prototype);\n    }\n}\nexport class OpsMetadataTooManyUpdatesException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsMetadataTooManyUpdatesException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsMetadataTooManyUpdatesException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsMetadataTooManyUpdatesException.prototype);\n    }\n}\nexport const PatchComplianceLevel = {\n    Critical: \"CRITICAL\",\n    High: \"HIGH\",\n    Informational: \"INFORMATIONAL\",\n    Low: \"LOW\",\n    Medium: \"MEDIUM\",\n    Unspecified: \"UNSPECIFIED\",\n};\nexport const PatchFilterKey = {\n    AdvisoryId: \"ADVISORY_ID\",\n    Arch: \"ARCH\",\n    BugzillaId: \"BUGZILLA_ID\",\n    CVEId: \"CVE_ID\",\n    Classification: \"CLASSIFICATION\",\n    Epoch: \"EPOCH\",\n    MsrcSeverity: \"MSRC_SEVERITY\",\n    Name: \"NAME\",\n    PatchId: \"PATCH_ID\",\n    PatchSet: \"PATCH_SET\",\n    Priority: \"PRIORITY\",\n    Product: \"PRODUCT\",\n    ProductFamily: \"PRODUCT_FAMILY\",\n    Release: \"RELEASE\",\n    Repository: \"REPOSITORY\",\n    Section: \"SECTION\",\n    Security: \"SECURITY\",\n    Severity: \"SEVERITY\",\n    Version: \"VERSION\",\n};\nexport const OperatingSystem = {\n    AlmaLinux: \"ALMA_LINUX\",\n    AmazonLinux: \"AMAZON_LINUX\",\n    AmazonLinux2: \"AMAZON_LINUX_2\",\n    AmazonLinux2022: \"AMAZON_LINUX_2022\",\n    AmazonLinux2023: \"AMAZON_LINUX_2023\",\n    CentOS: \"CENTOS\",\n    Debian: \"DEBIAN\",\n    MacOS: \"MACOS\",\n    OracleLinux: \"ORACLE_LINUX\",\n    Raspbian: \"RASPBIAN\",\n    RedhatEnterpriseLinux: \"REDHAT_ENTERPRISE_LINUX\",\n    Rocky_Linux: \"ROCKY_LINUX\",\n    Suse: \"SUSE\",\n    Ubuntu: \"UBUNTU\",\n    Windows: \"WINDOWS\",\n};\nexport const PatchAction = {\n    AllowAsDependency: \"ALLOW_AS_DEPENDENCY\",\n    Block: \"BLOCK\",\n};\nexport const ResourceDataSyncS3Format = {\n    JSON_SERDE: \"JsonSerDe\",\n};\nexport class ResourceDataSyncAlreadyExistsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceDataSyncAlreadyExistsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceDataSyncAlreadyExistsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceDataSyncAlreadyExistsException.prototype);\n        this.SyncName = opts.SyncName;\n    }\n}\nexport class ResourceDataSyncCountExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceDataSyncCountExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceDataSyncCountExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceDataSyncCountExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ResourceDataSyncInvalidConfigurationException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceDataSyncInvalidConfigurationException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceDataSyncInvalidConfigurationException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceDataSyncInvalidConfigurationException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidActivation extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidActivation\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidActivation\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidActivation.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidActivationId extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidActivationId\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidActivationId\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidActivationId.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AssociationDoesNotExist extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AssociationDoesNotExist\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AssociationDoesNotExist\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AssociationDoesNotExist.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AssociatedInstances extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AssociatedInstances\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AssociatedInstances\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AssociatedInstances.prototype);\n    }\n}\nexport class InvalidDocumentOperation extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDocumentOperation\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDocumentOperation\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDocumentOperation.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const InventorySchemaDeleteOption = {\n    DELETE_SCHEMA: \"DeleteSchema\",\n    DISABLE_SCHEMA: \"DisableSchema\",\n};\nexport class InvalidDeleteInventoryParametersException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDeleteInventoryParametersException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDeleteInventoryParametersException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDeleteInventoryParametersException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidInventoryRequestException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidInventoryRequestException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidInventoryRequestException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidInventoryRequestException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidOptionException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidOptionException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidOptionException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidOptionException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidTypeNameException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidTypeNameException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidTypeNameException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidTypeNameException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class OpsMetadataNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsMetadataNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsMetadataNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsMetadataNotFoundException.prototype);\n    }\n}\nexport class ParameterNotFound extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterNotFound\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterNotFound\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterNotFound.prototype);\n    }\n}\nexport class ResourceInUseException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceInUseException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceInUseException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceInUseException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ResourceDataSyncNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceDataSyncNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceDataSyncNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceDataSyncNotFoundException.prototype);\n        this.SyncName = opts.SyncName;\n        this.SyncType = opts.SyncType;\n        this.Message = opts.Message;\n    }\n}\nexport class ResourcePolicyConflictException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourcePolicyConflictException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourcePolicyConflictException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourcePolicyConflictException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ResourcePolicyInvalidParameterException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourcePolicyInvalidParameterException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourcePolicyInvalidParameterException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourcePolicyInvalidParameterException.prototype);\n        this.ParameterNames = opts.ParameterNames;\n        this.Message = opts.Message;\n    }\n}\nexport class TargetInUseException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TargetInUseException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TargetInUseException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TargetInUseException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const DescribeActivationsFilterKeys = {\n    ACTIVATION_IDS: \"ActivationIds\",\n    DEFAULT_INSTANCE_NAME: \"DefaultInstanceName\",\n    IAM_ROLE: \"IamRole\",\n};\nexport class InvalidFilter extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidFilter\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidFilter\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidFilter.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidNextToken extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidNextToken\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidNextToken\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidNextToken.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidAssociationVersion extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAssociationVersion\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAssociationVersion\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAssociationVersion.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const AssociationExecutionFilterKey = {\n    CreatedTime: \"CreatedTime\",\n    ExecutionId: \"ExecutionId\",\n    Status: \"Status\",\n};\nexport const AssociationFilterOperatorType = {\n    Equal: \"EQUAL\",\n    GreaterThan: \"GREATER_THAN\",\n    LessThan: \"LESS_THAN\",\n};\nexport class AssociationExecutionDoesNotExist extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AssociationExecutionDoesNotExist\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AssociationExecutionDoesNotExist\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AssociationExecutionDoesNotExist.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const AssociationExecutionTargetsFilterKey = {\n    ResourceId: \"ResourceId\",\n    ResourceType: \"ResourceType\",\n    Status: \"Status\",\n};\nexport const AutomationExecutionFilterKey = {\n    AUTOMATION_SUBTYPE: \"AutomationSubtype\",\n    AUTOMATION_TYPE: \"AutomationType\",\n    CURRENT_ACTION: \"CurrentAction\",\n    DOCUMENT_NAME_PREFIX: \"DocumentNamePrefix\",\n    EXECUTION_ID: \"ExecutionId\",\n    EXECUTION_STATUS: \"ExecutionStatus\",\n    OPS_ITEM_ID: \"OpsItemId\",\n    PARENT_EXECUTION_ID: \"ParentExecutionId\",\n    START_TIME_AFTER: \"StartTimeAfter\",\n    START_TIME_BEFORE: \"StartTimeBefore\",\n    TAG_KEY: \"TagKey\",\n    TARGET_RESOURCE_GROUP: \"TargetResourceGroup\",\n};\nexport const AutomationExecutionStatus = {\n    APPROVED: \"Approved\",\n    CANCELLED: \"Cancelled\",\n    CANCELLING: \"Cancelling\",\n    CHANGE_CALENDAR_OVERRIDE_APPROVED: \"ChangeCalendarOverrideApproved\",\n    CHANGE_CALENDAR_OVERRIDE_REJECTED: \"ChangeCalendarOverrideRejected\",\n    COMPLETED_WITH_FAILURE: \"CompletedWithFailure\",\n    COMPLETED_WITH_SUCCESS: \"CompletedWithSuccess\",\n    FAILED: \"Failed\",\n    INPROGRESS: \"InProgress\",\n    PENDING: \"Pending\",\n    PENDING_APPROVAL: \"PendingApproval\",\n    PENDING_CHANGE_CALENDAR_OVERRIDE: \"PendingChangeCalendarOverride\",\n    REJECTED: \"Rejected\",\n    RUNBOOK_INPROGRESS: \"RunbookInProgress\",\n    SCHEDULED: \"Scheduled\",\n    SUCCESS: \"Success\",\n    TIMEDOUT: \"TimedOut\",\n    WAITING: \"Waiting\",\n};\nexport const AutomationSubtype = {\n    ChangeRequest: \"ChangeRequest\",\n};\nexport const AutomationType = {\n    CrossAccount: \"CrossAccount\",\n    Local: \"Local\",\n};\nexport const ExecutionMode = {\n    Auto: \"Auto\",\n    Interactive: \"Interactive\",\n};\nexport class InvalidFilterKey extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidFilterKey\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidFilterKey\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidFilterKey.prototype);\n    }\n}\nexport class InvalidFilterValue extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidFilterValue\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidFilterValue\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidFilterValue.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AutomationExecutionNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AutomationExecutionNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AutomationExecutionNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AutomationExecutionNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const StepExecutionFilterKey = {\n    ACTION: \"Action\",\n    START_TIME_AFTER: \"StartTimeAfter\",\n    START_TIME_BEFORE: \"StartTimeBefore\",\n    STEP_EXECUTION_ID: \"StepExecutionId\",\n    STEP_EXECUTION_STATUS: \"StepExecutionStatus\",\n    STEP_NAME: \"StepName\",\n};\nexport const DocumentPermissionType = {\n    SHARE: \"Share\",\n};\nexport class InvalidPermissionType extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidPermissionType\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidPermissionType\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidPermissionType.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const PatchDeploymentStatus = {\n    Approved: \"APPROVED\",\n    ExplicitApproved: \"EXPLICIT_APPROVED\",\n    ExplicitRejected: \"EXPLICIT_REJECTED\",\n    PendingApproval: \"PENDING_APPROVAL\",\n};\nexport class UnsupportedOperatingSystem extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedOperatingSystem\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedOperatingSystem\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedOperatingSystem.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const InstanceInformationFilterKey = {\n    ACTIVATION_IDS: \"ActivationIds\",\n    AGENT_VERSION: \"AgentVersion\",\n    ASSOCIATION_STATUS: \"AssociationStatus\",\n    IAM_ROLE: \"IamRole\",\n    INSTANCE_IDS: \"InstanceIds\",\n    PING_STATUS: \"PingStatus\",\n    PLATFORM_TYPES: \"PlatformTypes\",\n    RESOURCE_TYPE: \"ResourceType\",\n};\nexport const PingStatus = {\n    CONNECTION_LOST: \"ConnectionLost\",\n    INACTIVE: \"Inactive\",\n    ONLINE: \"Online\",\n};\nexport const ResourceType = {\n    DOCUMENT: \"Document\",\n    EC2_INSTANCE: \"EC2Instance\",\n    MANAGED_INSTANCE: \"ManagedInstance\",\n};\nexport const SourceType = {\n    AWS_EC2_INSTANCE: \"AWS::EC2::Instance\",\n    AWS_IOT_THING: \"AWS::IoT::Thing\",\n    AWS_SSM_MANAGEDINSTANCE: \"AWS::SSM::ManagedInstance\",\n};\nexport class InvalidInstanceInformationFilterValue extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidInstanceInformationFilterValue\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidInstanceInformationFilterValue\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidInstanceInformationFilterValue.prototype);\n    }\n}\nexport const PatchComplianceDataState = {\n    Failed: \"FAILED\",\n    Installed: \"INSTALLED\",\n    InstalledOther: \"INSTALLED_OTHER\",\n    InstalledPendingReboot: \"INSTALLED_PENDING_REBOOT\",\n    InstalledRejected: \"INSTALLED_REJECTED\",\n    Missing: \"MISSING\",\n    NotApplicable: \"NOT_APPLICABLE\",\n};\nexport const PatchOperationType = {\n    INSTALL: \"Install\",\n    SCAN: \"Scan\",\n};\nexport const RebootOption = {\n    NO_REBOOT: \"NoReboot\",\n    REBOOT_IF_NEEDED: \"RebootIfNeeded\",\n};\nexport const InstancePatchStateOperatorType = {\n    EQUAL: \"Equal\",\n    GREATER_THAN: \"GreaterThan\",\n    LESS_THAN: \"LessThan\",\n    NOT_EQUAL: \"NotEqual\",\n};\nexport const InventoryDeletionStatus = {\n    COMPLETE: \"Complete\",\n    IN_PROGRESS: \"InProgress\",\n};\nexport class InvalidDeletionIdException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDeletionIdException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDeletionIdException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDeletionIdException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const MaintenanceWindowExecutionStatus = {\n    Cancelled: \"CANCELLED\",\n    Cancelling: \"CANCELLING\",\n    Failed: \"FAILED\",\n    InProgress: \"IN_PROGRESS\",\n    Pending: \"PENDING\",\n    SkippedOverlapping: \"SKIPPED_OVERLAPPING\",\n    Success: \"SUCCESS\",\n    TimedOut: \"TIMED_OUT\",\n};\nexport const MaintenanceWindowTaskType = {\n    Automation: \"AUTOMATION\",\n    Lambda: \"LAMBDA\",\n    RunCommand: \"RUN_COMMAND\",\n    StepFunctions: \"STEP_FUNCTIONS\",\n};\nexport const MaintenanceWindowResourceType = {\n    Instance: \"INSTANCE\",\n    ResourceGroup: \"RESOURCE_GROUP\",\n};\nexport const MaintenanceWindowTaskCutoffBehavior = {\n    CancelTask: \"CANCEL_TASK\",\n    ContinueTask: \"CONTINUE_TASK\",\n};\nexport const OpsItemFilterKey = {\n    ACCOUNT_ID: \"AccountId\",\n    ACTUAL_END_TIME: \"ActualEndTime\",\n    ACTUAL_START_TIME: \"ActualStartTime\",\n    AUTOMATION_ID: \"AutomationId\",\n    CATEGORY: \"Category\",\n    CHANGE_REQUEST_APPROVER_ARN: \"ChangeRequestByApproverArn\",\n    CHANGE_REQUEST_APPROVER_NAME: \"ChangeRequestByApproverName\",\n    CHANGE_REQUEST_REQUESTER_ARN: \"ChangeRequestByRequesterArn\",\n    CHANGE_REQUEST_REQUESTER_NAME: \"ChangeRequestByRequesterName\",\n    CHANGE_REQUEST_TARGETS_RESOURCE_GROUP: \"ChangeRequestByTargetsResourceGroup\",\n    CHANGE_REQUEST_TEMPLATE: \"ChangeRequestByTemplate\",\n    CREATED_BY: \"CreatedBy\",\n    CREATED_TIME: \"CreatedTime\",\n    INSIGHT_TYPE: \"InsightByType\",\n    LAST_MODIFIED_TIME: \"LastModifiedTime\",\n    OPERATIONAL_DATA: \"OperationalData\",\n    OPERATIONAL_DATA_KEY: \"OperationalDataKey\",\n    OPERATIONAL_DATA_VALUE: \"OperationalDataValue\",\n    OPSITEM_ID: \"OpsItemId\",\n    OPSITEM_TYPE: \"OpsItemType\",\n    PLANNED_END_TIME: \"PlannedEndTime\",\n    PLANNED_START_TIME: \"PlannedStartTime\",\n    PRIORITY: \"Priority\",\n    RESOURCE_ID: \"ResourceId\",\n    SEVERITY: \"Severity\",\n    SOURCE: \"Source\",\n    STATUS: \"Status\",\n    TITLE: \"Title\",\n};\nexport const OpsItemFilterOperator = {\n    CONTAINS: \"Contains\",\n    EQUAL: \"Equal\",\n    GREATER_THAN: \"GreaterThan\",\n    LESS_THAN: \"LessThan\",\n};\nexport const CreateAssociationRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const AssociationDescriptionFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const CreateAssociationResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.AssociationDescription && {\n        AssociationDescription: AssociationDescriptionFilterSensitiveLog(obj.AssociationDescription),\n    }),\n});\nexport const CreateAssociationBatchRequestEntryFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const CreateAssociationBatchRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Entries && {\n        Entries: obj.Entries.map((item) => CreateAssociationBatchRequestEntryFilterSensitiveLog(item)),\n    }),\n});\nexport const FailedCreateAssociationFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Entry && { Entry: CreateAssociationBatchRequestEntryFilterSensitiveLog(obj.Entry) }),\n});\nexport const CreateAssociationBatchResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Successful && { Successful: obj.Successful.map((item) => AssociationDescriptionFilterSensitiveLog(item)) }),\n    ...(obj.Failed && { Failed: obj.Failed.map((item) => FailedCreateAssociationFilterSensitiveLog(item)) }),\n});\nexport const CreateMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const PatchSourceFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Configuration && { Configuration: SENSITIVE_STRING }),\n});\nexport const CreatePatchBaselineRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Sources && { Sources: obj.Sources.map((item) => PatchSourceFilterSensitiveLog(item)) }),\n});\nexport const DescribeAssociationResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.AssociationDescription && {\n        AssociationDescription: AssociationDescriptionFilterSensitiveLog(obj.AssociationDescription),\n    }),\n});\nexport const InstancePatchStateFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.OwnerInformation && { OwnerInformation: SENSITIVE_STRING }),\n});\nexport const DescribeInstancePatchStatesResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.InstancePatchStates && {\n        InstancePatchStates: obj.InstancePatchStates.map((item) => InstancePatchStateFilterSensitiveLog(item)),\n    }),\n});\nexport const DescribeInstancePatchStatesForPatchGroupResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.InstancePatchStates && {\n        InstancePatchStates: obj.InstancePatchStates.map((item) => InstancePatchStateFilterSensitiveLog(item)),\n    }),\n});\nexport const MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n    ...(obj.OwnerInformation && { OwnerInformation: SENSITIVE_STRING }),\n});\nexport const DescribeMaintenanceWindowExecutionTaskInvocationsResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.WindowExecutionTaskInvocationIdentities && {\n        WindowExecutionTaskInvocationIdentities: obj.WindowExecutionTaskInvocationIdentities.map((item) => MaintenanceWindowExecutionTaskInvocationIdentityFilterSensitiveLog(item)),\n    }),\n});\nexport const MaintenanceWindowIdentityFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const DescribeMaintenanceWindowsResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.WindowIdentities && {\n        WindowIdentities: obj.WindowIdentities.map((item) => MaintenanceWindowIdentityFilterSensitiveLog(item)),\n    }),\n});\nexport const MaintenanceWindowTargetFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.OwnerInformation && { OwnerInformation: SENSITIVE_STRING }),\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const DescribeMaintenanceWindowTargetsResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Targets && { Targets: obj.Targets.map((item) => MaintenanceWindowTargetFilterSensitiveLog(item)) }),\n});\nexport const MaintenanceWindowTaskParameterValueExpressionFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Values && { Values: SENSITIVE_STRING }),\n});\nexport const MaintenanceWindowTaskFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.TaskParameters && { TaskParameters: SENSITIVE_STRING }),\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const DescribeMaintenanceWindowTasksResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Tasks && { Tasks: obj.Tasks.map((item) => MaintenanceWindowTaskFilterSensitiveLog(item)) }),\n});\n", "import { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nimport { PatchSourceFilterSensitiveLog, } from \"./models_0\";\nimport { SSMServiceException as __BaseException } from \"./SSMServiceException\";\nexport const OpsItemStatus = {\n    APPROVED: \"Approved\",\n    CANCELLED: \"Cancelled\",\n    CANCELLING: \"Cancelling\",\n    CHANGE_CALENDAR_OVERRIDE_APPROVED: \"ChangeCalendarOverrideApproved\",\n    CHANGE_CALENDAR_OVERRIDE_REJECTED: \"ChangeCalendarOverrideRejected\",\n    CLOSED: \"Closed\",\n    COMPLETED_WITH_FAILURE: \"CompletedWithFailure\",\n    COMPLETED_WITH_SUCCESS: \"CompletedWithSuccess\",\n    FAILED: \"Failed\",\n    IN_PROGRESS: \"InProgress\",\n    OPEN: \"Open\",\n    PENDING: \"Pending\",\n    PENDING_APPROVAL: \"PendingApproval\",\n    PENDING_CHANGE_CALENDAR_OVERRIDE: \"PendingChangeCalendarOverride\",\n    REJECTED: \"Rejected\",\n    RESOLVED: \"Resolved\",\n    RUNBOOK_IN_PROGRESS: \"RunbookInProgress\",\n    SCHEDULED: \"Scheduled\",\n    TIMED_OUT: \"TimedOut\",\n};\nexport const ParametersFilterKey = {\n    KEY_ID: \"KeyId\",\n    NAME: \"Name\",\n    TYPE: \"Type\",\n};\nexport const ParameterTier = {\n    ADVANCED: \"Advanced\",\n    INTELLIGENT_TIERING: \"Intelligent-Tiering\",\n    STANDARD: \"Standard\",\n};\nexport const ParameterType = {\n    SECURE_STRING: \"SecureString\",\n    STRING: \"String\",\n    STRING_LIST: \"StringList\",\n};\nexport class InvalidFilterOption extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidFilterOption\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidFilterOption\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidFilterOption.prototype);\n    }\n}\nexport const PatchSet = {\n    Application: \"APPLICATION\",\n    Os: \"OS\",\n};\nexport const PatchProperty = {\n    PatchClassification: \"CLASSIFICATION\",\n    PatchMsrcSeverity: \"MSRC_SEVERITY\",\n    PatchPriority: \"PRIORITY\",\n    PatchProductFamily: \"PRODUCT_FAMILY\",\n    PatchSeverity: \"SEVERITY\",\n    Product: \"PRODUCT\",\n};\nexport const SessionFilterKey = {\n    INVOKED_AFTER: \"InvokedAfter\",\n    INVOKED_BEFORE: \"InvokedBefore\",\n    OWNER: \"Owner\",\n    SESSION_ID: \"SessionId\",\n    STATUS: \"Status\",\n    TARGET_ID: \"Target\",\n};\nexport const SessionState = {\n    ACTIVE: \"Active\",\n    HISTORY: \"History\",\n};\nexport const SessionStatus = {\n    CONNECTED: \"Connected\",\n    CONNECTING: \"Connecting\",\n    DISCONNECTED: \"Disconnected\",\n    FAILED: \"Failed\",\n    TERMINATED: \"Terminated\",\n    TERMINATING: \"Terminating\",\n};\nexport class OpsItemRelatedItemAssociationNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OpsItemRelatedItemAssociationNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OpsItemRelatedItemAssociationNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OpsItemRelatedItemAssociationNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const CalendarState = {\n    CLOSED: \"CLOSED\",\n    OPEN: \"OPEN\",\n};\nexport class InvalidDocumentType extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidDocumentType\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidDocumentType\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidDocumentType.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class UnsupportedCalendarException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedCalendarException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedCalendarException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedCalendarException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const CommandInvocationStatus = {\n    CANCELLED: \"Cancelled\",\n    CANCELLING: \"Cancelling\",\n    DELAYED: \"Delayed\",\n    FAILED: \"Failed\",\n    IN_PROGRESS: \"InProgress\",\n    PENDING: \"Pending\",\n    SUCCESS: \"Success\",\n    TIMED_OUT: \"TimedOut\",\n};\nexport class InvalidPluginName extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidPluginName\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidPluginName\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidPluginName.prototype);\n    }\n}\nexport class InvocationDoesNotExist extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvocationDoesNotExist\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvocationDoesNotExist\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvocationDoesNotExist.prototype);\n    }\n}\nexport const ConnectionStatus = {\n    CONNECTED: \"Connected\",\n    NOT_CONNECTED: \"NotConnected\",\n};\nexport class UnsupportedFeatureRequiredException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedFeatureRequiredException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedFeatureRequiredException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedFeatureRequiredException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const AttachmentHashType = {\n    SHA256: \"Sha256\",\n};\nexport const InventoryQueryOperatorType = {\n    BEGIN_WITH: \"BeginWith\",\n    EQUAL: \"Equal\",\n    EXISTS: \"Exists\",\n    GREATER_THAN: \"GreaterThan\",\n    LESS_THAN: \"LessThan\",\n    NOT_EQUAL: \"NotEqual\",\n};\nexport class InvalidAggregatorException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAggregatorException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAggregatorException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAggregatorException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidInventoryGroupException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidInventoryGroupException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidInventoryGroupException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidInventoryGroupException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidResultAttributeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidResultAttributeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidResultAttributeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidResultAttributeException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const InventoryAttributeDataType = {\n    NUMBER: \"number\",\n    STRING: \"string\",\n};\nexport const NotificationEvent = {\n    ALL: \"All\",\n    CANCELLED: \"Cancelled\",\n    FAILED: \"Failed\",\n    IN_PROGRESS: \"InProgress\",\n    SUCCESS: \"Success\",\n    TIMED_OUT: \"TimedOut\",\n};\nexport const NotificationType = {\n    Command: \"Command\",\n    Invocation: \"Invocation\",\n};\nexport const OpsFilterOperatorType = {\n    BEGIN_WITH: \"BeginWith\",\n    EQUAL: \"Equal\",\n    EXISTS: \"Exists\",\n    GREATER_THAN: \"GreaterThan\",\n    LESS_THAN: \"LessThan\",\n    NOT_EQUAL: \"NotEqual\",\n};\nexport class InvalidKeyId extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidKeyId\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidKeyId\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidKeyId.prototype);\n    }\n}\nexport class ParameterVersionNotFound extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterVersionNotFound\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterVersionNotFound\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterVersionNotFound.prototype);\n    }\n}\nexport class ServiceSettingNotFound extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ServiceSettingNotFound\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ServiceSettingNotFound\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ServiceSettingNotFound.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ParameterVersionLabelLimitExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterVersionLabelLimitExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterVersionLabelLimitExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterVersionLabelLimitExceeded.prototype);\n    }\n}\nexport const AssociationFilterKey = {\n    AssociationId: \"AssociationId\",\n    AssociationName: \"AssociationName\",\n    InstanceId: \"InstanceId\",\n    LastExecutedAfter: \"LastExecutedAfter\",\n    LastExecutedBefore: \"LastExecutedBefore\",\n    Name: \"Name\",\n    ResourceGroupName: \"ResourceGroupName\",\n    Status: \"AssociationStatusName\",\n};\nexport const CommandFilterKey = {\n    DOCUMENT_NAME: \"DocumentName\",\n    EXECUTION_STAGE: \"ExecutionStage\",\n    INVOKED_AFTER: \"InvokedAfter\",\n    INVOKED_BEFORE: \"InvokedBefore\",\n    STATUS: \"Status\",\n};\nexport const CommandPluginStatus = {\n    CANCELLED: \"Cancelled\",\n    FAILED: \"Failed\",\n    IN_PROGRESS: \"InProgress\",\n    PENDING: \"Pending\",\n    SUCCESS: \"Success\",\n    TIMED_OUT: \"TimedOut\",\n};\nexport const CommandStatus = {\n    CANCELLED: \"Cancelled\",\n    CANCELLING: \"Cancelling\",\n    FAILED: \"Failed\",\n    IN_PROGRESS: \"InProgress\",\n    PENDING: \"Pending\",\n    SUCCESS: \"Success\",\n    TIMED_OUT: \"TimedOut\",\n};\nexport const ComplianceQueryOperatorType = {\n    BeginWith: \"BEGIN_WITH\",\n    Equal: \"EQUAL\",\n    GreaterThan: \"GREATER_THAN\",\n    LessThan: \"LESS_THAN\",\n    NotEqual: \"NOT_EQUAL\",\n};\nexport const ComplianceSeverity = {\n    Critical: \"CRITICAL\",\n    High: \"HIGH\",\n    Informational: \"INFORMATIONAL\",\n    Low: \"LOW\",\n    Medium: \"MEDIUM\",\n    Unspecified: \"UNSPECIFIED\",\n};\nexport const ComplianceStatus = {\n    Compliant: \"COMPLIANT\",\n    NonCompliant: \"NON_COMPLIANT\",\n};\nexport const DocumentMetadataEnum = {\n    DocumentReviews: \"DocumentReviews\",\n};\nexport const DocumentReviewCommentType = {\n    Comment: \"Comment\",\n};\nexport const DocumentFilterKey = {\n    DocumentType: \"DocumentType\",\n    Name: \"Name\",\n    Owner: \"Owner\",\n    PlatformTypes: \"PlatformTypes\",\n};\nexport const OpsItemEventFilterKey = {\n    OPSITEM_ID: \"OpsItemId\",\n};\nexport const OpsItemEventFilterOperator = {\n    EQUAL: \"Equal\",\n};\nexport const OpsItemRelatedItemsFilterKey = {\n    ASSOCIATION_ID: \"AssociationId\",\n    RESOURCE_TYPE: \"ResourceType\",\n    RESOURCE_URI: \"ResourceUri\",\n};\nexport const OpsItemRelatedItemsFilterOperator = {\n    EQUAL: \"Equal\",\n};\nexport const LastResourceDataSyncStatus = {\n    FAILED: \"Failed\",\n    INPROGRESS: \"InProgress\",\n    SUCCESSFUL: \"Successful\",\n};\nexport class DocumentPermissionLimit extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"DocumentPermissionLimit\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"DocumentPermissionLimit\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, DocumentPermissionLimit.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ComplianceTypeCountLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ComplianceTypeCountLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ComplianceTypeCountLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ComplianceTypeCountLimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidItemContentException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidItemContentException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidItemContentException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidItemContentException.prototype);\n        this.TypeName = opts.TypeName;\n        this.Message = opts.Message;\n    }\n}\nexport class ItemSizeLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ItemSizeLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ItemSizeLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ItemSizeLimitExceededException.prototype);\n        this.TypeName = opts.TypeName;\n        this.Message = opts.Message;\n    }\n}\nexport const ComplianceUploadType = {\n    Complete: \"COMPLETE\",\n    Partial: \"PARTIAL\",\n};\nexport class TotalSizeLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TotalSizeLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TotalSizeLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TotalSizeLimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class CustomSchemaCountLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"CustomSchemaCountLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"CustomSchemaCountLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, CustomSchemaCountLimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidInventoryItemContextException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidInventoryItemContextException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidInventoryItemContextException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidInventoryItemContextException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class ItemContentMismatchException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ItemContentMismatchException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ItemContentMismatchException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ItemContentMismatchException.prototype);\n        this.TypeName = opts.TypeName;\n        this.Message = opts.Message;\n    }\n}\nexport class SubTypeCountLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"SubTypeCountLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"SubTypeCountLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, SubTypeCountLimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class UnsupportedInventoryItemContextException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedInventoryItemContextException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedInventoryItemContextException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedInventoryItemContextException.prototype);\n        this.TypeName = opts.TypeName;\n        this.Message = opts.Message;\n    }\n}\nexport class UnsupportedInventorySchemaVersionException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedInventorySchemaVersionException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedInventorySchemaVersionException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedInventorySchemaVersionException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class HierarchyLevelLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"HierarchyLevelLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"HierarchyLevelLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, HierarchyLevelLimitExceededException.prototype);\n    }\n}\nexport class HierarchyTypeMismatchException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"HierarchyTypeMismatchException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"HierarchyTypeMismatchException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, HierarchyTypeMismatchException.prototype);\n    }\n}\nexport class IncompatiblePolicyException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"IncompatiblePolicyException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"IncompatiblePolicyException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, IncompatiblePolicyException.prototype);\n    }\n}\nexport class InvalidAllowedPatternException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAllowedPatternException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAllowedPatternException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAllowedPatternException.prototype);\n    }\n}\nexport class InvalidPolicyAttributeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidPolicyAttributeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidPolicyAttributeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidPolicyAttributeException.prototype);\n    }\n}\nexport class InvalidPolicyTypeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidPolicyTypeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidPolicyTypeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidPolicyTypeException.prototype);\n    }\n}\nexport class ParameterAlreadyExists extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterAlreadyExists\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterAlreadyExists\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterAlreadyExists.prototype);\n    }\n}\nexport class ParameterLimitExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterLimitExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterLimitExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterLimitExceeded.prototype);\n    }\n}\nexport class ParameterMaxVersionLimitExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterMaxVersionLimitExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterMaxVersionLimitExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterMaxVersionLimitExceeded.prototype);\n    }\n}\nexport class ParameterPatternMismatchException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ParameterPatternMismatchException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ParameterPatternMismatchException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ParameterPatternMismatchException.prototype);\n    }\n}\nexport class PoliciesLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"PoliciesLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"PoliciesLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, PoliciesLimitExceededException.prototype);\n    }\n}\nexport class UnsupportedParameterType extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedParameterType\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedParameterType\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedParameterType.prototype);\n    }\n}\nexport class ResourcePolicyLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourcePolicyLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourcePolicyLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourcePolicyLimitExceededException.prototype);\n        this.Limit = opts.Limit;\n        this.LimitType = opts.LimitType;\n        this.Message = opts.Message;\n    }\n}\nexport class FeatureNotAvailableException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"FeatureNotAvailableException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"FeatureNotAvailableException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, FeatureNotAvailableException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AutomationStepNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AutomationStepNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AutomationStepNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AutomationStepNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidAutomationSignalException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAutomationSignalException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAutomationSignalException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAutomationSignalException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const SignalType = {\n    APPROVE: \"Approve\",\n    REJECT: \"Reject\",\n    RESUME: \"Resume\",\n    START_STEP: \"StartStep\",\n    STOP_STEP: \"StopStep\",\n};\nexport class InvalidNotificationConfig extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidNotificationConfig\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidNotificationConfig\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidNotificationConfig.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidOutputFolder extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidOutputFolder\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidOutputFolder\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidOutputFolder.prototype);\n    }\n}\nexport class InvalidRole extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidRole\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidRole\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidRole.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidAssociation extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAssociation\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAssociation\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAssociation.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AutomationDefinitionNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AutomationDefinitionNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AutomationDefinitionNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AutomationDefinitionNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AutomationDefinitionVersionNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AutomationDefinitionVersionNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AutomationDefinitionVersionNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AutomationDefinitionVersionNotFoundException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AutomationExecutionLimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AutomationExecutionLimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AutomationExecutionLimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AutomationExecutionLimitExceededException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidAutomationExecutionParametersException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAutomationExecutionParametersException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAutomationExecutionParametersException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAutomationExecutionParametersException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class AutomationDefinitionNotApprovedException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AutomationDefinitionNotApprovedException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AutomationDefinitionNotApprovedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AutomationDefinitionNotApprovedException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class TargetNotConnected extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TargetNotConnected\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TargetNotConnected\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TargetNotConnected.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport class InvalidAutomationStatusUpdateException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAutomationStatusUpdateException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAutomationStatusUpdateException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAutomationStatusUpdateException.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const StopType = {\n    CANCEL: \"Cancel\",\n    COMPLETE: \"Complete\",\n};\nexport class AssociationVersionLimitExceeded extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AssociationVersionLimitExceeded\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AssociationVersionLimitExceeded\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AssociationVersionLimitExceeded.prototype);\n        this.Message = opts.Message;\n    }\n}\nexport const BaselineOverrideFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Sources && { Sources: obj.Sources.map((item) => PatchSourceFilterSensitiveLog(item)) }),\n});\nexport const GetDeployablePatchSnapshotForInstanceRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n});\nexport const GetMaintenanceWindowResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const GetMaintenanceWindowExecutionTaskResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.TaskParameters && { TaskParameters: SENSITIVE_STRING }),\n});\nexport const GetMaintenanceWindowExecutionTaskInvocationResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n    ...(obj.OwnerInformation && { OwnerInformation: SENSITIVE_STRING }),\n});\nexport const MaintenanceWindowLambdaParametersFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Payload && { Payload: SENSITIVE_STRING }),\n});\nexport const MaintenanceWindowRunCommandParametersFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const MaintenanceWindowStepFunctionsParametersFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Input && { Input: SENSITIVE_STRING }),\n});\nexport const MaintenanceWindowTaskInvocationParametersFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.RunCommand && { RunCommand: MaintenanceWindowRunCommandParametersFilterSensitiveLog(obj.RunCommand) }),\n    ...(obj.StepFunctions && {\n        StepFunctions: MaintenanceWindowStepFunctionsParametersFilterSensitiveLog(obj.StepFunctions),\n    }),\n    ...(obj.Lambda && { Lambda: MaintenanceWindowLambdaParametersFilterSensitiveLog(obj.Lambda) }),\n});\nexport const GetMaintenanceWindowTaskResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.TaskParameters && { TaskParameters: SENSITIVE_STRING }),\n    ...(obj.TaskInvocationParameters && {\n        TaskInvocationParameters: MaintenanceWindowTaskInvocationParametersFilterSensitiveLog(obj.TaskInvocationParameters),\n    }),\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const ParameterFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Value && { Value: SENSITIVE_STRING }),\n});\nexport const GetParameterResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameter && { Parameter: ParameterFilterSensitiveLog(obj.Parameter) }),\n});\nexport const ParameterHistoryFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Value && { Value: SENSITIVE_STRING }),\n});\nexport const GetParameterHistoryResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: obj.Parameters.map((item) => ParameterHistoryFilterSensitiveLog(item)) }),\n});\nexport const GetParametersResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: obj.Parameters.map((item) => ParameterFilterSensitiveLog(item)) }),\n});\nexport const GetParametersByPathResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: obj.Parameters.map((item) => ParameterFilterSensitiveLog(item)) }),\n});\nexport const GetPatchBaselineResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Sources && { Sources: obj.Sources.map((item) => PatchSourceFilterSensitiveLog(item)) }),\n});\nexport const AssociationVersionInfoFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const ListAssociationVersionsResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.AssociationVersions && {\n        AssociationVersions: obj.AssociationVersions.map((item) => AssociationVersionInfoFilterSensitiveLog(item)),\n    }),\n});\nexport const CommandFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const ListCommandsResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Commands && { Commands: obj.Commands.map((item) => CommandFilterSensitiveLog(item)) }),\n});\nexport const PutParameterRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Value && { Value: SENSITIVE_STRING }),\n});\nexport const RegisterTargetWithMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.OwnerInformation && { OwnerInformation: SENSITIVE_STRING }),\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const RegisterTaskWithMaintenanceWindowRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.TaskParameters && { TaskParameters: SENSITIVE_STRING }),\n    ...(obj.TaskInvocationParameters && {\n        TaskInvocationParameters: MaintenanceWindowTaskInvocationParametersFilterSensitiveLog(obj.TaskInvocationParameters),\n    }),\n    ...(obj.Description && { Description: SENSITIVE_STRING }),\n});\nexport const SendCommandRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Parameters && { Parameters: SENSITIVE_STRING }),\n});\nexport const SendCommandResultFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.Command && { Command: CommandFilterSensitiveLog(obj.Command) }),\n});\n", "import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { _json, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from \"@aws-sdk/smithy-client\";\nimport { v4 as generateIdempotencyToken } from \"uuid\";\nimport { AlreadyExistsException, AssociatedInstances, AssociationAlreadyExists, AssociationDoesNotExist, AssociationExecutionDoesNotExist, AssociationLimitExceeded, AutomationExecutionNotFoundException, DocumentAlreadyExists, DocumentLimitExceeded, DoesNotExistException, DuplicateInstanceId, IdempotentParameterMismatch, InternalServerError, InvalidActivation, InvalidActivationId, InvalidAssociationVersion, InvalidCommandId, InvalidDeleteInventoryParametersException, InvalidDeletionIdException, InvalidDocument, InvalidDocumentContent, InvalidDocumentOperation, InvalidDocumentSchemaVersion, InvalidDocumentVersion, InvalidFilter, InvalidFilterKey, InvalidFilterValue, InvalidInstanceId, InvalidInstanceInformationFilterValue, InvalidInventoryRequestException, InvalidNextToken, InvalidOptionException, InvalidOutputLocation, InvalidParameters, InvalidPermissionType, InvalidResourceId, InvalidResourceType, InvalidSchedule, InvalidTag, InvalidTarget, InvalidTargetMaps, InvalidTypeNameException, MaxDocumentSizeExceeded, OpsItemAccessDeniedException, OpsItemAlreadyExistsException, OpsItemInvalidParameterException, OpsItemLimitExceededException, OpsItemNotFoundException, OpsItemRelatedItemAlreadyExistsException, OpsMetadataAlreadyExistsException, OpsMetadataInvalidArgumentException, OpsMetadataLimitExceededException, OpsMetadataNotFoundException, OpsMetadataTooManyUpdatesException, ParameterNotFound, ResourceDataSyncAlreadyExistsException, ResourceDataSyncCountExceededException, ResourceDataSyncInvalidConfigurationException, ResourceDataSyncNotFoundException, ResourceInUseException, ResourceLimitExceededException, ResourcePolicyConflictException, ResourcePolicyInvalidParameterException, TargetInUseException, TooManyTagsError, TooManyUpdates, UnsupportedOperatingSystem, UnsupportedPlatformType, } from \"../models/models_0\";\nimport { AssociationVersionLimitExceeded, AutomationDefinitionNotApprovedException, AutomationDefinitionNotFoundException, AutomationDefinitionVersionNotFoundException, AutomationExecutionLimitExceededException, AutomationStepNotFoundException, ComplianceTypeCountLimitExceededException, CustomSchemaCountLimitExceededException, DocumentPermissionLimit, FeatureNotAvailableException, HierarchyLevelLimitExceededException, HierarchyTypeMismatchException, IncompatiblePolicyException, InvalidAggregatorException, InvalidAllowedPatternException, InvalidAssociation, InvalidAutomationExecutionParametersException, InvalidAutomationSignalException, InvalidAutomationStatusUpdateException, InvalidDocumentType, InvalidFilterOption, InvalidInventoryGroupException, InvalidInventoryItemContextException, InvalidItemContentException, InvalidKeyId, InvalidNotificationConfig, InvalidOutputFolder, InvalidPluginName, InvalidPolicyAttributeException, InvalidPolicyTypeException, InvalidResultAttributeException, InvalidRole, InvocationDoesNotExist, ItemContentMismatchException, ItemSizeLimitExceededException, OpsItemRelatedItemAssociationNotFoundException, ParameterAlreadyExists, ParameterLimitExceeded, ParameterMaxVersionLimitExceeded, ParameterPatternMismatchException, ParameterVersionLabelLimitExceeded, ParameterVersionNotFound, PoliciesLimitExceededException, ResourcePolicyLimitExceededException, ServiceSettingNotFound, SubTypeCountLimitExceededException, TargetNotConnected, TotalSizeLimitExceededException, UnsupportedCalendarException, UnsupportedFeatureRequiredException, UnsupportedInventoryItemContextException, UnsupportedInventorySchemaVersionException, UnsupportedParameterType, } from \"../models/models_1\";\nimport { DocumentVersionLimitExceeded, DuplicateDocumentContent, DuplicateDocumentVersionName, InvalidUpdate, OpsMetadataKeyLimitExceededException, ResourceDataSyncConflictException, StatusUnchanged, } from \"../models/models_2\";\nimport { SSMServiceException as __BaseException } from \"../models/SSMServiceException\";\nexport const se_AddTagsToResourceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"AddTagsToResource\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_AssociateOpsItemRelatedItemCommand = async (input, context) => {\n    const headers = sharedHeaders(\"AssociateOpsItemRelatedItem\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CancelCommandCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CancelCommand\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CancelMaintenanceWindowExecutionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CancelMaintenanceWindowExecution\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateActivationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateActivation\");\n    let body;\n    body = JSON.stringify(se_CreateActivationRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateAssociationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateAssociation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateAssociationBatchCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateAssociationBatch\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateDocumentCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateDocument\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(se_CreateMaintenanceWindowRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateOpsItemCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateOpsItem\");\n    let body;\n    body = JSON.stringify(se_CreateOpsItemRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateOpsMetadataCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateOpsMetadata\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreatePatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreatePatchBaseline\");\n    let body;\n    body = JSON.stringify(se_CreatePatchBaselineRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateResourceDataSyncCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateResourceDataSync\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteActivationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteActivation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteAssociationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteAssociation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteDocumentCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteDocument\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteInventoryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteInventory\");\n    let body;\n    body = JSON.stringify(se_DeleteInventoryRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteOpsMetadataCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteOpsMetadata\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteParameterCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteParameter\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteParametersCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteParameters\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeletePatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeletePatchBaseline\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteResourceDataSyncCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteResourceDataSync\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteResourcePolicyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteResourcePolicy\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeregisterManagedInstanceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeregisterManagedInstance\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeregisterPatchBaselineForPatchGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeregisterPatchBaselineForPatchGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeregisterTargetFromMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeregisterTargetFromMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeregisterTaskFromMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeregisterTaskFromMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeActivationsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeActivations\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeAssociationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeAssociation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeAssociationExecutionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeAssociationExecutions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeAssociationExecutionTargetsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeAssociationExecutionTargets\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeAutomationExecutionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeAutomationExecutions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeAutomationStepExecutionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeAutomationStepExecutions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeAvailablePatchesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeAvailablePatches\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeDocumentCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeDocument\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeDocumentPermissionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeDocumentPermission\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeEffectiveInstanceAssociationsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeEffectiveInstanceAssociations\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeEffectivePatchesForPatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeEffectivePatchesForPatchBaseline\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeInstanceAssociationsStatusCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeInstanceAssociationsStatus\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeInstanceInformationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeInstanceInformation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeInstancePatchesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeInstancePatches\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeInstancePatchStatesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeInstancePatchStates\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeInstancePatchStatesForPatchGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeInstancePatchStatesForPatchGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeInventoryDeletionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeInventoryDeletions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowExecutionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowExecutions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowExecutionTaskInvocations\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowExecutionTasksCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowExecutionTasks\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindows\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowScheduleCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowSchedule\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowsForTargetCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowsForTarget\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowTargetsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowTargets\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMaintenanceWindowTasksCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMaintenanceWindowTasks\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeOpsItemsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeOpsItems\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeParametersCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeParameters\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribePatchBaselinesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribePatchBaselines\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribePatchGroupsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribePatchGroups\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribePatchGroupStateCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribePatchGroupState\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribePatchPropertiesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribePatchProperties\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeSessionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeSessions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DisassociateOpsItemRelatedItemCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DisassociateOpsItemRelatedItem\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetAutomationExecutionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetAutomationExecution\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetCalendarStateCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetCalendarState\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetCommandInvocationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetCommandInvocation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetConnectionStatusCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetConnectionStatus\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetDefaultPatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetDefaultPatchBaseline\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetDeployablePatchSnapshotForInstanceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetDeployablePatchSnapshotForInstance\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetDocumentCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetDocument\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetInventoryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetInventory\");\n    let body;\n    body = JSON.stringify(se_GetInventoryRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetInventorySchemaCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetInventorySchema\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetMaintenanceWindowExecutionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetMaintenanceWindowExecution\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetMaintenanceWindowExecutionTaskCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetMaintenanceWindowExecutionTask\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetMaintenanceWindowExecutionTaskInvocationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetMaintenanceWindowExecutionTaskInvocation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetMaintenanceWindowTaskCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetMaintenanceWindowTask\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetOpsItemCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetOpsItem\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetOpsMetadataCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetOpsMetadata\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetOpsSummaryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetOpsSummary\");\n    let body;\n    body = JSON.stringify(se_GetOpsSummaryRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetParameterCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetParameter\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetParameterHistoryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetParameterHistory\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetParametersCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetParameters\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetParametersByPathCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetParametersByPath\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetPatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetPatchBaseline\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetPatchBaselineForPatchGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetPatchBaselineForPatchGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetResourcePoliciesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetResourcePolicies\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetServiceSettingCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetServiceSetting\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_LabelParameterVersionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"LabelParameterVersion\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListAssociationsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListAssociations\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListAssociationVersionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListAssociationVersions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListCommandInvocationsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListCommandInvocations\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListCommandsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListCommands\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListComplianceItemsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListComplianceItems\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListComplianceSummariesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListComplianceSummaries\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListDocumentMetadataHistoryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListDocumentMetadataHistory\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListDocumentsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListDocuments\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListDocumentVersionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListDocumentVersions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListInventoryEntriesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListInventoryEntries\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListOpsItemEventsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListOpsItemEvents\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListOpsItemRelatedItemsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListOpsItemRelatedItems\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListOpsMetadataCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListOpsMetadata\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListResourceComplianceSummariesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListResourceComplianceSummaries\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListResourceDataSyncCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListResourceDataSync\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListTagsForResourceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListTagsForResource\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ModifyDocumentPermissionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ModifyDocumentPermission\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutComplianceItemsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutComplianceItems\");\n    let body;\n    body = JSON.stringify(se_PutComplianceItemsRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutInventoryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutInventory\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutParameterCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutParameter\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutResourcePolicyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutResourcePolicy\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_RegisterDefaultPatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"RegisterDefaultPatchBaseline\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_RegisterPatchBaselineForPatchGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"RegisterPatchBaselineForPatchGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_RegisterTargetWithMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"RegisterTargetWithMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(se_RegisterTargetWithMaintenanceWindowRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_RegisterTaskWithMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"RegisterTaskWithMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(se_RegisterTaskWithMaintenanceWindowRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_RemoveTagsFromResourceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"RemoveTagsFromResource\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ResetServiceSettingCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ResetServiceSetting\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ResumeSessionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ResumeSession\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_SendAutomationSignalCommand = async (input, context) => {\n    const headers = sharedHeaders(\"SendAutomationSignal\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_SendCommandCommand = async (input, context) => {\n    const headers = sharedHeaders(\"SendCommand\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_StartAssociationsOnceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"StartAssociationsOnce\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_StartAutomationExecutionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"StartAutomationExecution\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_StartChangeRequestExecutionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"StartChangeRequestExecution\");\n    let body;\n    body = JSON.stringify(se_StartChangeRequestExecutionRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_StartSessionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"StartSession\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_StopAutomationExecutionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"StopAutomationExecution\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_TerminateSessionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"TerminateSession\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UnlabelParameterVersionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UnlabelParameterVersion\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateAssociationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateAssociation\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateAssociationStatusCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateAssociationStatus\");\n    let body;\n    body = JSON.stringify(se_UpdateAssociationStatusRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateDocumentCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateDocument\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateDocumentDefaultVersionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateDocumentDefaultVersion\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateDocumentMetadataCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateDocumentMetadata\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateMaintenanceWindowCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateMaintenanceWindow\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateMaintenanceWindowTargetCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateMaintenanceWindowTarget\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateMaintenanceWindowTaskCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateMaintenanceWindowTask\");\n    let body;\n    body = JSON.stringify(se_UpdateMaintenanceWindowTaskRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateManagedInstanceRoleCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateManagedInstanceRole\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateOpsItemCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateOpsItem\");\n    let body;\n    body = JSON.stringify(se_UpdateOpsItemRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateOpsMetadataCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateOpsMetadata\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdatePatchBaselineCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdatePatchBaseline\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateResourceDataSyncCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateResourceDataSync\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UpdateServiceSettingCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UpdateServiceSetting\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const de_AddTagsToResourceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_AddTagsToResourceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_AddTagsToResourceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"InvalidResourceType\":\n        case \"com.amazonaws.ssm#InvalidResourceType\":\n            throw await de_InvalidResourceTypeRes(parsedOutput, context);\n        case \"TooManyTagsError\":\n        case \"com.amazonaws.ssm#TooManyTagsError\":\n            throw await de_TooManyTagsErrorRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_AssociateOpsItemRelatedItemCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_AssociateOpsItemRelatedItemCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_AssociateOpsItemRelatedItemCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemInvalidParameterException\":\n        case \"com.amazonaws.ssm#OpsItemInvalidParameterException\":\n            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);\n        case \"OpsItemLimitExceededException\":\n        case \"com.amazonaws.ssm#OpsItemLimitExceededException\":\n            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);\n        case \"OpsItemNotFoundException\":\n        case \"com.amazonaws.ssm#OpsItemNotFoundException\":\n            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);\n        case \"OpsItemRelatedItemAlreadyExistsException\":\n        case \"com.amazonaws.ssm#OpsItemRelatedItemAlreadyExistsException\":\n            throw await de_OpsItemRelatedItemAlreadyExistsExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CancelCommandCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CancelCommandCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CancelCommandCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DuplicateInstanceId\":\n        case \"com.amazonaws.ssm#DuplicateInstanceId\":\n            throw await de_DuplicateInstanceIdRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidCommandId\":\n        case \"com.amazonaws.ssm#InvalidCommandId\":\n            throw await de_InvalidCommandIdRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CancelMaintenanceWindowExecutionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CancelMaintenanceWindowExecutionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CancelMaintenanceWindowExecutionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateActivationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateActivationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateActivationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidParameters\":\n        case \"com.amazonaws.ssm#InvalidParameters\":\n            throw await de_InvalidParametersRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateAssociationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateAssociationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_CreateAssociationResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateAssociationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationAlreadyExists\":\n        case \"com.amazonaws.ssm#AssociationAlreadyExists\":\n            throw await de_AssociationAlreadyExistsRes(parsedOutput, context);\n        case \"AssociationLimitExceeded\":\n        case \"com.amazonaws.ssm#AssociationLimitExceeded\":\n            throw await de_AssociationLimitExceededRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidOutputLocation\":\n        case \"com.amazonaws.ssm#InvalidOutputLocation\":\n            throw await de_InvalidOutputLocationRes(parsedOutput, context);\n        case \"InvalidParameters\":\n        case \"com.amazonaws.ssm#InvalidParameters\":\n            throw await de_InvalidParametersRes(parsedOutput, context);\n        case \"InvalidSchedule\":\n        case \"com.amazonaws.ssm#InvalidSchedule\":\n            throw await de_InvalidScheduleRes(parsedOutput, context);\n        case \"InvalidTag\":\n        case \"com.amazonaws.ssm#InvalidTag\":\n            throw await de_InvalidTagRes(parsedOutput, context);\n        case \"InvalidTarget\":\n        case \"com.amazonaws.ssm#InvalidTarget\":\n            throw await de_InvalidTargetRes(parsedOutput, context);\n        case \"InvalidTargetMaps\":\n        case \"com.amazonaws.ssm#InvalidTargetMaps\":\n            throw await de_InvalidTargetMapsRes(parsedOutput, context);\n        case \"UnsupportedPlatformType\":\n        case \"com.amazonaws.ssm#UnsupportedPlatformType\":\n            throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateAssociationBatchCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateAssociationBatchCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_CreateAssociationBatchResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateAssociationBatchCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationLimitExceeded\":\n        case \"com.amazonaws.ssm#AssociationLimitExceeded\":\n            throw await de_AssociationLimitExceededRes(parsedOutput, context);\n        case \"DuplicateInstanceId\":\n        case \"com.amazonaws.ssm#DuplicateInstanceId\":\n            throw await de_DuplicateInstanceIdRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidOutputLocation\":\n        case \"com.amazonaws.ssm#InvalidOutputLocation\":\n            throw await de_InvalidOutputLocationRes(parsedOutput, context);\n        case \"InvalidParameters\":\n        case \"com.amazonaws.ssm#InvalidParameters\":\n            throw await de_InvalidParametersRes(parsedOutput, context);\n        case \"InvalidSchedule\":\n        case \"com.amazonaws.ssm#InvalidSchedule\":\n            throw await de_InvalidScheduleRes(parsedOutput, context);\n        case \"InvalidTarget\":\n        case \"com.amazonaws.ssm#InvalidTarget\":\n            throw await de_InvalidTargetRes(parsedOutput, context);\n        case \"InvalidTargetMaps\":\n        case \"com.amazonaws.ssm#InvalidTargetMaps\":\n            throw await de_InvalidTargetMapsRes(parsedOutput, context);\n        case \"UnsupportedPlatformType\":\n        case \"com.amazonaws.ssm#UnsupportedPlatformType\":\n            throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateDocumentCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateDocumentCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_CreateDocumentResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateDocumentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DocumentAlreadyExists\":\n        case \"com.amazonaws.ssm#DocumentAlreadyExists\":\n            throw await de_DocumentAlreadyExistsRes(parsedOutput, context);\n        case \"DocumentLimitExceeded\":\n        case \"com.amazonaws.ssm#DocumentLimitExceeded\":\n            throw await de_DocumentLimitExceededRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocumentContent\":\n        case \"com.amazonaws.ssm#InvalidDocumentContent\":\n            throw await de_InvalidDocumentContentRes(parsedOutput, context);\n        case \"InvalidDocumentSchemaVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentSchemaVersion\":\n            throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);\n        case \"MaxDocumentSizeExceeded\":\n        case \"com.amazonaws.ssm#MaxDocumentSizeExceeded\":\n            throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"IdempotentParameterMismatch\":\n        case \"com.amazonaws.ssm#IdempotentParameterMismatch\":\n            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceLimitExceededException\":\n        case \"com.amazonaws.ssm#ResourceLimitExceededException\":\n            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateOpsItemCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateOpsItemCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateOpsItemCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemAccessDeniedException\":\n        case \"com.amazonaws.ssm#OpsItemAccessDeniedException\":\n            throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);\n        case \"OpsItemAlreadyExistsException\":\n        case \"com.amazonaws.ssm#OpsItemAlreadyExistsException\":\n            throw await de_OpsItemAlreadyExistsExceptionRes(parsedOutput, context);\n        case \"OpsItemInvalidParameterException\":\n        case \"com.amazonaws.ssm#OpsItemInvalidParameterException\":\n            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);\n        case \"OpsItemLimitExceededException\":\n        case \"com.amazonaws.ssm#OpsItemLimitExceededException\":\n            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateOpsMetadataCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateOpsMetadataCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateOpsMetadataCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsMetadataAlreadyExistsException\":\n        case \"com.amazonaws.ssm#OpsMetadataAlreadyExistsException\":\n            throw await de_OpsMetadataAlreadyExistsExceptionRes(parsedOutput, context);\n        case \"OpsMetadataInvalidArgumentException\":\n        case \"com.amazonaws.ssm#OpsMetadataInvalidArgumentException\":\n            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);\n        case \"OpsMetadataLimitExceededException\":\n        case \"com.amazonaws.ssm#OpsMetadataLimitExceededException\":\n            throw await de_OpsMetadataLimitExceededExceptionRes(parsedOutput, context);\n        case \"OpsMetadataTooManyUpdatesException\":\n        case \"com.amazonaws.ssm#OpsMetadataTooManyUpdatesException\":\n            throw await de_OpsMetadataTooManyUpdatesExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreatePatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreatePatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreatePatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"IdempotentParameterMismatch\":\n        case \"com.amazonaws.ssm#IdempotentParameterMismatch\":\n            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceLimitExceededException\":\n        case \"com.amazonaws.ssm#ResourceLimitExceededException\":\n            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateResourceDataSyncCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateResourceDataSyncCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateResourceDataSyncCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceDataSyncAlreadyExistsException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncAlreadyExistsException\":\n            throw await de_ResourceDataSyncAlreadyExistsExceptionRes(parsedOutput, context);\n        case \"ResourceDataSyncCountExceededException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncCountExceededException\":\n            throw await de_ResourceDataSyncCountExceededExceptionRes(parsedOutput, context);\n        case \"ResourceDataSyncInvalidConfigurationException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException\":\n            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteActivationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteActivationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteActivationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidActivation\":\n        case \"com.amazonaws.ssm#InvalidActivation\":\n            throw await de_InvalidActivationRes(parsedOutput, context);\n        case \"InvalidActivationId\":\n        case \"com.amazonaws.ssm#InvalidActivationId\":\n            throw await de_InvalidActivationIdRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteAssociationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteAssociationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteAssociationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteDocumentCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteDocumentCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteDocumentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociatedInstances\":\n        case \"com.amazonaws.ssm#AssociatedInstances\":\n            throw await de_AssociatedInstancesRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentOperation\":\n        case \"com.amazonaws.ssm#InvalidDocumentOperation\":\n            throw await de_InvalidDocumentOperationRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteInventoryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteInventoryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteInventoryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDeleteInventoryParametersException\":\n        case \"com.amazonaws.ssm#InvalidDeleteInventoryParametersException\":\n            throw await de_InvalidDeleteInventoryParametersExceptionRes(parsedOutput, context);\n        case \"InvalidInventoryRequestException\":\n        case \"com.amazonaws.ssm#InvalidInventoryRequestException\":\n            throw await de_InvalidInventoryRequestExceptionRes(parsedOutput, context);\n        case \"InvalidOptionException\":\n        case \"com.amazonaws.ssm#InvalidOptionException\":\n            throw await de_InvalidOptionExceptionRes(parsedOutput, context);\n        case \"InvalidTypeNameException\":\n        case \"com.amazonaws.ssm#InvalidTypeNameException\":\n            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteOpsMetadataCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteOpsMetadataCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteOpsMetadataCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsMetadataInvalidArgumentException\":\n        case \"com.amazonaws.ssm#OpsMetadataInvalidArgumentException\":\n            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);\n        case \"OpsMetadataNotFoundException\":\n        case \"com.amazonaws.ssm#OpsMetadataNotFoundException\":\n            throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteParameterCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteParameterCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteParameterCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ParameterNotFound\":\n        case \"com.amazonaws.ssm#ParameterNotFound\":\n            throw await de_ParameterNotFoundRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteParametersCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteParametersCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteParametersCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeletePatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeletePatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeletePatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceInUseException\":\n        case \"com.amazonaws.ssm#ResourceInUseException\":\n            throw await de_ResourceInUseExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteResourceDataSyncCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteResourceDataSyncCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteResourceDataSyncCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceDataSyncInvalidConfigurationException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException\":\n            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);\n        case \"ResourceDataSyncNotFoundException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncNotFoundException\":\n            throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteResourcePolicyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteResourcePolicyCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteResourcePolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourcePolicyConflictException\":\n        case \"com.amazonaws.ssm#ResourcePolicyConflictException\":\n            throw await de_ResourcePolicyConflictExceptionRes(parsedOutput, context);\n        case \"ResourcePolicyInvalidParameterException\":\n        case \"com.amazonaws.ssm#ResourcePolicyInvalidParameterException\":\n            throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeregisterManagedInstanceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeregisterManagedInstanceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeregisterManagedInstanceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeregisterPatchBaselineForPatchGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeregisterPatchBaselineForPatchGroupCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeregisterPatchBaselineForPatchGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeregisterTargetFromMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeregisterTargetFromMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeregisterTargetFromMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"TargetInUseException\":\n        case \"com.amazonaws.ssm#TargetInUseException\":\n            throw await de_TargetInUseExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeregisterTaskFromMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeregisterTaskFromMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeregisterTaskFromMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeActivationsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeActivationsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeActivationsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeActivationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeAssociationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeAssociationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeAssociationResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeAssociationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAssociationVersion\":\n        case \"com.amazonaws.ssm#InvalidAssociationVersion\":\n            throw await de_InvalidAssociationVersionRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeAssociationExecutionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeAssociationExecutionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeAssociationExecutionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeAssociationExecutionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeAssociationExecutionTargetsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeAssociationExecutionTargetsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeAssociationExecutionTargetsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeAssociationExecutionTargetsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"AssociationExecutionDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationExecutionDoesNotExist\":\n            throw await de_AssociationExecutionDoesNotExistRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeAutomationExecutionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeAutomationExecutionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeAutomationExecutionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeAutomationExecutionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidFilterValue\":\n        case \"com.amazonaws.ssm#InvalidFilterValue\":\n            throw await de_InvalidFilterValueRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeAutomationStepExecutionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeAutomationStepExecutionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeAutomationStepExecutionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeAutomationStepExecutionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AutomationExecutionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationExecutionNotFoundException\":\n            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidFilterValue\":\n        case \"com.amazonaws.ssm#InvalidFilterValue\":\n            throw await de_InvalidFilterValueRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeAvailablePatchesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeAvailablePatchesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeAvailablePatchesResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeAvailablePatchesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeDocumentCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeDocumentCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeDocumentResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeDocumentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeDocumentPermissionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeDocumentPermissionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeDocumentPermissionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentOperation\":\n        case \"com.amazonaws.ssm#InvalidDocumentOperation\":\n            throw await de_InvalidDocumentOperationRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"InvalidPermissionType\":\n        case \"com.amazonaws.ssm#InvalidPermissionType\":\n            throw await de_InvalidPermissionTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeEffectiveInstanceAssociationsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeEffectiveInstanceAssociationsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeEffectiveInstanceAssociationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeEffectivePatchesForPatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeEffectivePatchesForPatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeEffectivePatchesForPatchBaselineResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeEffectivePatchesForPatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"UnsupportedOperatingSystem\":\n        case \"com.amazonaws.ssm#UnsupportedOperatingSystem\":\n            throw await de_UnsupportedOperatingSystemRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeInstanceAssociationsStatusCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeInstanceAssociationsStatusCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeInstanceAssociationsStatusResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeInstanceAssociationsStatusCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeInstanceInformationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeInstanceInformationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeInstanceInformationResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeInstanceInformationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidInstanceInformationFilterValue\":\n        case \"com.amazonaws.ssm#InvalidInstanceInformationFilterValue\":\n            throw await de_InvalidInstanceInformationFilterValueRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeInstancePatchesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeInstancePatchesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeInstancePatchesResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeInstancePatchesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeInstancePatchStatesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeInstancePatchStatesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeInstancePatchStatesResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeInstancePatchStatesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeInstancePatchStatesForPatchGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeInstancePatchStatesForPatchGroupCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeInstancePatchStatesForPatchGroupResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeInstancePatchStatesForPatchGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeInventoryDeletionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeInventoryDeletionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeInventoryDeletionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeInventoryDeletionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDeletionIdException\":\n        case \"com.amazonaws.ssm#InvalidDeletionIdException\":\n            throw await de_InvalidDeletionIdExceptionRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowExecutionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowExecutionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeMaintenanceWindowExecutionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowExecutionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowExecutionTaskInvocationsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowExecutionTaskInvocationsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeMaintenanceWindowExecutionTaskInvocationsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowExecutionTaskInvocationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowExecutionTasksCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowExecutionTasksCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeMaintenanceWindowExecutionTasksResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowExecutionTasksCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowScheduleCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowScheduleCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowScheduleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowsForTargetCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowsForTargetCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowsForTargetCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowTargetsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowTargetsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowTargetsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMaintenanceWindowTasksCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMaintenanceWindowTasksCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMaintenanceWindowTasksCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeOpsItemsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeOpsItemsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeOpsItemsResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeOpsItemsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeParametersCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeParametersCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeParametersResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeParametersCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidFilterOption\":\n        case \"com.amazonaws.ssm#InvalidFilterOption\":\n            throw await de_InvalidFilterOptionRes(parsedOutput, context);\n        case \"InvalidFilterValue\":\n        case \"com.amazonaws.ssm#InvalidFilterValue\":\n            throw await de_InvalidFilterValueRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribePatchBaselinesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribePatchBaselinesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribePatchBaselinesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribePatchGroupsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribePatchGroupsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribePatchGroupsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribePatchGroupStateCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribePatchGroupStateCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribePatchGroupStateCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribePatchPropertiesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribePatchPropertiesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribePatchPropertiesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeSessionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeSessionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeSessionsResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeSessionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DisassociateOpsItemRelatedItemCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DisassociateOpsItemRelatedItemCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DisassociateOpsItemRelatedItemCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemInvalidParameterException\":\n        case \"com.amazonaws.ssm#OpsItemInvalidParameterException\":\n            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);\n        case \"OpsItemNotFoundException\":\n        case \"com.amazonaws.ssm#OpsItemNotFoundException\":\n            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);\n        case \"OpsItemRelatedItemAssociationNotFoundException\":\n        case \"com.amazonaws.ssm#OpsItemRelatedItemAssociationNotFoundException\":\n            throw await de_OpsItemRelatedItemAssociationNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetAutomationExecutionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetAutomationExecutionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetAutomationExecutionResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetAutomationExecutionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AutomationExecutionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationExecutionNotFoundException\":\n            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetCalendarStateCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetCalendarStateCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetCalendarStateCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentType\":\n        case \"com.amazonaws.ssm#InvalidDocumentType\":\n            throw await de_InvalidDocumentTypeRes(parsedOutput, context);\n        case \"UnsupportedCalendarException\":\n        case \"com.amazonaws.ssm#UnsupportedCalendarException\":\n            throw await de_UnsupportedCalendarExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetCommandInvocationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetCommandInvocationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetCommandInvocationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidCommandId\":\n        case \"com.amazonaws.ssm#InvalidCommandId\":\n            throw await de_InvalidCommandIdRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidPluginName\":\n        case \"com.amazonaws.ssm#InvalidPluginName\":\n            throw await de_InvalidPluginNameRes(parsedOutput, context);\n        case \"InvocationDoesNotExist\":\n        case \"com.amazonaws.ssm#InvocationDoesNotExist\":\n            throw await de_InvocationDoesNotExistRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetConnectionStatusCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetConnectionStatusCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetConnectionStatusCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetDefaultPatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetDefaultPatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetDefaultPatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetDeployablePatchSnapshotForInstanceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetDeployablePatchSnapshotForInstanceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetDeployablePatchSnapshotForInstanceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"UnsupportedFeatureRequiredException\":\n        case \"com.amazonaws.ssm#UnsupportedFeatureRequiredException\":\n            throw await de_UnsupportedFeatureRequiredExceptionRes(parsedOutput, context);\n        case \"UnsupportedOperatingSystem\":\n        case \"com.amazonaws.ssm#UnsupportedOperatingSystem\":\n            throw await de_UnsupportedOperatingSystemRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetDocumentCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetDocumentCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetDocumentResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetDocumentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetInventoryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetInventoryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetInventoryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAggregatorException\":\n        case \"com.amazonaws.ssm#InvalidAggregatorException\":\n            throw await de_InvalidAggregatorExceptionRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidInventoryGroupException\":\n        case \"com.amazonaws.ssm#InvalidInventoryGroupException\":\n            throw await de_InvalidInventoryGroupExceptionRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"InvalidResultAttributeException\":\n        case \"com.amazonaws.ssm#InvalidResultAttributeException\":\n            throw await de_InvalidResultAttributeExceptionRes(parsedOutput, context);\n        case \"InvalidTypeNameException\":\n        case \"com.amazonaws.ssm#InvalidTypeNameException\":\n            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetInventorySchemaCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetInventorySchemaCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetInventorySchemaCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"InvalidTypeNameException\":\n        case \"com.amazonaws.ssm#InvalidTypeNameException\":\n            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetMaintenanceWindowResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetMaintenanceWindowExecutionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetMaintenanceWindowExecutionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetMaintenanceWindowExecutionResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetMaintenanceWindowExecutionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetMaintenanceWindowExecutionTaskCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetMaintenanceWindowExecutionTaskCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetMaintenanceWindowExecutionTaskResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetMaintenanceWindowExecutionTaskCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetMaintenanceWindowExecutionTaskInvocationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetMaintenanceWindowExecutionTaskInvocationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetMaintenanceWindowExecutionTaskInvocationResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetMaintenanceWindowExecutionTaskInvocationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetMaintenanceWindowTaskCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetMaintenanceWindowTaskCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetMaintenanceWindowTaskResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetMaintenanceWindowTaskCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetOpsItemCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetOpsItemCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetOpsItemResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetOpsItemCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemAccessDeniedException\":\n        case \"com.amazonaws.ssm#OpsItemAccessDeniedException\":\n            throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);\n        case \"OpsItemNotFoundException\":\n        case \"com.amazonaws.ssm#OpsItemNotFoundException\":\n            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetOpsMetadataCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetOpsMetadataCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetOpsMetadataCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsMetadataInvalidArgumentException\":\n        case \"com.amazonaws.ssm#OpsMetadataInvalidArgumentException\":\n            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);\n        case \"OpsMetadataNotFoundException\":\n        case \"com.amazonaws.ssm#OpsMetadataNotFoundException\":\n            throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetOpsSummaryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetOpsSummaryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetOpsSummaryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAggregatorException\":\n        case \"com.amazonaws.ssm#InvalidAggregatorException\":\n            throw await de_InvalidAggregatorExceptionRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"InvalidTypeNameException\":\n        case \"com.amazonaws.ssm#InvalidTypeNameException\":\n            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);\n        case \"ResourceDataSyncNotFoundException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncNotFoundException\":\n            throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetParameterCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetParameterCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetParameterResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetParameterCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidKeyId\":\n        case \"com.amazonaws.ssm#InvalidKeyId\":\n            throw await de_InvalidKeyIdRes(parsedOutput, context);\n        case \"ParameterNotFound\":\n        case \"com.amazonaws.ssm#ParameterNotFound\":\n            throw await de_ParameterNotFoundRes(parsedOutput, context);\n        case \"ParameterVersionNotFound\":\n        case \"com.amazonaws.ssm#ParameterVersionNotFound\":\n            throw await de_ParameterVersionNotFoundRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetParameterHistoryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetParameterHistoryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetParameterHistoryResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetParameterHistoryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidKeyId\":\n        case \"com.amazonaws.ssm#InvalidKeyId\":\n            throw await de_InvalidKeyIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"ParameterNotFound\":\n        case \"com.amazonaws.ssm#ParameterNotFound\":\n            throw await de_ParameterNotFoundRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetParametersCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetParametersCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetParametersResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetParametersCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidKeyId\":\n        case \"com.amazonaws.ssm#InvalidKeyId\":\n            throw await de_InvalidKeyIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetParametersByPathCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetParametersByPathCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetParametersByPathResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetParametersByPathCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidFilterOption\":\n        case \"com.amazonaws.ssm#InvalidFilterOption\":\n            throw await de_InvalidFilterOptionRes(parsedOutput, context);\n        case \"InvalidFilterValue\":\n        case \"com.amazonaws.ssm#InvalidFilterValue\":\n            throw await de_InvalidFilterValueRes(parsedOutput, context);\n        case \"InvalidKeyId\":\n        case \"com.amazonaws.ssm#InvalidKeyId\":\n            throw await de_InvalidKeyIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetPatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetPatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetPatchBaselineResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetPatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetPatchBaselineForPatchGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetPatchBaselineForPatchGroupCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetPatchBaselineForPatchGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetResourcePoliciesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetResourcePoliciesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetResourcePoliciesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourcePolicyInvalidParameterException\":\n        case \"com.amazonaws.ssm#ResourcePolicyInvalidParameterException\":\n            throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetServiceSettingCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetServiceSettingCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetServiceSettingResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetServiceSettingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ServiceSettingNotFound\":\n        case \"com.amazonaws.ssm#ServiceSettingNotFound\":\n            throw await de_ServiceSettingNotFoundRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_LabelParameterVersionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_LabelParameterVersionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_LabelParameterVersionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ParameterNotFound\":\n        case \"com.amazonaws.ssm#ParameterNotFound\":\n            throw await de_ParameterNotFoundRes(parsedOutput, context);\n        case \"ParameterVersionLabelLimitExceeded\":\n        case \"com.amazonaws.ssm#ParameterVersionLabelLimitExceeded\":\n            throw await de_ParameterVersionLabelLimitExceededRes(parsedOutput, context);\n        case \"ParameterVersionNotFound\":\n        case \"com.amazonaws.ssm#ParameterVersionNotFound\":\n            throw await de_ParameterVersionNotFoundRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListAssociationsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListAssociationsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListAssociationsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListAssociationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListAssociationVersionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListAssociationVersionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListAssociationVersionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListAssociationVersionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListCommandInvocationsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListCommandInvocationsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListCommandInvocationsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListCommandInvocationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidCommandId\":\n        case \"com.amazonaws.ssm#InvalidCommandId\":\n            throw await de_InvalidCommandIdRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListCommandsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListCommandsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListCommandsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListCommandsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidCommandId\":\n        case \"com.amazonaws.ssm#InvalidCommandId\":\n            throw await de_InvalidCommandIdRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListComplianceItemsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListComplianceItemsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListComplianceItemsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListComplianceItemsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"InvalidResourceType\":\n        case \"com.amazonaws.ssm#InvalidResourceType\":\n            throw await de_InvalidResourceTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListComplianceSummariesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListComplianceSummariesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListComplianceSummariesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListDocumentMetadataHistoryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListDocumentMetadataHistoryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListDocumentMetadataHistoryResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListDocumentMetadataHistoryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListDocumentsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListDocumentsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListDocumentsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListDocumentsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilterKey\":\n        case \"com.amazonaws.ssm#InvalidFilterKey\":\n            throw await de_InvalidFilterKeyRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListDocumentVersionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListDocumentVersionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListDocumentVersionsResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListDocumentVersionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListInventoryEntriesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListInventoryEntriesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListInventoryEntriesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"InvalidTypeNameException\":\n        case \"com.amazonaws.ssm#InvalidTypeNameException\":\n            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListOpsItemEventsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListOpsItemEventsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListOpsItemEventsResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListOpsItemEventsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemInvalidParameterException\":\n        case \"com.amazonaws.ssm#OpsItemInvalidParameterException\":\n            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);\n        case \"OpsItemLimitExceededException\":\n        case \"com.amazonaws.ssm#OpsItemLimitExceededException\":\n            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);\n        case \"OpsItemNotFoundException\":\n        case \"com.amazonaws.ssm#OpsItemNotFoundException\":\n            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListOpsItemRelatedItemsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListOpsItemRelatedItemsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListOpsItemRelatedItemsResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListOpsItemRelatedItemsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemInvalidParameterException\":\n        case \"com.amazonaws.ssm#OpsItemInvalidParameterException\":\n            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListOpsMetadataCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListOpsMetadataCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListOpsMetadataResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListOpsMetadataCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsMetadataInvalidArgumentException\":\n        case \"com.amazonaws.ssm#OpsMetadataInvalidArgumentException\":\n            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListResourceComplianceSummariesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListResourceComplianceSummariesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListResourceComplianceSummariesResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListResourceComplianceSummariesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidFilter\":\n        case \"com.amazonaws.ssm#InvalidFilter\":\n            throw await de_InvalidFilterRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListResourceDataSyncCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListResourceDataSyncCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ListResourceDataSyncResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListResourceDataSyncCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidNextToken\":\n        case \"com.amazonaws.ssm#InvalidNextToken\":\n            throw await de_InvalidNextTokenRes(parsedOutput, context);\n        case \"ResourceDataSyncInvalidConfigurationException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException\":\n            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListTagsForResourceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListTagsForResourceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListTagsForResourceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"InvalidResourceType\":\n        case \"com.amazonaws.ssm#InvalidResourceType\":\n            throw await de_InvalidResourceTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ModifyDocumentPermissionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ModifyDocumentPermissionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ModifyDocumentPermissionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DocumentLimitExceeded\":\n        case \"com.amazonaws.ssm#DocumentLimitExceeded\":\n            throw await de_DocumentLimitExceededRes(parsedOutput, context);\n        case \"DocumentPermissionLimit\":\n        case \"com.amazonaws.ssm#DocumentPermissionLimit\":\n            throw await de_DocumentPermissionLimitRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidPermissionType\":\n        case \"com.amazonaws.ssm#InvalidPermissionType\":\n            throw await de_InvalidPermissionTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutComplianceItemsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutComplianceItemsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutComplianceItemsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ComplianceTypeCountLimitExceededException\":\n        case \"com.amazonaws.ssm#ComplianceTypeCountLimitExceededException\":\n            throw await de_ComplianceTypeCountLimitExceededExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidItemContentException\":\n        case \"com.amazonaws.ssm#InvalidItemContentException\":\n            throw await de_InvalidItemContentExceptionRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"InvalidResourceType\":\n        case \"com.amazonaws.ssm#InvalidResourceType\":\n            throw await de_InvalidResourceTypeRes(parsedOutput, context);\n        case \"ItemSizeLimitExceededException\":\n        case \"com.amazonaws.ssm#ItemSizeLimitExceededException\":\n            throw await de_ItemSizeLimitExceededExceptionRes(parsedOutput, context);\n        case \"TotalSizeLimitExceededException\":\n        case \"com.amazonaws.ssm#TotalSizeLimitExceededException\":\n            throw await de_TotalSizeLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutInventoryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutInventoryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutInventoryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"CustomSchemaCountLimitExceededException\":\n        case \"com.amazonaws.ssm#CustomSchemaCountLimitExceededException\":\n            throw await de_CustomSchemaCountLimitExceededExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidInventoryItemContextException\":\n        case \"com.amazonaws.ssm#InvalidInventoryItemContextException\":\n            throw await de_InvalidInventoryItemContextExceptionRes(parsedOutput, context);\n        case \"InvalidItemContentException\":\n        case \"com.amazonaws.ssm#InvalidItemContentException\":\n            throw await de_InvalidItemContentExceptionRes(parsedOutput, context);\n        case \"InvalidTypeNameException\":\n        case \"com.amazonaws.ssm#InvalidTypeNameException\":\n            throw await de_InvalidTypeNameExceptionRes(parsedOutput, context);\n        case \"ItemContentMismatchException\":\n        case \"com.amazonaws.ssm#ItemContentMismatchException\":\n            throw await de_ItemContentMismatchExceptionRes(parsedOutput, context);\n        case \"ItemSizeLimitExceededException\":\n        case \"com.amazonaws.ssm#ItemSizeLimitExceededException\":\n            throw await de_ItemSizeLimitExceededExceptionRes(parsedOutput, context);\n        case \"SubTypeCountLimitExceededException\":\n        case \"com.amazonaws.ssm#SubTypeCountLimitExceededException\":\n            throw await de_SubTypeCountLimitExceededExceptionRes(parsedOutput, context);\n        case \"TotalSizeLimitExceededException\":\n        case \"com.amazonaws.ssm#TotalSizeLimitExceededException\":\n            throw await de_TotalSizeLimitExceededExceptionRes(parsedOutput, context);\n        case \"UnsupportedInventoryItemContextException\":\n        case \"com.amazonaws.ssm#UnsupportedInventoryItemContextException\":\n            throw await de_UnsupportedInventoryItemContextExceptionRes(parsedOutput, context);\n        case \"UnsupportedInventorySchemaVersionException\":\n        case \"com.amazonaws.ssm#UnsupportedInventorySchemaVersionException\":\n            throw await de_UnsupportedInventorySchemaVersionExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutParameterCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutParameterCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutParameterCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"HierarchyLevelLimitExceededException\":\n        case \"com.amazonaws.ssm#HierarchyLevelLimitExceededException\":\n            throw await de_HierarchyLevelLimitExceededExceptionRes(parsedOutput, context);\n        case \"HierarchyTypeMismatchException\":\n        case \"com.amazonaws.ssm#HierarchyTypeMismatchException\":\n            throw await de_HierarchyTypeMismatchExceptionRes(parsedOutput, context);\n        case \"IncompatiblePolicyException\":\n        case \"com.amazonaws.ssm#IncompatiblePolicyException\":\n            throw await de_IncompatiblePolicyExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAllowedPatternException\":\n        case \"com.amazonaws.ssm#InvalidAllowedPatternException\":\n            throw await de_InvalidAllowedPatternExceptionRes(parsedOutput, context);\n        case \"InvalidKeyId\":\n        case \"com.amazonaws.ssm#InvalidKeyId\":\n            throw await de_InvalidKeyIdRes(parsedOutput, context);\n        case \"InvalidPolicyAttributeException\":\n        case \"com.amazonaws.ssm#InvalidPolicyAttributeException\":\n            throw await de_InvalidPolicyAttributeExceptionRes(parsedOutput, context);\n        case \"InvalidPolicyTypeException\":\n        case \"com.amazonaws.ssm#InvalidPolicyTypeException\":\n            throw await de_InvalidPolicyTypeExceptionRes(parsedOutput, context);\n        case \"ParameterAlreadyExists\":\n        case \"com.amazonaws.ssm#ParameterAlreadyExists\":\n            throw await de_ParameterAlreadyExistsRes(parsedOutput, context);\n        case \"ParameterLimitExceeded\":\n        case \"com.amazonaws.ssm#ParameterLimitExceeded\":\n            throw await de_ParameterLimitExceededRes(parsedOutput, context);\n        case \"ParameterMaxVersionLimitExceeded\":\n        case \"com.amazonaws.ssm#ParameterMaxVersionLimitExceeded\":\n            throw await de_ParameterMaxVersionLimitExceededRes(parsedOutput, context);\n        case \"ParameterPatternMismatchException\":\n        case \"com.amazonaws.ssm#ParameterPatternMismatchException\":\n            throw await de_ParameterPatternMismatchExceptionRes(parsedOutput, context);\n        case \"PoliciesLimitExceededException\":\n        case \"com.amazonaws.ssm#PoliciesLimitExceededException\":\n            throw await de_PoliciesLimitExceededExceptionRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        case \"UnsupportedParameterType\":\n        case \"com.amazonaws.ssm#UnsupportedParameterType\":\n            throw await de_UnsupportedParameterTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutResourcePolicyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutResourcePolicyCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutResourcePolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourcePolicyConflictException\":\n        case \"com.amazonaws.ssm#ResourcePolicyConflictException\":\n            throw await de_ResourcePolicyConflictExceptionRes(parsedOutput, context);\n        case \"ResourcePolicyInvalidParameterException\":\n        case \"com.amazonaws.ssm#ResourcePolicyInvalidParameterException\":\n            throw await de_ResourcePolicyInvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourcePolicyLimitExceededException\":\n        case \"com.amazonaws.ssm#ResourcePolicyLimitExceededException\":\n            throw await de_ResourcePolicyLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_RegisterDefaultPatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_RegisterDefaultPatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_RegisterDefaultPatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_RegisterPatchBaselineForPatchGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_RegisterPatchBaselineForPatchGroupCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_RegisterPatchBaselineForPatchGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AlreadyExistsException\":\n        case \"com.amazonaws.ssm#AlreadyExistsException\":\n            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"ResourceLimitExceededException\":\n        case \"com.amazonaws.ssm#ResourceLimitExceededException\":\n            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_RegisterTargetWithMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_RegisterTargetWithMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_RegisterTargetWithMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"IdempotentParameterMismatch\":\n        case \"com.amazonaws.ssm#IdempotentParameterMismatch\":\n            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceLimitExceededException\":\n        case \"com.amazonaws.ssm#ResourceLimitExceededException\":\n            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_RegisterTaskWithMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_RegisterTaskWithMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_RegisterTaskWithMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"FeatureNotAvailableException\":\n        case \"com.amazonaws.ssm#FeatureNotAvailableException\":\n            throw await de_FeatureNotAvailableExceptionRes(parsedOutput, context);\n        case \"IdempotentParameterMismatch\":\n        case \"com.amazonaws.ssm#IdempotentParameterMismatch\":\n            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceLimitExceededException\":\n        case \"com.amazonaws.ssm#ResourceLimitExceededException\":\n            throw await de_ResourceLimitExceededExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_RemoveTagsFromResourceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_RemoveTagsFromResourceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_RemoveTagsFromResourceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidResourceId\":\n        case \"com.amazonaws.ssm#InvalidResourceId\":\n            throw await de_InvalidResourceIdRes(parsedOutput, context);\n        case \"InvalidResourceType\":\n        case \"com.amazonaws.ssm#InvalidResourceType\":\n            throw await de_InvalidResourceTypeRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ResetServiceSettingCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ResetServiceSettingCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_ResetServiceSettingResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ResetServiceSettingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ServiceSettingNotFound\":\n        case \"com.amazonaws.ssm#ServiceSettingNotFound\":\n            throw await de_ServiceSettingNotFoundRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ResumeSessionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ResumeSessionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ResumeSessionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_SendAutomationSignalCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_SendAutomationSignalCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_SendAutomationSignalCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AutomationExecutionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationExecutionNotFoundException\":\n            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);\n        case \"AutomationStepNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationStepNotFoundException\":\n            throw await de_AutomationStepNotFoundExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAutomationSignalException\":\n        case \"com.amazonaws.ssm#InvalidAutomationSignalException\":\n            throw await de_InvalidAutomationSignalExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_SendCommandCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_SendCommandCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_SendCommandResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_SendCommandCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DuplicateInstanceId\":\n        case \"com.amazonaws.ssm#DuplicateInstanceId\":\n            throw await de_DuplicateInstanceIdRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"InvalidNotificationConfig\":\n        case \"com.amazonaws.ssm#InvalidNotificationConfig\":\n            throw await de_InvalidNotificationConfigRes(parsedOutput, context);\n        case \"InvalidOutputFolder\":\n        case \"com.amazonaws.ssm#InvalidOutputFolder\":\n            throw await de_InvalidOutputFolderRes(parsedOutput, context);\n        case \"InvalidParameters\":\n        case \"com.amazonaws.ssm#InvalidParameters\":\n            throw await de_InvalidParametersRes(parsedOutput, context);\n        case \"InvalidRole\":\n        case \"com.amazonaws.ssm#InvalidRole\":\n            throw await de_InvalidRoleRes(parsedOutput, context);\n        case \"MaxDocumentSizeExceeded\":\n        case \"com.amazonaws.ssm#MaxDocumentSizeExceeded\":\n            throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);\n        case \"UnsupportedPlatformType\":\n        case \"com.amazonaws.ssm#UnsupportedPlatformType\":\n            throw await de_UnsupportedPlatformTypeRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StartAssociationsOnceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_StartAssociationsOnceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_StartAssociationsOnceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"InvalidAssociation\":\n        case \"com.amazonaws.ssm#InvalidAssociation\":\n            throw await de_InvalidAssociationRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StartAutomationExecutionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_StartAutomationExecutionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_StartAutomationExecutionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AutomationDefinitionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationDefinitionNotFoundException\":\n            throw await de_AutomationDefinitionNotFoundExceptionRes(parsedOutput, context);\n        case \"AutomationDefinitionVersionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException\":\n            throw await de_AutomationDefinitionVersionNotFoundExceptionRes(parsedOutput, context);\n        case \"AutomationExecutionLimitExceededException\":\n        case \"com.amazonaws.ssm#AutomationExecutionLimitExceededException\":\n            throw await de_AutomationExecutionLimitExceededExceptionRes(parsedOutput, context);\n        case \"IdempotentParameterMismatch\":\n        case \"com.amazonaws.ssm#IdempotentParameterMismatch\":\n            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAutomationExecutionParametersException\":\n        case \"com.amazonaws.ssm#InvalidAutomationExecutionParametersException\":\n            throw await de_InvalidAutomationExecutionParametersExceptionRes(parsedOutput, context);\n        case \"InvalidTarget\":\n        case \"com.amazonaws.ssm#InvalidTarget\":\n            throw await de_InvalidTargetRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StartChangeRequestExecutionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_StartChangeRequestExecutionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_StartChangeRequestExecutionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AutomationDefinitionNotApprovedException\":\n        case \"com.amazonaws.ssm#AutomationDefinitionNotApprovedException\":\n            throw await de_AutomationDefinitionNotApprovedExceptionRes(parsedOutput, context);\n        case \"AutomationDefinitionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationDefinitionNotFoundException\":\n            throw await de_AutomationDefinitionNotFoundExceptionRes(parsedOutput, context);\n        case \"AutomationDefinitionVersionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationDefinitionVersionNotFoundException\":\n            throw await de_AutomationDefinitionVersionNotFoundExceptionRes(parsedOutput, context);\n        case \"AutomationExecutionLimitExceededException\":\n        case \"com.amazonaws.ssm#AutomationExecutionLimitExceededException\":\n            throw await de_AutomationExecutionLimitExceededExceptionRes(parsedOutput, context);\n        case \"IdempotentParameterMismatch\":\n        case \"com.amazonaws.ssm#IdempotentParameterMismatch\":\n            throw await de_IdempotentParameterMismatchRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAutomationExecutionParametersException\":\n        case \"com.amazonaws.ssm#InvalidAutomationExecutionParametersException\":\n            throw await de_InvalidAutomationExecutionParametersExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StartSessionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_StartSessionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_StartSessionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"TargetNotConnected\":\n        case \"com.amazonaws.ssm#TargetNotConnected\":\n            throw await de_TargetNotConnectedRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StopAutomationExecutionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_StopAutomationExecutionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_StopAutomationExecutionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AutomationExecutionNotFoundException\":\n        case \"com.amazonaws.ssm#AutomationExecutionNotFoundException\":\n            throw await de_AutomationExecutionNotFoundExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAutomationStatusUpdateException\":\n        case \"com.amazonaws.ssm#InvalidAutomationStatusUpdateException\":\n            throw await de_InvalidAutomationStatusUpdateExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_TerminateSessionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_TerminateSessionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_TerminateSessionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UnlabelParameterVersionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UnlabelParameterVersionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UnlabelParameterVersionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ParameterNotFound\":\n        case \"com.amazonaws.ssm#ParameterNotFound\":\n            throw await de_ParameterNotFoundRes(parsedOutput, context);\n        case \"ParameterVersionNotFound\":\n        case \"com.amazonaws.ssm#ParameterVersionNotFound\":\n            throw await de_ParameterVersionNotFoundRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateAssociationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateAssociationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_UpdateAssociationResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateAssociationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"AssociationVersionLimitExceeded\":\n        case \"com.amazonaws.ssm#AssociationVersionLimitExceeded\":\n            throw await de_AssociationVersionLimitExceededRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidAssociationVersion\":\n        case \"com.amazonaws.ssm#InvalidAssociationVersion\":\n            throw await de_InvalidAssociationVersionRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        case \"InvalidOutputLocation\":\n        case \"com.amazonaws.ssm#InvalidOutputLocation\":\n            throw await de_InvalidOutputLocationRes(parsedOutput, context);\n        case \"InvalidParameters\":\n        case \"com.amazonaws.ssm#InvalidParameters\":\n            throw await de_InvalidParametersRes(parsedOutput, context);\n        case \"InvalidSchedule\":\n        case \"com.amazonaws.ssm#InvalidSchedule\":\n            throw await de_InvalidScheduleRes(parsedOutput, context);\n        case \"InvalidTarget\":\n        case \"com.amazonaws.ssm#InvalidTarget\":\n            throw await de_InvalidTargetRes(parsedOutput, context);\n        case \"InvalidTargetMaps\":\n        case \"com.amazonaws.ssm#InvalidTargetMaps\":\n            throw await de_InvalidTargetMapsRes(parsedOutput, context);\n        case \"InvalidUpdate\":\n        case \"com.amazonaws.ssm#InvalidUpdate\":\n            throw await de_InvalidUpdateRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateAssociationStatusCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateAssociationStatusCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_UpdateAssociationStatusResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateAssociationStatusCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AssociationDoesNotExist\":\n        case \"com.amazonaws.ssm#AssociationDoesNotExist\":\n            throw await de_AssociationDoesNotExistRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        case \"StatusUnchanged\":\n        case \"com.amazonaws.ssm#StatusUnchanged\":\n            throw await de_StatusUnchangedRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateDocumentCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateDocumentCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_UpdateDocumentResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateDocumentCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DocumentVersionLimitExceeded\":\n        case \"com.amazonaws.ssm#DocumentVersionLimitExceeded\":\n            throw await de_DocumentVersionLimitExceededRes(parsedOutput, context);\n        case \"DuplicateDocumentContent\":\n        case \"com.amazonaws.ssm#DuplicateDocumentContent\":\n            throw await de_DuplicateDocumentContentRes(parsedOutput, context);\n        case \"DuplicateDocumentVersionName\":\n        case \"com.amazonaws.ssm#DuplicateDocumentVersionName\":\n            throw await de_DuplicateDocumentVersionNameRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentContent\":\n        case \"com.amazonaws.ssm#InvalidDocumentContent\":\n            throw await de_InvalidDocumentContentRes(parsedOutput, context);\n        case \"InvalidDocumentOperation\":\n        case \"com.amazonaws.ssm#InvalidDocumentOperation\":\n            throw await de_InvalidDocumentOperationRes(parsedOutput, context);\n        case \"InvalidDocumentSchemaVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentSchemaVersion\":\n            throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        case \"MaxDocumentSizeExceeded\":\n        case \"com.amazonaws.ssm#MaxDocumentSizeExceeded\":\n            throw await de_MaxDocumentSizeExceededRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateDocumentDefaultVersionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateDocumentDefaultVersionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateDocumentDefaultVersionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentSchemaVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentSchemaVersion\":\n            throw await de_InvalidDocumentSchemaVersionRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateDocumentMetadataCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateDocumentMetadataCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateDocumentMetadataCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidDocument\":\n        case \"com.amazonaws.ssm#InvalidDocument\":\n            throw await de_InvalidDocumentRes(parsedOutput, context);\n        case \"InvalidDocumentOperation\":\n        case \"com.amazonaws.ssm#InvalidDocumentOperation\":\n            throw await de_InvalidDocumentOperationRes(parsedOutput, context);\n        case \"InvalidDocumentVersion\":\n        case \"com.amazonaws.ssm#InvalidDocumentVersion\":\n            throw await de_InvalidDocumentVersionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateMaintenanceWindowCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateMaintenanceWindowCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateMaintenanceWindowCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateMaintenanceWindowTargetCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateMaintenanceWindowTargetCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateMaintenanceWindowTargetCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateMaintenanceWindowTaskCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateMaintenanceWindowTaskCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_UpdateMaintenanceWindowTaskResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateMaintenanceWindowTaskCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateManagedInstanceRoleCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateManagedInstanceRoleCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateManagedInstanceRoleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"InvalidInstanceId\":\n        case \"com.amazonaws.ssm#InvalidInstanceId\":\n            throw await de_InvalidInstanceIdRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateOpsItemCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateOpsItemCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateOpsItemCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsItemAccessDeniedException\":\n        case \"com.amazonaws.ssm#OpsItemAccessDeniedException\":\n            throw await de_OpsItemAccessDeniedExceptionRes(parsedOutput, context);\n        case \"OpsItemAlreadyExistsException\":\n        case \"com.amazonaws.ssm#OpsItemAlreadyExistsException\":\n            throw await de_OpsItemAlreadyExistsExceptionRes(parsedOutput, context);\n        case \"OpsItemInvalidParameterException\":\n        case \"com.amazonaws.ssm#OpsItemInvalidParameterException\":\n            throw await de_OpsItemInvalidParameterExceptionRes(parsedOutput, context);\n        case \"OpsItemLimitExceededException\":\n        case \"com.amazonaws.ssm#OpsItemLimitExceededException\":\n            throw await de_OpsItemLimitExceededExceptionRes(parsedOutput, context);\n        case \"OpsItemNotFoundException\":\n        case \"com.amazonaws.ssm#OpsItemNotFoundException\":\n            throw await de_OpsItemNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateOpsMetadataCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateOpsMetadataCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateOpsMetadataCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"OpsMetadataInvalidArgumentException\":\n        case \"com.amazonaws.ssm#OpsMetadataInvalidArgumentException\":\n            throw await de_OpsMetadataInvalidArgumentExceptionRes(parsedOutput, context);\n        case \"OpsMetadataKeyLimitExceededException\":\n        case \"com.amazonaws.ssm#OpsMetadataKeyLimitExceededException\":\n            throw await de_OpsMetadataKeyLimitExceededExceptionRes(parsedOutput, context);\n        case \"OpsMetadataNotFoundException\":\n        case \"com.amazonaws.ssm#OpsMetadataNotFoundException\":\n            throw await de_OpsMetadataNotFoundExceptionRes(parsedOutput, context);\n        case \"OpsMetadataTooManyUpdatesException\":\n        case \"com.amazonaws.ssm#OpsMetadataTooManyUpdatesException\":\n            throw await de_OpsMetadataTooManyUpdatesExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdatePatchBaselineCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdatePatchBaselineCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_UpdatePatchBaselineResult(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdatePatchBaselineCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DoesNotExistException\":\n        case \"com.amazonaws.ssm#DoesNotExistException\":\n            throw await de_DoesNotExistExceptionRes(parsedOutput, context);\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateResourceDataSyncCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateResourceDataSyncCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateResourceDataSyncCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ResourceDataSyncConflictException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncConflictException\":\n            throw await de_ResourceDataSyncConflictExceptionRes(parsedOutput, context);\n        case \"ResourceDataSyncInvalidConfigurationException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncInvalidConfigurationException\":\n            throw await de_ResourceDataSyncInvalidConfigurationExceptionRes(parsedOutput, context);\n        case \"ResourceDataSyncNotFoundException\":\n        case \"com.amazonaws.ssm#ResourceDataSyncNotFoundException\":\n            throw await de_ResourceDataSyncNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UpdateServiceSettingCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UpdateServiceSettingCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_UpdateServiceSettingCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerError\":\n        case \"com.amazonaws.ssm#InternalServerError\":\n            throw await de_InternalServerErrorRes(parsedOutput, context);\n        case \"ServiceSettingNotFound\":\n        case \"com.amazonaws.ssm#ServiceSettingNotFound\":\n            throw await de_ServiceSettingNotFoundRes(parsedOutput, context);\n        case \"TooManyUpdates\":\n        case \"com.amazonaws.ssm#TooManyUpdates\":\n            throw await de_TooManyUpdatesRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nconst de_AlreadyExistsExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AlreadyExistsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AssociatedInstancesRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AssociatedInstances({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AssociationAlreadyExistsRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AssociationAlreadyExists({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AssociationDoesNotExistRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AssociationDoesNotExist({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AssociationExecutionDoesNotExistRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AssociationExecutionDoesNotExist({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AssociationLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AssociationLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AssociationVersionLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AssociationVersionLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AutomationDefinitionNotApprovedExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AutomationDefinitionNotApprovedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AutomationDefinitionNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AutomationDefinitionNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AutomationDefinitionVersionNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AutomationDefinitionVersionNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AutomationExecutionLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AutomationExecutionLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AutomationExecutionNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AutomationExecutionNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_AutomationStepNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new AutomationStepNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ComplianceTypeCountLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ComplianceTypeCountLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_CustomSchemaCountLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new CustomSchemaCountLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DocumentAlreadyExistsRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DocumentAlreadyExists({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DocumentLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DocumentLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DocumentPermissionLimitRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DocumentPermissionLimit({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DocumentVersionLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DocumentVersionLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DoesNotExistExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DoesNotExistException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DuplicateDocumentContentRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DuplicateDocumentContent({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DuplicateDocumentVersionNameRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DuplicateDocumentVersionName({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_DuplicateInstanceIdRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DuplicateInstanceId({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_FeatureNotAvailableExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new FeatureNotAvailableException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_HierarchyLevelLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new HierarchyLevelLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_HierarchyTypeMismatchExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new HierarchyTypeMismatchException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_IdempotentParameterMismatchRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new IdempotentParameterMismatch({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_IncompatiblePolicyExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new IncompatiblePolicyException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InternalServerErrorRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InternalServerError({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidActivationRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidActivation({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidActivationIdRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidActivationId({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAggregatorExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAggregatorException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAllowedPatternExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAllowedPatternException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAssociationRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAssociation({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAssociationVersionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAssociationVersion({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAutomationExecutionParametersExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAutomationExecutionParametersException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAutomationSignalExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAutomationSignalException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAutomationStatusUpdateExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidAutomationStatusUpdateException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidCommandIdRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidCommandId({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDeleteInventoryParametersExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDeleteInventoryParametersException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDeletionIdExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDeletionIdException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDocumentRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDocument({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDocumentContentRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDocumentContent({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDocumentOperationRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDocumentOperation({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDocumentSchemaVersionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDocumentSchemaVersion({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDocumentTypeRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDocumentType({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidDocumentVersionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidDocumentVersion({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidFilterRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidFilter({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidFilterKeyRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidFilterKey({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidFilterOptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidFilterOption({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidFilterValueRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidFilterValue({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidInstanceIdRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidInstanceId({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidInstanceInformationFilterValueRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidInstanceInformationFilterValue({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidInventoryGroupExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidInventoryGroupException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidInventoryItemContextExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidInventoryItemContextException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidInventoryRequestExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidInventoryRequestException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidItemContentExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidItemContentException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidKeyIdRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidKeyId({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidNextTokenRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidNextToken({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidNotificationConfigRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidNotificationConfig({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidOptionExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidOptionException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidOutputFolderRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidOutputFolder({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidOutputLocationRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidOutputLocation({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidParametersRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidParameters({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidPermissionTypeRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidPermissionType({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidPluginNameRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidPluginName({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidPolicyAttributeExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidPolicyAttributeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidPolicyTypeExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidPolicyTypeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidResourceIdRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidResourceId({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidResourceTypeRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidResourceType({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidResultAttributeExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidResultAttributeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidRoleRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidRole({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidScheduleRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidSchedule({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidTagRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidTag({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidTargetRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidTarget({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidTargetMapsRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidTargetMaps({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidTypeNameExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidTypeNameException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidUpdateRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidUpdate({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvocationDoesNotExistRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvocationDoesNotExist({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ItemContentMismatchExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ItemContentMismatchException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ItemSizeLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ItemSizeLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_MaxDocumentSizeExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new MaxDocumentSizeExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemAccessDeniedExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemAccessDeniedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemAlreadyExistsExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemAlreadyExistsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemInvalidParameterExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemInvalidParameterException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemRelatedItemAlreadyExistsExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemRelatedItemAlreadyExistsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsItemRelatedItemAssociationNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsItemRelatedItemAssociationNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsMetadataAlreadyExistsExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsMetadataAlreadyExistsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsMetadataInvalidArgumentExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsMetadataInvalidArgumentException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsMetadataKeyLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsMetadataKeyLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsMetadataLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsMetadataLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsMetadataNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsMetadataNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OpsMetadataTooManyUpdatesExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OpsMetadataTooManyUpdatesException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterAlreadyExistsRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterAlreadyExists({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterMaxVersionLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterMaxVersionLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterNotFoundRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterNotFound({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterPatternMismatchExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterPatternMismatchException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterVersionLabelLimitExceededRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterVersionLabelLimitExceeded({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ParameterVersionNotFoundRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ParameterVersionNotFound({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_PoliciesLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new PoliciesLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceDataSyncAlreadyExistsExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceDataSyncAlreadyExistsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceDataSyncConflictExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceDataSyncConflictException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceDataSyncCountExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceDataSyncCountExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceDataSyncInvalidConfigurationExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceDataSyncInvalidConfigurationException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceDataSyncNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceDataSyncNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceInUseExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceInUseException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourcePolicyConflictExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourcePolicyConflictException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourcePolicyInvalidParameterExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourcePolicyInvalidParameterException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourcePolicyLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourcePolicyLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ServiceSettingNotFoundRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ServiceSettingNotFound({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_StatusUnchangedRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new StatusUnchanged({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_SubTypeCountLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new SubTypeCountLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_TargetInUseExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new TargetInUseException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_TargetNotConnectedRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new TargetNotConnected({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_TooManyTagsErrorRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new TooManyTagsError({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_TooManyUpdatesRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new TooManyUpdates({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_TotalSizeLimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new TotalSizeLimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedCalendarExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedCalendarException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedFeatureRequiredExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedFeatureRequiredException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedInventoryItemContextExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedInventoryItemContextException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedInventorySchemaVersionExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedInventorySchemaVersionException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedOperatingSystemRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedOperatingSystem({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedParameterTypeRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedParameterType({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnsupportedPlatformTypeRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnsupportedPlatformType({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst se_AssociationStatus = (input, context) => {\n    return take(input, {\n        AdditionalInfo: [],\n        Date: (_) => Math.round(_.getTime() / 1000),\n        Message: [],\n        Name: [],\n    });\n};\nconst se_ComplianceExecutionSummary = (input, context) => {\n    return take(input, {\n        ExecutionId: [],\n        ExecutionTime: (_) => Math.round(_.getTime() / 1000),\n        ExecutionType: [],\n    });\n};\nconst se_CreateActivationRequest = (input, context) => {\n    return take(input, {\n        DefaultInstanceName: [],\n        Description: [],\n        ExpirationDate: (_) => Math.round(_.getTime() / 1000),\n        IamRole: [],\n        RegistrationLimit: [],\n        RegistrationMetadata: _json,\n        Tags: _json,\n    });\n};\nconst se_CreateMaintenanceWindowRequest = (input, context) => {\n    return take(input, {\n        AllowUnassociatedTargets: [],\n        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],\n        Cutoff: [],\n        Description: [],\n        Duration: [],\n        EndDate: [],\n        Name: [],\n        Schedule: [],\n        ScheduleOffset: [],\n        ScheduleTimezone: [],\n        StartDate: [],\n        Tags: _json,\n    });\n};\nconst se_CreateOpsItemRequest = (input, context) => {\n    return take(input, {\n        AccountId: [],\n        ActualEndTime: (_) => Math.round(_.getTime() / 1000),\n        ActualStartTime: (_) => Math.round(_.getTime() / 1000),\n        Category: [],\n        Description: [],\n        Notifications: _json,\n        OperationalData: _json,\n        OpsItemType: [],\n        PlannedEndTime: (_) => Math.round(_.getTime() / 1000),\n        PlannedStartTime: (_) => Math.round(_.getTime() / 1000),\n        Priority: [],\n        RelatedOpsItems: _json,\n        Severity: [],\n        Source: [],\n        Tags: _json,\n        Title: [],\n    });\n};\nconst se_CreatePatchBaselineRequest = (input, context) => {\n    return take(input, {\n        ApprovalRules: _json,\n        ApprovedPatches: _json,\n        ApprovedPatchesComplianceLevel: [],\n        ApprovedPatchesEnableNonSecurity: [],\n        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],\n        Description: [],\n        GlobalFilters: _json,\n        Name: [],\n        OperatingSystem: [],\n        RejectedPatches: _json,\n        RejectedPatchesAction: [],\n        Sources: _json,\n        Tags: _json,\n    });\n};\nconst se_DeleteInventoryRequest = (input, context) => {\n    return take(input, {\n        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],\n        DryRun: [],\n        SchemaDeleteOption: [],\n        TypeName: [],\n    });\n};\nconst se_GetInventoryRequest = (input, context) => {\n    return take(input, {\n        Aggregators: (_) => se_InventoryAggregatorList(_, context),\n        Filters: _json,\n        MaxResults: [],\n        NextToken: [],\n        ResultAttributes: _json,\n    });\n};\nconst se_GetOpsSummaryRequest = (input, context) => {\n    return take(input, {\n        Aggregators: (_) => se_OpsAggregatorList(_, context),\n        Filters: _json,\n        MaxResults: [],\n        NextToken: [],\n        ResultAttributes: _json,\n        SyncName: [],\n    });\n};\nconst se_InventoryAggregator = (input, context) => {\n    return take(input, {\n        Aggregators: (_) => se_InventoryAggregatorList(_, context),\n        Expression: [],\n        Groups: _json,\n    });\n};\nconst se_InventoryAggregatorList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        return se_InventoryAggregator(entry, context);\n    });\n};\nconst se_MaintenanceWindowLambdaParameters = (input, context) => {\n    return take(input, {\n        ClientContext: [],\n        Payload: context.base64Encoder,\n        Qualifier: [],\n    });\n};\nconst se_MaintenanceWindowTaskInvocationParameters = (input, context) => {\n    return take(input, {\n        Automation: _json,\n        Lambda: (_) => se_MaintenanceWindowLambdaParameters(_, context),\n        RunCommand: _json,\n        StepFunctions: _json,\n    });\n};\nconst se_OpsAggregator = (input, context) => {\n    return take(input, {\n        AggregatorType: [],\n        Aggregators: (_) => se_OpsAggregatorList(_, context),\n        AttributeName: [],\n        Filters: _json,\n        TypeName: [],\n        Values: _json,\n    });\n};\nconst se_OpsAggregatorList = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        return se_OpsAggregator(entry, context);\n    });\n};\nconst se_PutComplianceItemsRequest = (input, context) => {\n    return take(input, {\n        ComplianceType: [],\n        ExecutionSummary: (_) => se_ComplianceExecutionSummary(_, context),\n        ItemContentHash: [],\n        Items: _json,\n        ResourceId: [],\n        ResourceType: [],\n        UploadType: [],\n    });\n};\nconst se_RegisterTargetWithMaintenanceWindowRequest = (input, context) => {\n    return take(input, {\n        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],\n        Description: [],\n        Name: [],\n        OwnerInformation: [],\n        ResourceType: [],\n        Targets: _json,\n        WindowId: [],\n    });\n};\nconst se_RegisterTaskWithMaintenanceWindowRequest = (input, context) => {\n    return take(input, {\n        AlarmConfiguration: _json,\n        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],\n        CutoffBehavior: [],\n        Description: [],\n        LoggingInfo: _json,\n        MaxConcurrency: [],\n        MaxErrors: [],\n        Name: [],\n        Priority: [],\n        ServiceRoleArn: [],\n        Targets: _json,\n        TaskArn: [],\n        TaskInvocationParameters: (_) => se_MaintenanceWindowTaskInvocationParameters(_, context),\n        TaskParameters: _json,\n        TaskType: [],\n        WindowId: [],\n    });\n};\nconst se_StartChangeRequestExecutionRequest = (input, context) => {\n    return take(input, {\n        AutoApprove: [],\n        ChangeDetails: [],\n        ChangeRequestName: [],\n        ClientToken: [],\n        DocumentName: [],\n        DocumentVersion: [],\n        Parameters: _json,\n        Runbooks: _json,\n        ScheduledEndTime: (_) => Math.round(_.getTime() / 1000),\n        ScheduledTime: (_) => Math.round(_.getTime() / 1000),\n        Tags: _json,\n    });\n};\nconst se_UpdateAssociationStatusRequest = (input, context) => {\n    return take(input, {\n        AssociationStatus: (_) => se_AssociationStatus(_, context),\n        InstanceId: [],\n        Name: [],\n    });\n};\nconst se_UpdateMaintenanceWindowTaskRequest = (input, context) => {\n    return take(input, {\n        AlarmConfiguration: _json,\n        CutoffBehavior: [],\n        Description: [],\n        LoggingInfo: _json,\n        MaxConcurrency: [],\n        MaxErrors: [],\n        Name: [],\n        Priority: [],\n        Replace: [],\n        ServiceRoleArn: [],\n        Targets: _json,\n        TaskArn: [],\n        TaskInvocationParameters: (_) => se_MaintenanceWindowTaskInvocationParameters(_, context),\n        TaskParameters: _json,\n        WindowId: [],\n        WindowTaskId: [],\n    });\n};\nconst se_UpdateOpsItemRequest = (input, context) => {\n    return take(input, {\n        ActualEndTime: (_) => Math.round(_.getTime() / 1000),\n        ActualStartTime: (_) => Math.round(_.getTime() / 1000),\n        Category: [],\n        Description: [],\n        Notifications: _json,\n        OperationalData: _json,\n        OperationalDataToDelete: _json,\n        OpsItemArn: [],\n        OpsItemId: [],\n        PlannedEndTime: (_) => Math.round(_.getTime() / 1000),\n        PlannedStartTime: (_) => Math.round(_.getTime() / 1000),\n        Priority: [],\n        RelatedOpsItems: _json,\n        Severity: [],\n        Status: [],\n        Title: [],\n    });\n};\nconst de_Activation = (output, context) => {\n    return take(output, {\n        ActivationId: __expectString,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DefaultInstanceName: __expectString,\n        Description: __expectString,\n        ExpirationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Expired: __expectBoolean,\n        IamRole: __expectString,\n        RegistrationLimit: __expectInt32,\n        RegistrationsCount: __expectInt32,\n        Tags: _json,\n    });\n};\nconst de_ActivationList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Activation(entry, context);\n    });\n    return retVal;\n};\nconst de_Association = (output, context) => {\n    return take(output, {\n        AssociationId: __expectString,\n        AssociationName: __expectString,\n        AssociationVersion: __expectString,\n        DocumentVersion: __expectString,\n        InstanceId: __expectString,\n        LastExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Name: __expectString,\n        Overview: _json,\n        ScheduleExpression: __expectString,\n        ScheduleOffset: __expectInt32,\n        TargetMaps: _json,\n        Targets: _json,\n    });\n};\nconst de_AssociationDescription = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        ApplyOnlyAtCronInterval: __expectBoolean,\n        AssociationId: __expectString,\n        AssociationName: __expectString,\n        AssociationVersion: __expectString,\n        AutomationTargetParameterName: __expectString,\n        CalendarNames: _json,\n        ComplianceSeverity: __expectString,\n        Date: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DocumentVersion: __expectString,\n        InstanceId: __expectString,\n        LastExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastSuccessfulExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastUpdateAssociationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Name: __expectString,\n        OutputLocation: _json,\n        Overview: _json,\n        Parameters: _json,\n        ScheduleExpression: __expectString,\n        ScheduleOffset: __expectInt32,\n        Status: (_) => de_AssociationStatus(_, context),\n        SyncCompliance: __expectString,\n        TargetLocations: _json,\n        TargetMaps: _json,\n        Targets: _json,\n        TriggeredAlarms: _json,\n    });\n};\nconst de_AssociationDescriptionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_AssociationDescription(entry, context);\n    });\n    return retVal;\n};\nconst de_AssociationExecution = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        AssociationId: __expectString,\n        AssociationVersion: __expectString,\n        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DetailedStatus: __expectString,\n        ExecutionId: __expectString,\n        LastExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ResourceCountByStatus: __expectString,\n        Status: __expectString,\n        TriggeredAlarms: _json,\n    });\n};\nconst de_AssociationExecutionsList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_AssociationExecution(entry, context);\n    });\n    return retVal;\n};\nconst de_AssociationExecutionTarget = (output, context) => {\n    return take(output, {\n        AssociationId: __expectString,\n        AssociationVersion: __expectString,\n        DetailedStatus: __expectString,\n        ExecutionId: __expectString,\n        LastExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        OutputSource: _json,\n        ResourceId: __expectString,\n        ResourceType: __expectString,\n        Status: __expectString,\n    });\n};\nconst de_AssociationExecutionTargetsList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_AssociationExecutionTarget(entry, context);\n    });\n    return retVal;\n};\nconst de_AssociationList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Association(entry, context);\n    });\n    return retVal;\n};\nconst de_AssociationStatus = (output, context) => {\n    return take(output, {\n        AdditionalInfo: __expectString,\n        Date: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Message: __expectString,\n        Name: __expectString,\n    });\n};\nconst de_AssociationVersionInfo = (output, context) => {\n    return take(output, {\n        ApplyOnlyAtCronInterval: __expectBoolean,\n        AssociationId: __expectString,\n        AssociationName: __expectString,\n        AssociationVersion: __expectString,\n        CalendarNames: _json,\n        ComplianceSeverity: __expectString,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DocumentVersion: __expectString,\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Name: __expectString,\n        OutputLocation: _json,\n        Parameters: _json,\n        ScheduleExpression: __expectString,\n        ScheduleOffset: __expectInt32,\n        SyncCompliance: __expectString,\n        TargetLocations: _json,\n        TargetMaps: _json,\n        Targets: _json,\n    });\n};\nconst de_AssociationVersionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_AssociationVersionInfo(entry, context);\n    });\n    return retVal;\n};\nconst de_AutomationExecution = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        AssociationId: __expectString,\n        AutomationExecutionId: __expectString,\n        AutomationExecutionStatus: __expectString,\n        AutomationSubtype: __expectString,\n        ChangeRequestName: __expectString,\n        CurrentAction: __expectString,\n        CurrentStepName: __expectString,\n        DocumentName: __expectString,\n        DocumentVersion: __expectString,\n        ExecutedBy: __expectString,\n        ExecutionEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        FailureMessage: __expectString,\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Mode: __expectString,\n        OpsItemId: __expectString,\n        Outputs: _json,\n        Parameters: _json,\n        ParentAutomationExecutionId: __expectString,\n        ProgressCounters: _json,\n        ResolvedTargets: _json,\n        Runbooks: _json,\n        ScheduledTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        StepExecutions: (_) => de_StepExecutionList(_, context),\n        StepExecutionsTruncated: __expectBoolean,\n        Target: __expectString,\n        TargetLocations: _json,\n        TargetMaps: _json,\n        TargetParameterName: __expectString,\n        Targets: _json,\n        TriggeredAlarms: _json,\n    });\n};\nconst de_AutomationExecutionMetadata = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        AssociationId: __expectString,\n        AutomationExecutionId: __expectString,\n        AutomationExecutionStatus: __expectString,\n        AutomationSubtype: __expectString,\n        AutomationType: __expectString,\n        ChangeRequestName: __expectString,\n        CurrentAction: __expectString,\n        CurrentStepName: __expectString,\n        DocumentName: __expectString,\n        DocumentVersion: __expectString,\n        ExecutedBy: __expectString,\n        ExecutionEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        FailureMessage: __expectString,\n        LogFile: __expectString,\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Mode: __expectString,\n        OpsItemId: __expectString,\n        Outputs: _json,\n        ParentAutomationExecutionId: __expectString,\n        ResolvedTargets: _json,\n        Runbooks: _json,\n        ScheduledTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Target: __expectString,\n        TargetMaps: _json,\n        TargetParameterName: __expectString,\n        Targets: _json,\n        TriggeredAlarms: _json,\n    });\n};\nconst de_AutomationExecutionMetadataList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_AutomationExecutionMetadata(entry, context);\n    });\n    return retVal;\n};\nconst de_Command = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        CloudWatchOutputConfig: _json,\n        CommandId: __expectString,\n        Comment: __expectString,\n        CompletedCount: __expectInt32,\n        DeliveryTimedOutCount: __expectInt32,\n        DocumentName: __expectString,\n        DocumentVersion: __expectString,\n        ErrorCount: __expectInt32,\n        ExpiresAfter: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        InstanceIds: _json,\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        NotificationConfig: _json,\n        OutputS3BucketName: __expectString,\n        OutputS3KeyPrefix: __expectString,\n        OutputS3Region: __expectString,\n        Parameters: _json,\n        RequestedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ServiceRole: __expectString,\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TargetCount: __expectInt32,\n        Targets: _json,\n        TimeoutSeconds: __expectInt32,\n        TriggeredAlarms: _json,\n    });\n};\nconst de_CommandInvocation = (output, context) => {\n    return take(output, {\n        CloudWatchOutputConfig: _json,\n        CommandId: __expectString,\n        CommandPlugins: (_) => de_CommandPluginList(_, context),\n        Comment: __expectString,\n        DocumentName: __expectString,\n        DocumentVersion: __expectString,\n        InstanceId: __expectString,\n        InstanceName: __expectString,\n        NotificationConfig: _json,\n        RequestedDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ServiceRole: __expectString,\n        StandardErrorUrl: __expectString,\n        StandardOutputUrl: __expectString,\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TraceOutput: __expectString,\n    });\n};\nconst de_CommandInvocationList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_CommandInvocation(entry, context);\n    });\n    return retVal;\n};\nconst de_CommandList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Command(entry, context);\n    });\n    return retVal;\n};\nconst de_CommandPlugin = (output, context) => {\n    return take(output, {\n        Name: __expectString,\n        Output: __expectString,\n        OutputS3BucketName: __expectString,\n        OutputS3KeyPrefix: __expectString,\n        OutputS3Region: __expectString,\n        ResponseCode: __expectInt32,\n        ResponseFinishDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ResponseStartDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        StandardErrorUrl: __expectString,\n        StandardOutputUrl: __expectString,\n        Status: __expectString,\n        StatusDetails: __expectString,\n    });\n};\nconst de_CommandPluginList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_CommandPlugin(entry, context);\n    });\n    return retVal;\n};\nconst de_ComplianceExecutionSummary = (output, context) => {\n    return take(output, {\n        ExecutionId: __expectString,\n        ExecutionTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionType: __expectString,\n    });\n};\nconst de_ComplianceItem = (output, context) => {\n    return take(output, {\n        ComplianceType: __expectString,\n        Details: _json,\n        ExecutionSummary: (_) => de_ComplianceExecutionSummary(_, context),\n        Id: __expectString,\n        ResourceId: __expectString,\n        ResourceType: __expectString,\n        Severity: __expectString,\n        Status: __expectString,\n        Title: __expectString,\n    });\n};\nconst de_ComplianceItemList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ComplianceItem(entry, context);\n    });\n    return retVal;\n};\nconst de_CreateAssociationBatchResult = (output, context) => {\n    return take(output, {\n        Failed: _json,\n        Successful: (_) => de_AssociationDescriptionList(_, context),\n    });\n};\nconst de_CreateAssociationResult = (output, context) => {\n    return take(output, {\n        AssociationDescription: (_) => de_AssociationDescription(_, context),\n    });\n};\nconst de_CreateDocumentResult = (output, context) => {\n    return take(output, {\n        DocumentDescription: (_) => de_DocumentDescription(_, context),\n    });\n};\nconst de_DescribeActivationsResult = (output, context) => {\n    return take(output, {\n        ActivationList: (_) => de_ActivationList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeAssociationExecutionsResult = (output, context) => {\n    return take(output, {\n        AssociationExecutions: (_) => de_AssociationExecutionsList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeAssociationExecutionTargetsResult = (output, context) => {\n    return take(output, {\n        AssociationExecutionTargets: (_) => de_AssociationExecutionTargetsList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeAssociationResult = (output, context) => {\n    return take(output, {\n        AssociationDescription: (_) => de_AssociationDescription(_, context),\n    });\n};\nconst de_DescribeAutomationExecutionsResult = (output, context) => {\n    return take(output, {\n        AutomationExecutionMetadataList: (_) => de_AutomationExecutionMetadataList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeAutomationStepExecutionsResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        StepExecutions: (_) => de_StepExecutionList(_, context),\n    });\n};\nconst de_DescribeAvailablePatchesResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Patches: (_) => de_PatchList(_, context),\n    });\n};\nconst de_DescribeDocumentResult = (output, context) => {\n    return take(output, {\n        Document: (_) => de_DocumentDescription(_, context),\n    });\n};\nconst de_DescribeEffectivePatchesForPatchBaselineResult = (output, context) => {\n    return take(output, {\n        EffectivePatches: (_) => de_EffectivePatchList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeInstanceAssociationsStatusResult = (output, context) => {\n    return take(output, {\n        InstanceAssociationStatusInfos: (_) => de_InstanceAssociationStatusInfos(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeInstanceInformationResult = (output, context) => {\n    return take(output, {\n        InstanceInformationList: (_) => de_InstanceInformationList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeInstancePatchesResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Patches: (_) => de_PatchComplianceDataList(_, context),\n    });\n};\nconst de_DescribeInstancePatchStatesForPatchGroupResult = (output, context) => {\n    return take(output, {\n        InstancePatchStates: (_) => de_InstancePatchStatesList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeInstancePatchStatesResult = (output, context) => {\n    return take(output, {\n        InstancePatchStates: (_) => de_InstancePatchStateList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeInventoryDeletionsResult = (output, context) => {\n    return take(output, {\n        InventoryDeletions: (_) => de_InventoryDeletionsList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_DescribeMaintenanceWindowExecutionsResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        WindowExecutions: (_) => de_MaintenanceWindowExecutionList(_, context),\n    });\n};\nconst de_DescribeMaintenanceWindowExecutionTaskInvocationsResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        WindowExecutionTaskInvocationIdentities: (_) => de_MaintenanceWindowExecutionTaskInvocationIdentityList(_, context),\n    });\n};\nconst de_DescribeMaintenanceWindowExecutionTasksResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        WindowExecutionTaskIdentities: (_) => de_MaintenanceWindowExecutionTaskIdentityList(_, context),\n    });\n};\nconst de_DescribeOpsItemsResponse = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        OpsItemSummaries: (_) => de_OpsItemSummaries(_, context),\n    });\n};\nconst de_DescribeParametersResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Parameters: (_) => de_ParameterMetadataList(_, context),\n    });\n};\nconst de_DescribeSessionsResponse = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Sessions: (_) => de_SessionList(_, context),\n    });\n};\nconst de_DocumentDescription = (output, context) => {\n    return take(output, {\n        ApprovedVersion: __expectString,\n        AttachmentsInformation: _json,\n        Author: __expectString,\n        Category: _json,\n        CategoryEnum: _json,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DefaultVersion: __expectString,\n        Description: __expectString,\n        DisplayName: __expectString,\n        DocumentFormat: __expectString,\n        DocumentType: __expectString,\n        DocumentVersion: __expectString,\n        Hash: __expectString,\n        HashType: __expectString,\n        LatestVersion: __expectString,\n        Name: __expectString,\n        Owner: __expectString,\n        Parameters: _json,\n        PendingReviewVersion: __expectString,\n        PlatformTypes: _json,\n        Requires: _json,\n        ReviewInformation: (_) => de_ReviewInformationList(_, context),\n        ReviewStatus: __expectString,\n        SchemaVersion: __expectString,\n        Sha1: __expectString,\n        Status: __expectString,\n        StatusInformation: __expectString,\n        Tags: _json,\n        TargetType: __expectString,\n        VersionName: __expectString,\n    });\n};\nconst de_DocumentIdentifier = (output, context) => {\n    return take(output, {\n        Author: __expectString,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DisplayName: __expectString,\n        DocumentFormat: __expectString,\n        DocumentType: __expectString,\n        DocumentVersion: __expectString,\n        Name: __expectString,\n        Owner: __expectString,\n        PlatformTypes: _json,\n        Requires: _json,\n        ReviewStatus: __expectString,\n        SchemaVersion: __expectString,\n        Tags: _json,\n        TargetType: __expectString,\n        VersionName: __expectString,\n    });\n};\nconst de_DocumentIdentifierList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_DocumentIdentifier(entry, context);\n    });\n    return retVal;\n};\nconst de_DocumentMetadataResponseInfo = (output, context) => {\n    return take(output, {\n        ReviewerResponse: (_) => de_DocumentReviewerResponseList(_, context),\n    });\n};\nconst de_DocumentReviewerResponseList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_DocumentReviewerResponseSource(entry, context);\n    });\n    return retVal;\n};\nconst de_DocumentReviewerResponseSource = (output, context) => {\n    return take(output, {\n        Comment: _json,\n        CreateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ReviewStatus: __expectString,\n        Reviewer: __expectString,\n        UpdatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n    });\n};\nconst de_DocumentVersionInfo = (output, context) => {\n    return take(output, {\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DisplayName: __expectString,\n        DocumentFormat: __expectString,\n        DocumentVersion: __expectString,\n        IsDefaultVersion: __expectBoolean,\n        Name: __expectString,\n        ReviewStatus: __expectString,\n        Status: __expectString,\n        StatusInformation: __expectString,\n        VersionName: __expectString,\n    });\n};\nconst de_DocumentVersionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_DocumentVersionInfo(entry, context);\n    });\n    return retVal;\n};\nconst de_EffectivePatch = (output, context) => {\n    return take(output, {\n        Patch: (_) => de_Patch(_, context),\n        PatchStatus: (_) => de_PatchStatus(_, context),\n    });\n};\nconst de_EffectivePatchList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_EffectivePatch(entry, context);\n    });\n    return retVal;\n};\nconst de_GetAutomationExecutionResult = (output, context) => {\n    return take(output, {\n        AutomationExecution: (_) => de_AutomationExecution(_, context),\n    });\n};\nconst de_GetDocumentResult = (output, context) => {\n    return take(output, {\n        AttachmentsContent: _json,\n        Content: __expectString,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DisplayName: __expectString,\n        DocumentFormat: __expectString,\n        DocumentType: __expectString,\n        DocumentVersion: __expectString,\n        Name: __expectString,\n        Requires: _json,\n        ReviewStatus: __expectString,\n        Status: __expectString,\n        StatusInformation: __expectString,\n        VersionName: __expectString,\n    });\n};\nconst de_GetMaintenanceWindowExecutionResult = (output, context) => {\n    return take(output, {\n        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TaskIds: _json,\n        WindowExecutionId: __expectString,\n    });\n};\nconst de_GetMaintenanceWindowExecutionTaskInvocationResult = (output, context) => {\n    return take(output, {\n        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionId: __expectString,\n        InvocationId: __expectString,\n        OwnerInformation: __expectString,\n        Parameters: __expectString,\n        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TaskExecutionId: __expectString,\n        TaskType: __expectString,\n        WindowExecutionId: __expectString,\n        WindowTargetId: __expectString,\n    });\n};\nconst de_GetMaintenanceWindowExecutionTaskResult = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Priority: __expectInt32,\n        ServiceRole: __expectString,\n        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TaskArn: __expectString,\n        TaskExecutionId: __expectString,\n        TaskParameters: _json,\n        TriggeredAlarms: _json,\n        Type: __expectString,\n        WindowExecutionId: __expectString,\n    });\n};\nconst de_GetMaintenanceWindowResult = (output, context) => {\n    return take(output, {\n        AllowUnassociatedTargets: __expectBoolean,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Cutoff: __expectInt32,\n        Description: __expectString,\n        Duration: __expectInt32,\n        Enabled: __expectBoolean,\n        EndDate: __expectString,\n        ModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Name: __expectString,\n        NextExecutionTime: __expectString,\n        Schedule: __expectString,\n        ScheduleOffset: __expectInt32,\n        ScheduleTimezone: __expectString,\n        StartDate: __expectString,\n        WindowId: __expectString,\n    });\n};\nconst de_GetMaintenanceWindowTaskResult = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        CutoffBehavior: __expectString,\n        Description: __expectString,\n        LoggingInfo: _json,\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Name: __expectString,\n        Priority: __expectInt32,\n        ServiceRoleArn: __expectString,\n        Targets: _json,\n        TaskArn: __expectString,\n        TaskInvocationParameters: (_) => de_MaintenanceWindowTaskInvocationParameters(_, context),\n        TaskParameters: _json,\n        TaskType: __expectString,\n        WindowId: __expectString,\n        WindowTaskId: __expectString,\n    });\n};\nconst de_GetOpsItemResponse = (output, context) => {\n    return take(output, {\n        OpsItem: (_) => de_OpsItem(_, context),\n    });\n};\nconst de_GetParameterHistoryResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Parameters: (_) => de_ParameterHistoryList(_, context),\n    });\n};\nconst de_GetParameterResult = (output, context) => {\n    return take(output, {\n        Parameter: (_) => de_Parameter(_, context),\n    });\n};\nconst de_GetParametersByPathResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Parameters: (_) => de_ParameterList(_, context),\n    });\n};\nconst de_GetParametersResult = (output, context) => {\n    return take(output, {\n        InvalidParameters: _json,\n        Parameters: (_) => de_ParameterList(_, context),\n    });\n};\nconst de_GetPatchBaselineResult = (output, context) => {\n    return take(output, {\n        ApprovalRules: _json,\n        ApprovedPatches: _json,\n        ApprovedPatchesComplianceLevel: __expectString,\n        ApprovedPatchesEnableNonSecurity: __expectBoolean,\n        BaselineId: __expectString,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Description: __expectString,\n        GlobalFilters: _json,\n        ModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Name: __expectString,\n        OperatingSystem: __expectString,\n        PatchGroups: _json,\n        RejectedPatches: _json,\n        RejectedPatchesAction: __expectString,\n        Sources: _json,\n    });\n};\nconst de_GetServiceSettingResult = (output, context) => {\n    return take(output, {\n        ServiceSetting: (_) => de_ServiceSetting(_, context),\n    });\n};\nconst de_InstanceAssociationStatusInfo = (output, context) => {\n    return take(output, {\n        AssociationId: __expectString,\n        AssociationName: __expectString,\n        AssociationVersion: __expectString,\n        DetailedStatus: __expectString,\n        DocumentVersion: __expectString,\n        ErrorCode: __expectString,\n        ExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionSummary: __expectString,\n        InstanceId: __expectString,\n        Name: __expectString,\n        OutputUrl: _json,\n        Status: __expectString,\n    });\n};\nconst de_InstanceAssociationStatusInfos = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_InstanceAssociationStatusInfo(entry, context);\n    });\n    return retVal;\n};\nconst de_InstanceInformation = (output, context) => {\n    return take(output, {\n        ActivationId: __expectString,\n        AgentVersion: __expectString,\n        AssociationOverview: _json,\n        AssociationStatus: __expectString,\n        ComputerName: __expectString,\n        IPAddress: __expectString,\n        IamRole: __expectString,\n        InstanceId: __expectString,\n        IsLatestVersion: __expectBoolean,\n        LastAssociationExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastPingDateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastSuccessfulAssociationExecutionDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Name: __expectString,\n        PingStatus: __expectString,\n        PlatformName: __expectString,\n        PlatformType: __expectString,\n        PlatformVersion: __expectString,\n        RegistrationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ResourceType: __expectString,\n        SourceId: __expectString,\n        SourceType: __expectString,\n    });\n};\nconst de_InstanceInformationList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_InstanceInformation(entry, context);\n    });\n    return retVal;\n};\nconst de_InstancePatchState = (output, context) => {\n    return take(output, {\n        BaselineId: __expectString,\n        CriticalNonCompliantCount: __expectInt32,\n        FailedCount: __expectInt32,\n        InstallOverrideList: __expectString,\n        InstalledCount: __expectInt32,\n        InstalledOtherCount: __expectInt32,\n        InstalledPendingRebootCount: __expectInt32,\n        InstalledRejectedCount: __expectInt32,\n        InstanceId: __expectString,\n        LastNoRebootInstallOperationTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        MissingCount: __expectInt32,\n        NotApplicableCount: __expectInt32,\n        Operation: __expectString,\n        OperationEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        OperationStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        OtherNonCompliantCount: __expectInt32,\n        OwnerInformation: __expectString,\n        PatchGroup: __expectString,\n        RebootOption: __expectString,\n        SecurityNonCompliantCount: __expectInt32,\n        SnapshotId: __expectString,\n        UnreportedNotApplicableCount: __expectInt32,\n    });\n};\nconst de_InstancePatchStateList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_InstancePatchState(entry, context);\n    });\n    return retVal;\n};\nconst de_InstancePatchStatesList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_InstancePatchState(entry, context);\n    });\n    return retVal;\n};\nconst de_InventoryDeletionsList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_InventoryDeletionStatusItem(entry, context);\n    });\n    return retVal;\n};\nconst de_InventoryDeletionStatusItem = (output, context) => {\n    return take(output, {\n        DeletionId: __expectString,\n        DeletionStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        DeletionSummary: _json,\n        LastStatus: __expectString,\n        LastStatusMessage: __expectString,\n        LastStatusUpdateTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        TypeName: __expectString,\n    });\n};\nconst de_ListAssociationsResult = (output, context) => {\n    return take(output, {\n        Associations: (_) => de_AssociationList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListAssociationVersionsResult = (output, context) => {\n    return take(output, {\n        AssociationVersions: (_) => de_AssociationVersionList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListCommandInvocationsResult = (output, context) => {\n    return take(output, {\n        CommandInvocations: (_) => de_CommandInvocationList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListCommandsResult = (output, context) => {\n    return take(output, {\n        Commands: (_) => de_CommandList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListComplianceItemsResult = (output, context) => {\n    return take(output, {\n        ComplianceItems: (_) => de_ComplianceItemList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListDocumentMetadataHistoryResponse = (output, context) => {\n    return take(output, {\n        Author: __expectString,\n        DocumentVersion: __expectString,\n        Metadata: (_) => de_DocumentMetadataResponseInfo(_, context),\n        Name: __expectString,\n        NextToken: __expectString,\n    });\n};\nconst de_ListDocumentsResult = (output, context) => {\n    return take(output, {\n        DocumentIdentifiers: (_) => de_DocumentIdentifierList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListDocumentVersionsResult = (output, context) => {\n    return take(output, {\n        DocumentVersions: (_) => de_DocumentVersionList(_, context),\n        NextToken: __expectString,\n    });\n};\nconst de_ListOpsItemEventsResponse = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Summaries: (_) => de_OpsItemEventSummaries(_, context),\n    });\n};\nconst de_ListOpsItemRelatedItemsResponse = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        Summaries: (_) => de_OpsItemRelatedItemSummaries(_, context),\n    });\n};\nconst de_ListOpsMetadataResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        OpsMetadataList: (_) => de_OpsMetadataList(_, context),\n    });\n};\nconst de_ListResourceComplianceSummariesResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        ResourceComplianceSummaryItems: (_) => de_ResourceComplianceSummaryItemList(_, context),\n    });\n};\nconst de_ListResourceDataSyncResult = (output, context) => {\n    return take(output, {\n        NextToken: __expectString,\n        ResourceDataSyncItems: (_) => de_ResourceDataSyncItemList(_, context),\n    });\n};\nconst de_MaintenanceWindowExecution = (output, context) => {\n    return take(output, {\n        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        StatusDetails: __expectString,\n        WindowExecutionId: __expectString,\n        WindowId: __expectString,\n    });\n};\nconst de_MaintenanceWindowExecutionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MaintenanceWindowExecution(entry, context);\n    });\n    return retVal;\n};\nconst de_MaintenanceWindowExecutionTaskIdentity = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TaskArn: __expectString,\n        TaskExecutionId: __expectString,\n        TaskType: __expectString,\n        TriggeredAlarms: _json,\n        WindowExecutionId: __expectString,\n    });\n};\nconst de_MaintenanceWindowExecutionTaskIdentityList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MaintenanceWindowExecutionTaskIdentity(entry, context);\n    });\n    return retVal;\n};\nconst de_MaintenanceWindowExecutionTaskInvocationIdentity = (output, context) => {\n    return take(output, {\n        EndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionId: __expectString,\n        InvocationId: __expectString,\n        OwnerInformation: __expectString,\n        Parameters: __expectString,\n        StartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        StatusDetails: __expectString,\n        TaskExecutionId: __expectString,\n        TaskType: __expectString,\n        WindowExecutionId: __expectString,\n        WindowTargetId: __expectString,\n    });\n};\nconst de_MaintenanceWindowExecutionTaskInvocationIdentityList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MaintenanceWindowExecutionTaskInvocationIdentity(entry, context);\n    });\n    return retVal;\n};\nconst de_MaintenanceWindowLambdaParameters = (output, context) => {\n    return take(output, {\n        ClientContext: __expectString,\n        Payload: context.base64Decoder,\n        Qualifier: __expectString,\n    });\n};\nconst de_MaintenanceWindowTaskInvocationParameters = (output, context) => {\n    return take(output, {\n        Automation: _json,\n        Lambda: (_) => de_MaintenanceWindowLambdaParameters(_, context),\n        RunCommand: _json,\n        StepFunctions: _json,\n    });\n};\nconst de_OpsItem = (output, context) => {\n    return take(output, {\n        ActualEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ActualStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Category: __expectString,\n        CreatedBy: __expectString,\n        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Description: __expectString,\n        LastModifiedBy: __expectString,\n        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Notifications: _json,\n        OperationalData: _json,\n        OpsItemArn: __expectString,\n        OpsItemId: __expectString,\n        OpsItemType: __expectString,\n        PlannedEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        PlannedStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Priority: __expectInt32,\n        RelatedOpsItems: _json,\n        Severity: __expectString,\n        Source: __expectString,\n        Status: __expectString,\n        Title: __expectString,\n        Version: __expectString,\n    });\n};\nconst de_OpsItemEventSummaries = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_OpsItemEventSummary(entry, context);\n    });\n    return retVal;\n};\nconst de_OpsItemEventSummary = (output, context) => {\n    return take(output, {\n        CreatedBy: _json,\n        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Detail: __expectString,\n        DetailType: __expectString,\n        EventId: __expectString,\n        OpsItemId: __expectString,\n        Source: __expectString,\n    });\n};\nconst de_OpsItemRelatedItemSummaries = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_OpsItemRelatedItemSummary(entry, context);\n    });\n    return retVal;\n};\nconst de_OpsItemRelatedItemSummary = (output, context) => {\n    return take(output, {\n        AssociationId: __expectString,\n        AssociationType: __expectString,\n        CreatedBy: _json,\n        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedBy: _json,\n        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        OpsItemId: __expectString,\n        ResourceType: __expectString,\n        ResourceUri: __expectString,\n    });\n};\nconst de_OpsItemSummaries = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_OpsItemSummary(entry, context);\n    });\n    return retVal;\n};\nconst de_OpsItemSummary = (output, context) => {\n    return take(output, {\n        ActualEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ActualStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Category: __expectString,\n        CreatedBy: __expectString,\n        CreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedBy: __expectString,\n        LastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        OperationalData: _json,\n        OpsItemId: __expectString,\n        OpsItemType: __expectString,\n        PlannedEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        PlannedStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Priority: __expectInt32,\n        Severity: __expectString,\n        Source: __expectString,\n        Status: __expectString,\n        Title: __expectString,\n    });\n};\nconst de_OpsMetadata = (output, context) => {\n    return take(output, {\n        CreationDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedUser: __expectString,\n        OpsMetadataArn: __expectString,\n        ResourceId: __expectString,\n    });\n};\nconst de_OpsMetadataList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_OpsMetadata(entry, context);\n    });\n    return retVal;\n};\nconst de_Parameter = (output, context) => {\n    return take(output, {\n        ARN: __expectString,\n        DataType: __expectString,\n        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Name: __expectString,\n        Selector: __expectString,\n        SourceResult: __expectString,\n        Type: __expectString,\n        Value: __expectString,\n        Version: __expectLong,\n    });\n};\nconst de_ParameterHistory = (output, context) => {\n    return take(output, {\n        AllowedPattern: __expectString,\n        DataType: __expectString,\n        Description: __expectString,\n        KeyId: __expectString,\n        Labels: _json,\n        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedUser: __expectString,\n        Name: __expectString,\n        Policies: _json,\n        Tier: __expectString,\n        Type: __expectString,\n        Value: __expectString,\n        Version: __expectLong,\n    });\n};\nconst de_ParameterHistoryList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ParameterHistory(entry, context);\n    });\n    return retVal;\n};\nconst de_ParameterList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Parameter(entry, context);\n    });\n    return retVal;\n};\nconst de_ParameterMetadata = (output, context) => {\n    return take(output, {\n        AllowedPattern: __expectString,\n        DataType: __expectString,\n        Description: __expectString,\n        KeyId: __expectString,\n        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedUser: __expectString,\n        Name: __expectString,\n        Policies: _json,\n        Tier: __expectString,\n        Type: __expectString,\n        Version: __expectLong,\n    });\n};\nconst de_ParameterMetadataList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ParameterMetadata(entry, context);\n    });\n    return retVal;\n};\nconst de_Patch = (output, context) => {\n    return take(output, {\n        AdvisoryIds: _json,\n        Arch: __expectString,\n        BugzillaIds: _json,\n        CVEIds: _json,\n        Classification: __expectString,\n        ContentUrl: __expectString,\n        Description: __expectString,\n        Epoch: __expectInt32,\n        Id: __expectString,\n        KbNumber: __expectString,\n        Language: __expectString,\n        MsrcNumber: __expectString,\n        MsrcSeverity: __expectString,\n        Name: __expectString,\n        Product: __expectString,\n        ProductFamily: __expectString,\n        Release: __expectString,\n        ReleaseDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Repository: __expectString,\n        Severity: __expectString,\n        Title: __expectString,\n        Vendor: __expectString,\n        Version: __expectString,\n    });\n};\nconst de_PatchComplianceData = (output, context) => {\n    return take(output, {\n        CVEIds: __expectString,\n        Classification: __expectString,\n        InstalledTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        KBId: __expectString,\n        Severity: __expectString,\n        State: __expectString,\n        Title: __expectString,\n    });\n};\nconst de_PatchComplianceDataList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_PatchComplianceData(entry, context);\n    });\n    return retVal;\n};\nconst de_PatchList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Patch(entry, context);\n    });\n    return retVal;\n};\nconst de_PatchStatus = (output, context) => {\n    return take(output, {\n        ApprovalDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ComplianceLevel: __expectString,\n        DeploymentStatus: __expectString,\n    });\n};\nconst de_ResetServiceSettingResult = (output, context) => {\n    return take(output, {\n        ServiceSetting: (_) => de_ServiceSetting(_, context),\n    });\n};\nconst de_ResourceComplianceSummaryItem = (output, context) => {\n    return take(output, {\n        ComplianceType: __expectString,\n        CompliantSummary: _json,\n        ExecutionSummary: (_) => de_ComplianceExecutionSummary(_, context),\n        NonCompliantSummary: _json,\n        OverallSeverity: __expectString,\n        ResourceId: __expectString,\n        ResourceType: __expectString,\n        Status: __expectString,\n    });\n};\nconst de_ResourceComplianceSummaryItemList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ResourceComplianceSummaryItem(entry, context);\n    });\n    return retVal;\n};\nconst de_ResourceDataSyncItem = (output, context) => {\n    return take(output, {\n        LastStatus: __expectString,\n        LastSuccessfulSyncTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastSyncStatusMessage: __expectString,\n        LastSyncTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        S3Destination: _json,\n        SyncCreatedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        SyncLastModifiedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        SyncName: __expectString,\n        SyncSource: _json,\n        SyncType: __expectString,\n    });\n};\nconst de_ResourceDataSyncItemList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ResourceDataSyncItem(entry, context);\n    });\n    return retVal;\n};\nconst de_ReviewInformation = (output, context) => {\n    return take(output, {\n        ReviewedTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Reviewer: __expectString,\n        Status: __expectString,\n    });\n};\nconst de_ReviewInformationList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_ReviewInformation(entry, context);\n    });\n    return retVal;\n};\nconst de_SendCommandResult = (output, context) => {\n    return take(output, {\n        Command: (_) => de_Command(_, context),\n    });\n};\nconst de_ServiceSetting = (output, context) => {\n    return take(output, {\n        ARN: __expectString,\n        LastModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        LastModifiedUser: __expectString,\n        SettingId: __expectString,\n        SettingValue: __expectString,\n        Status: __expectString,\n    });\n};\nconst de_Session = (output, context) => {\n    return take(output, {\n        Details: __expectString,\n        DocumentName: __expectString,\n        EndDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        MaxSessionDuration: __expectString,\n        OutputUrl: _json,\n        Owner: __expectString,\n        Reason: __expectString,\n        SessionId: __expectString,\n        StartDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Status: __expectString,\n        Target: __expectString,\n    });\n};\nconst de_SessionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_Session(entry, context);\n    });\n    return retVal;\n};\nconst de_StepExecution = (output, context) => {\n    return take(output, {\n        Action: __expectString,\n        ExecutionEndTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        ExecutionStartTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        FailureDetails: _json,\n        FailureMessage: __expectString,\n        Inputs: _json,\n        IsCritical: __expectBoolean,\n        IsEnd: __expectBoolean,\n        MaxAttempts: __expectInt32,\n        NextStep: __expectString,\n        OnFailure: __expectString,\n        Outputs: _json,\n        OverriddenParameters: _json,\n        Response: __expectString,\n        ResponseCode: __expectString,\n        StepExecutionId: __expectString,\n        StepName: __expectString,\n        StepStatus: __expectString,\n        TargetLocation: _json,\n        Targets: _json,\n        TimeoutSeconds: __expectLong,\n        TriggeredAlarms: _json,\n        ValidNextSteps: _json,\n    });\n};\nconst de_StepExecutionList = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_StepExecution(entry, context);\n    });\n    return retVal;\n};\nconst de_UpdateAssociationResult = (output, context) => {\n    return take(output, {\n        AssociationDescription: (_) => de_AssociationDescription(_, context),\n    });\n};\nconst de_UpdateAssociationStatusResult = (output, context) => {\n    return take(output, {\n        AssociationDescription: (_) => de_AssociationDescription(_, context),\n    });\n};\nconst de_UpdateDocumentResult = (output, context) => {\n    return take(output, {\n        DocumentDescription: (_) => de_DocumentDescription(_, context),\n    });\n};\nconst de_UpdateMaintenanceWindowTaskResult = (output, context) => {\n    return take(output, {\n        AlarmConfiguration: _json,\n        CutoffBehavior: __expectString,\n        Description: __expectString,\n        LoggingInfo: _json,\n        MaxConcurrency: __expectString,\n        MaxErrors: __expectString,\n        Name: __expectString,\n        Priority: __expectInt32,\n        ServiceRoleArn: __expectString,\n        Targets: _json,\n        TaskArn: __expectString,\n        TaskInvocationParameters: (_) => de_MaintenanceWindowTaskInvocationParameters(_, context),\n        TaskParameters: _json,\n        WindowId: __expectString,\n        WindowTaskId: __expectString,\n    });\n};\nconst de_UpdatePatchBaselineResult = (output, context) => {\n    return take(output, {\n        ApprovalRules: _json,\n        ApprovedPatches: _json,\n        ApprovedPatchesComplianceLevel: __expectString,\n        ApprovedPatchesEnableNonSecurity: __expectBoolean,\n        BaselineId: __expectString,\n        CreatedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Description: __expectString,\n        GlobalFilters: _json,\n        ModifiedDate: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),\n        Name: __expectString,\n        OperatingSystem: __expectString,\n        RejectedPatches: _json,\n        RejectedPatchesAction: __expectString,\n        Sources: _json,\n    });\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst throwDefaultError = withBaseException(__BaseException);\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const contents = {\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n        headers,\n    };\n    if (resolvedHostname !== undefined) {\n        contents.hostname = resolvedHostname;\n    }\n    if (body !== undefined) {\n        contents.body = body;\n    }\n    return new __HttpRequest(contents);\n};\nfunction sharedHeaders(operation) {\n    return {\n        \"content-type\": \"application/x-amz-json-1.1\",\n        \"x-amz-target\": `AmazonSSM.${operation}`,\n    };\n}\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        return JSON.parse(encoded);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    value.message = value.message ?? value.Message;\n    return value;\n};\nconst loadRestJsonErrorCode = (output, data) => {\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n    const sanitizeErrorCode = (rawValue) => {\n        let cleanValue = rawValue;\n        if (typeof cleanValue === \"number\") {\n            cleanValue = cleanValue.toString();\n        }\n        if (cleanValue.indexOf(\",\") >= 0) {\n            cleanValue = cleanValue.split(\",\")[0];\n        }\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data.code !== undefined) {\n        return sanitizeErrorCode(data.code);\n    }\n    if (data[\"__type\"] !== undefined) {\n        return sanitizeErrorCode(data[\"__type\"]);\n    }\n};\n", "import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { de_DescribeInstanceInformationCommand, se_DescribeInstanceInformationCommand } from \"../protocols/Aws_json1_1\";\nexport class DescribeInstanceInformationCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, DescribeInstanceInformationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSMClient\";\n        const commandName = \"DescribeInstanceInformationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (_) => _,\n            outputFilterSensitiveLog: (_) => _,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_DescribeInstanceInformationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_DescribeInstanceInformationCommand(output, context);\n    }\n}\n", "import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { de_GetCommandInvocationCommand, se_GetCommandInvocationCommand } from \"../protocols/Aws_json1_1\";\nexport class GetCommandInvocationCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, GetCommandInvocationCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSMClient\";\n        const commandName = \"GetCommandInvocationCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (_) => _,\n            outputFilterSensitiveLog: (_) => _,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_GetCommandInvocationCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_GetCommandInvocationCommand(output, context);\n    }\n}\n", "import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { SendCommandRequestFilterSensitiveLog, SendCommandResultFilterSensitiveLog, } from \"../models/models_1\";\nimport { de_SendCommandCommand, se_SendCommandCommand } from \"../protocols/Aws_json1_1\";\nexport class SendCommandCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, SendCommandCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSMClient\";\n        const commandName = \"SendCommandCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: SendCommandRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: SendCommandResultFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_SendCommandCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_SendCommandCommand(output, context);\n    }\n}\n", "export var SelectorType;\n(function (SelectorType) {\n    SelectorType[\"ENV\"] = \"env\";\n    SelectorType[\"CONFIG\"] = \"shared config entry\";\n})(SelectorType || (SelectorType = {}));\nexport const booleanSelector = (obj, key, type) => {\n    if (!(key in obj))\n        return undefined;\n    if (obj[key] === \"true\")\n        return true;\n    if (obj[key] === \"false\")\n        return false;\n    throw new Error(`Cannot load ${type} \"${key}\". Expected \"true\" or \"false\", got ${obj[key]}.`);\n};\n", "import { booleanSelector, SelectorType } from \"@aws-sdk/util-config-provider\";\nexport const ENV_USE_DUALSTACK_ENDPOINT = \"AWS_USE_DUALSTACK_ENDPOINT\";\nexport const CONFIG_USE_DUALSTACK_ENDPOINT = \"use_dualstack_endpoint\";\nexport const DEFAULT_USE_DUALSTACK_ENDPOINT = false;\nexport const NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => booleanSelector(env, ENV_USE_DUALSTACK_ENDPOINT, SelectorType.ENV),\n    configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_DUALSTACK_ENDPOINT, SelectorType.CONFIG),\n    default: false,\n};\n", "import { booleanSelector, SelectorType } from \"@aws-sdk/util-config-provider\";\nexport const ENV_USE_FIPS_ENDPOINT = \"AWS_USE_FIPS_ENDPOINT\";\nexport const CONFIG_USE_FIPS_ENDPOINT = \"use_fips_endpoint\";\nexport const DEFAULT_USE_FIPS_ENDPOINT = false;\nexport const NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => booleanSelector(env, ENV_USE_FIPS_ENDPOINT, SelectorType.ENV),\n    configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_FIPS_ENDPOINT, SelectorType.CONFIG),\n    default: false,\n};\n", "export const REGION_ENV_NAME = \"AWS_REGION\";\nexport const REGION_INI_NAME = \"region\";\nexport const NODE_REGION_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[REGION_ENV_NAME],\n    configFileSelector: (profile) => profile[REGION_INI_NAME],\n    default: () => {\n        throw new Error(\"Region is missing\");\n    },\n};\nexport const NODE_REGION_CONFIG_FILE_OPTIONS = {\n    preferredFile: \"credentials\",\n};\n", "export const isFipsRegion = (region) => typeof region === \"string\" && (region.startsWith(\"fips-\") || region.endsWith(\"-fips\"));\n", "import { isFipsRegion } from \"./isFipsRegion\";\nexport const getRealRegion = (region) => isFipsRegion(region)\n    ? [\"fips-aws-global\", \"aws-fips\"].includes(region)\n        ? \"us-east-1\"\n        : region.replace(/fips-(dkr-|prod-)?|-fips/, \"\")\n    : region;\n", "import { getRealRegion } from \"./getRealRegion\";\nimport { isFipsRegion } from \"./isFipsRegion\";\nexport const resolveRegionConfig = (input) => {\n    const { region, useFipsEndpoint } = input;\n    if (!region) {\n        throw new Error(\"Region is missing\");\n    }\n    return {\n        ...input,\n        region: async () => {\n            if (typeof region === \"string\") {\n                return getRealRegion(region);\n            }\n            const providedRegion = await region();\n            return getRealRegion(providedRegion);\n        },\n        useFipsEndpoint: async () => {\n            const providedRegion = typeof region === \"string\" ? region : await region();\n            if (isFipsRegion(providedRegion)) {\n                return true;\n            }\n            return typeof useFipsEndpoint !== \"function\" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();\n        },\n    };\n};\n", "import { HttpRequest } from \"@aws-sdk/protocol-http\";\nconst CONTENT_LENGTH_HEADER = \"content-length\";\nexport function contentLengthMiddleware(bodyLengthChecker) {\n    return (next) => async (args) => {\n        const request = args.request;\n        if (HttpRequest.isInstance(request)) {\n            const { body, headers } = request;\n            if (body &&\n                Object.keys(headers)\n                    .map((str) => str.toLowerCase())\n                    .indexOf(CONTENT_LENGTH_HEADER) === -1) {\n                try {\n                    const length = bodyLengthChecker(body);\n                    request.headers = {\n                        ...request.headers,\n                        [CONTENT_LENGTH_HEADER]: String(length),\n                    };\n                }\n                catch (error) {\n                }\n            }\n        }\n        return next({\n            ...args,\n            request,\n        });\n    };\n}\nexport const contentLengthMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"SET_CONTENT_LENGTH\", \"CONTENT_LENGTH\"],\n    name: \"contentLengthMiddleware\",\n    override: true,\n};\nexport const getContentLengthPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);\n    },\n});\n", "import { HttpRequest } from \"@aws-sdk/protocol-http\";\nexport function resolveHostHeaderConfig(input) {\n    return input;\n}\nexport const hostHeaderMiddleware = (options) => (next) => async (args) => {\n    if (!HttpRequest.isInstance(args.request))\n        return next(args);\n    const { request } = args;\n    const { handlerProtocol = \"\" } = options.requestHandler.metadata || {};\n    if (handlerProtocol.indexOf(\"h2\") >= 0 && !request.headers[\":authority\"]) {\n        delete request.headers[\"host\"];\n        request.headers[\":authority\"] = \"\";\n    }\n    else if (!request.headers[\"host\"]) {\n        let host = request.hostname;\n        if (request.port != null)\n            host += `:${request.port}`;\n        request.headers[\"host\"] = host;\n    }\n    return next(args);\n};\nexport const hostHeaderMiddlewareOptions = {\n    name: \"hostHeaderMiddleware\",\n    step: \"build\",\n    priority: \"low\",\n    tags: [\"HOST\"],\n    override: true,\n};\nexport const getHostHeaderPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);\n    },\n});\n", "export const loggerMiddleware = () => (next, context) => async (args) => {\n    try {\n        const response = await next(args);\n        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;\n        const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;\n        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n        const outputFilterSensitiveLog = overrideOutputFilterSensitiveLog ?? context.outputFilterSensitiveLog;\n        const { $metadata, ...outputWithoutMetadata } = response.output;\n        logger?.info?.({\n            clientName,\n            commandName,\n            input: inputFilterSensitiveLog(args.input),\n            output: outputFilterSensitiveLog(outputWithoutMetadata),\n            metadata: $metadata,\n        });\n        return response;\n    }\n    catch (error) {\n        const { clientName, commandName, logger, dynamoDbDocumentClientOptions = {} } = context;\n        const { overrideInputFilterSensitiveLog } = dynamoDbDocumentClientOptions;\n        const inputFilterSensitiveLog = overrideInputFilterSensitiveLog ?? context.inputFilterSensitiveLog;\n        logger?.error?.({\n            clientName,\n            commandName,\n            input: inputFilterSensitiveLog(args.input),\n            error,\n            metadata: error.$metadata,\n        });\n        throw error;\n    }\n};\nexport const loggerMiddlewareOptions = {\n    name: \"loggerMiddleware\",\n    tags: [\"LOGGER\"],\n    step: \"initialize\",\n    override: true,\n};\nexport const getLoggerPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    },\n});\n", "import { HttpRequest } from \"@aws-sdk/protocol-http\";\nconst TRACE_ID_HEADER_NAME = \"X-Amzn-Trace-Id\";\nconst ENV_LAMBDA_FUNCTION_NAME = \"AWS_LAMBDA_FUNCTION_NAME\";\nconst ENV_TRACE_ID = \"_X_AMZN_TRACE_ID\";\nexport const recursionDetectionMiddleware = (options) => (next) => async (args) => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request) ||\n        options.runtime !== \"node\" ||\n        request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {\n        return next(args);\n    }\n    const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];\n    const traceId = process.env[ENV_TRACE_ID];\n    const nonEmptyString = (str) => typeof str === \"string\" && str.length > 0;\n    if (nonEmptyString(functionName) && nonEmptyString(traceId)) {\n        request.headers[TRACE_ID_HEADER_NAME] = traceId;\n    }\n    return next({\n        ...args,\n        request,\n    });\n};\nexport const addRecursionDetectionMiddlewareOptions = {\n    step: \"build\",\n    tags: [\"RECURSION_DETECTION\"],\n    name: \"recursionDetectionMiddleware\",\n    override: true,\n    priority: \"low\",\n};\nexport const getRecursionDetectionPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);\n    },\n});\n", "export var RETRY_MODES;\n(function (RETRY_MODES) {\n    RETRY_MODES[\"STANDARD\"] = \"standard\";\n    RETRY_MODES[\"ADAPTIVE\"] = \"adaptive\";\n})(RETRY_MODES || (RETRY_MODES = {}));\nexport const DEFAULT_MAX_ATTEMPTS = 3;\nexport const DEFAULT_RETRY_MODE = \"STANDARD\";\n", "export const CLOCK_SKEW_ERROR_CODES = [\n    \"AuthFailure\",\n    \"InvalidSignatureException\",\n    \"RequestExpired\",\n    \"RequestInTheFuture\",\n    \"RequestTimeTooSkewed\",\n    \"SignatureDoesNotMatch\",\n];\nexport const THROTTLING_ERROR_CODES = [\n    \"BandwidthLimitExceeded\",\n    \"EC2ThrottledException\",\n    \"LimitExceededException\",\n    \"PriorRequestNotComplete\",\n    \"ProvisionedThroughputExceededException\",\n    \"RequestLimitExceeded\",\n    \"RequestThrottled\",\n    \"RequestThrottledException\",\n    \"SlowDown\",\n    \"ThrottledException\",\n    \"Throttling\",\n    \"ThrottlingException\",\n    \"TooManyRequestsException\",\n    \"TransactionInProgressException\",\n];\nexport const TRANSIENT_ERROR_CODES = [\"AbortError\", \"TimeoutError\", \"RequestTimeout\", \"RequestTimeoutException\"];\nexport const TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];\nexport const NODEJS_TIMEOUT_ERROR_CODES = [\"ECONNRESET\", \"EPIPE\", \"ETIMEDOUT\"];\n", "import { CLOCK_SKEW_ERROR_CODES, NODEJS_TIMEOUT_ERROR_CODES, THROTTLING_ERROR_CODES, TRANSIENT_ERROR_CODES, TRANSIENT_ERROR_STATUS_CODES, } from \"./constants\";\nexport const isRetryableByTrait = (error) => error.$retryable !== undefined;\nexport const isClockSkewError = (error) => CLOCK_SKEW_ERROR_CODES.includes(error.name);\nexport const isThrottlingError = (error) => error.$metadata?.httpStatusCode === 429 ||\n    THROTTLING_ERROR_CODES.includes(error.name) ||\n    error.$retryable?.throttling == true;\nexport const isTransientError = (error) => TRANSIENT_ERROR_CODES.includes(error.name) ||\n    NODEJS_TIMEOUT_ERROR_CODES.includes(error?.code || \"\") ||\n    TRANSIENT_ERROR_STATUS_CODES.includes(error.$metadata?.httpStatusCode || 0);\nexport const isServerError = (error) => {\n    if (error.$metadata?.httpStatusCode !== undefined) {\n        const statusCode = error.$metadata.httpStatusCode;\n        if (500 <= statusCode && statusCode <= 599 && !isTransientError(error)) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n};\n", "import { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nexport class DefaultRateLimiter {\n    constructor(options) {\n        this.currentCapacity = 0;\n        this.enabled = false;\n        this.lastMaxRate = 0;\n        this.measuredTxRate = 0;\n        this.requestCount = 0;\n        this.lastTimestamp = 0;\n        this.timeWindow = 0;\n        this.beta = options?.beta ?? 0.7;\n        this.minCapacity = options?.minCapacity ?? 1;\n        this.minFillRate = options?.minFillRate ?? 0.5;\n        this.scaleConstant = options?.scaleConstant ?? 0.4;\n        this.smooth = options?.smooth ?? 0.8;\n        const currentTimeInSeconds = this.getCurrentTimeInSeconds();\n        this.lastThrottleTime = currentTimeInSeconds;\n        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());\n        this.fillRate = this.minFillRate;\n        this.maxCapacity = this.minCapacity;\n    }\n    getCurrentTimeInSeconds() {\n        return Date.now() / 1000;\n    }\n    async getSendToken() {\n        return this.acquireTokenBucket(1);\n    }\n    async acquireTokenBucket(amount) {\n        if (!this.enabled) {\n            return;\n        }\n        this.refillTokenBucket();\n        if (amount > this.currentCapacity) {\n            const delay = ((amount - this.currentCapacity) / this.fillRate) * 1000;\n            await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n        this.currentCapacity = this.currentCapacity - amount;\n    }\n    refillTokenBucket() {\n        const timestamp = this.getCurrentTimeInSeconds();\n        if (!this.lastTimestamp) {\n            this.lastTimestamp = timestamp;\n            return;\n        }\n        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;\n        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);\n        this.lastTimestamp = timestamp;\n    }\n    updateClientSendingRate(response) {\n        let calculatedRate;\n        this.updateMeasuredRate();\n        if (isThrottlingError(response)) {\n            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);\n            this.lastMaxRate = rateToUse;\n            this.calculateTimeWindow();\n            this.lastThrottleTime = this.getCurrentTimeInSeconds();\n            calculatedRate = this.cubicThrottle(rateToUse);\n            this.enableTokenBucket();\n        }\n        else {\n            this.calculateTimeWindow();\n            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());\n        }\n        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);\n        this.updateTokenBucketRate(newRate);\n    }\n    calculateTimeWindow() {\n        this.timeWindow = this.getPrecise(Math.pow((this.lastMaxRate * (1 - this.beta)) / this.scaleConstant, 1 / 3));\n    }\n    cubicThrottle(rateToUse) {\n        return this.getPrecise(rateToUse * this.beta);\n    }\n    cubicSuccess(timestamp) {\n        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);\n    }\n    enableTokenBucket() {\n        this.enabled = true;\n    }\n    updateTokenBucketRate(newRate) {\n        this.refillTokenBucket();\n        this.fillRate = Math.max(newRate, this.minFillRate);\n        this.maxCapacity = Math.max(newRate, this.minCapacity);\n        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);\n    }\n    updateMeasuredRate() {\n        const t = this.getCurrentTimeInSeconds();\n        const timeBucket = Math.floor(t * 2) / 2;\n        this.requestCount++;\n        if (timeBucket > this.lastTxRateBucket) {\n            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);\n            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));\n            this.requestCount = 0;\n            this.lastTxRateBucket = timeBucket;\n        }\n    }\n    getPrecise(num) {\n        return parseFloat(num.toFixed(8));\n    }\n}\n", "export const DEFAULT_RETRY_DELAY_BASE = 100;\nexport const MAXIMUM_RETRY_DELAY = 20 * 1000;\nexport const THROTTLING_RETRY_DELAY_BASE = 500;\nexport const INITIAL_RETRY_TOKENS = 500;\nexport const RETRY_COST = 5;\nexport const TIMEOUT_RETRY_COST = 10;\nexport const NO_RETRY_INCREMENT = 1;\nexport const INVOCATION_ID_HEADER = \"amz-sdk-invocation-id\";\nexport const REQUEST_HEADER = \"amz-sdk-request\";\n", "import { DEFAULT_RETRY_DELAY_BASE, MAXIMUM_RETRY_DELAY } from \"./constants\";\nexport const getDefaultRetryBackoffStrategy = () => {\n    let delayBase = DEFAULT_RETRY_DELAY_BASE;\n    const computeNextBackoffDelay = (attempts) => {\n        return Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));\n    };\n    const setDelayBase = (delay) => {\n        delayBase = delay;\n    };\n    return {\n        computeNextBackoffDelay,\n        setDelayBase,\n    };\n};\n", "import { DEFAULT_RETRY_DELAY_BASE, MAXIMUM_RETRY_DELAY, NO_RETRY_INCREMENT, RETRY_COST, THROTTLING_RETRY_DELAY_BASE, TIMEOUT_RETRY_COST, } from \"./constants\";\nimport { getDefaultRetryBackoffStrategy } from \"./defaultRetryBackoffStrategy\";\nexport const getDefaultRetryToken = (initialRetryTokens, initialRetryDelay, initialRetryCount, options) => {\n    const MAX_CAPACITY = initialRetryTokens;\n    const retryCost = options?.retryCost ?? RETRY_COST;\n    const timeoutRetryCost = options?.timeoutRetryCost ?? TIMEOUT_RETRY_COST;\n    const retryBackoffStrategy = options?.retryBackoffStrategy ?? getDefaultRetryBackoffStrategy();\n    let availableCapacity = initialRetryTokens;\n    let retryDelay = Math.min(MAXIMUM_RETRY_DELAY, initialRetryDelay);\n    let lastRetryCost = undefined;\n    let retryCount = initialRetryCount ?? 0;\n    const getCapacityAmount = (errorType) => (errorType === \"TRANSIENT\" ? timeoutRetryCost : retryCost);\n    const getRetryCount = () => retryCount;\n    const getRetryDelay = () => retryDelay;\n    const getLastRetryCost = () => lastRetryCost;\n    const hasRetryTokens = (errorType) => getCapacityAmount(errorType) <= availableCapacity;\n    const getRetryTokenCount = (errorInfo) => {\n        const errorType = errorInfo.errorType;\n        if (!hasRetryTokens(errorType)) {\n            throw new Error(\"No retry token available\");\n        }\n        const capacityAmount = getCapacityAmount(errorType);\n        const delayBase = errorType === \"THROTTLING\" ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE;\n        retryBackoffStrategy.setDelayBase(delayBase);\n        const delayFromErrorType = retryBackoffStrategy.computeNextBackoffDelay(retryCount);\n        if (errorInfo.retryAfterHint) {\n            const delayFromRetryAfterHint = errorInfo.retryAfterHint.getTime() - Date.now();\n            retryDelay = Math.max(delayFromRetryAfterHint || 0, delayFromErrorType);\n        }\n        else {\n            retryDelay = delayFromErrorType;\n        }\n        retryCount++;\n        lastRetryCost = capacityAmount;\n        availableCapacity -= capacityAmount;\n        return capacityAmount;\n    };\n    const releaseRetryTokens = (releaseAmount) => {\n        availableCapacity += releaseAmount ?? NO_RETRY_INCREMENT;\n        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n    };\n    return {\n        getRetryCount,\n        getRetryDelay,\n        getLastRetryCost,\n        hasRetryTokens,\n        getRetryTokenCount,\n        releaseRetryTokens,\n    };\n};\n", "import { DEFAULT_MAX_ATTEMPTS, RETRY_MODES } from \"./config\";\nimport { DEFAULT_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS } from \"./constants\";\nimport { getDefaultRetryToken } from \"./defaultRetryToken\";\nexport class StandardRetryStrategy {\n    constructor(maxAttemptsProvider) {\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = RETRY_MODES.STANDARD;\n        this.retryToken = getDefaultRetryToken(INITIAL_RETRY_TOKENS, DEFAULT_RETRY_DELAY_BASE);\n        this.maxAttemptsProvider = maxAttemptsProvider;\n    }\n    async acquireInitialRetryToken(retryTokenScope) {\n        return this.retryToken;\n    }\n    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n        const maxAttempts = await this.getMaxAttempts();\n        if (this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {\n            tokenToRenew.getRetryTokenCount(errorInfo);\n            return tokenToRenew;\n        }\n        throw new Error(\"No retry token available\");\n    }\n    recordSuccess(token) {\n        this.retryToken.releaseRetryTokens(token.getLastRetryCost());\n    }\n    async getMaxAttempts() {\n        let maxAttempts;\n        try {\n            return await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);\n            return DEFAULT_MAX_ATTEMPTS;\n        }\n    }\n    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {\n        const attempts = tokenToRenew.getRetryCount();\n        return (attempts < maxAttempts &&\n            tokenToRenew.hasRetryTokens(errorInfo.errorType) &&\n            this.isRetryableError(errorInfo.errorType));\n    }\n    isRetryableError(errorType) {\n        return errorType === \"THROTTLING\" || errorType === \"TRANSIENT\";\n    }\n}\n", "import { RETRY_MODES } from \"./config\";\nimport { DefaultRateLimiter } from \"./DefaultRateLimiter\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\nexport class AdaptiveRetryStrategy {\n    constructor(maxAttemptsProvider, options) {\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = RETRY_MODES.ADAPTIVE;\n        const { rateLimiter } = options ?? {};\n        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();\n        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);\n    }\n    async acquireInitialRetryToken(retryTokenScope) {\n        await this.rateLimiter.getSendToken();\n        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);\n    }\n    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n        this.rateLimiter.updateClientSendingRate(errorInfo);\n        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);\n    }\n    recordSuccess(token) {\n        this.rateLimiter.updateClientSendingRate({});\n        this.standardRetryStrategy.recordSuccess(token);\n    }\n}\n", "export const asSdkError = (error) => {\n    if (error instanceof Error)\n        return error;\n    if (error instanceof Object)\n        return Object.assign(new Error(), error);\n    if (typeof error === \"string\")\n        return new Error(error);\n    return new Error(`AWS SDK error wrapper for ${error}`);\n};\n", "import { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { AdaptiveRetryStrategy, DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES, StandardRetryStrategy, } from \"@aws-sdk/util-retry\";\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => {\n        const value = env[ENV_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    configFileSelector: (profile) => {\n        const value = profile[CONFIG_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    default: DEFAULT_MAX_ATTEMPTS,\n};\nexport const resolveRetryConfig = (input) => {\n    const { retryStrategy } = input;\n    const maxAttempts = normalizeProvider(input.maxAttempts ?? DEFAULT_MAX_ATTEMPTS);\n    return {\n        ...input,\n        maxAttempts,\n        retryStrategy: async () => {\n            if (retryStrategy) {\n                return retryStrategy;\n            }\n            const retryMode = await normalizeProvider(input.retryMode)();\n            if (retryMode === RETRY_MODES.ADAPTIVE) {\n                return new AdaptiveRetryStrategy(maxAttempts);\n            }\n            return new StandardRetryStrategy(maxAttempts);\n        },\n    };\n};\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n    configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n    default: DEFAULT_RETRY_MODE,\n};\n", "import { HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { isServerError, isThrottlingError, isTransientError } from \"@aws-sdk/service-error-classification\";\nimport { INVOCATION_ID_HEADER, REQUEST_HEADER } from \"@aws-sdk/util-retry\";\nimport { v4 } from \"uuid\";\nimport { asSdkError } from \"./util\";\nexport const retryMiddleware = (options) => (next, context) => async (args) => {\n    let retryStrategy = await options.retryStrategy();\n    const maxAttempts = await options.maxAttempts();\n    if (isRetryStrategyV2(retryStrategy)) {\n        retryStrategy = retryStrategy;\n        let retryToken = await retryStrategy.acquireInitialRetryToken(context[\"partition_id\"]);\n        let lastError = new Error();\n        let attempts = 0;\n        let totalRetryDelay = 0;\n        const { request } = args;\n        if (HttpRequest.isInstance(request)) {\n            request.headers[INVOCATION_ID_HEADER] = v4();\n        }\n        while (true) {\n            try {\n                if (HttpRequest.isInstance(request)) {\n                    request.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                const { response, output } = await next(args);\n                retryStrategy.recordSuccess(retryToken);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalRetryDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const retryErrorInfo = getRetyErrorInto(e);\n                lastError = asSdkError(e);\n                try {\n                    retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);\n                }\n                catch (refreshError) {\n                    if (!lastError.$metadata) {\n                        lastError.$metadata = {};\n                    }\n                    lastError.$metadata.attempts = attempts + 1;\n                    lastError.$metadata.totalRetryDelay = totalRetryDelay;\n                    throw lastError;\n                }\n                attempts = retryToken.getRetryCount();\n                const delay = retryToken.getRetryDelay();\n                totalRetryDelay += delay;\n                await new Promise((resolve) => setTimeout(resolve, delay));\n            }\n        }\n    }\n    else {\n        retryStrategy = retryStrategy;\n        if (retryStrategy?.mode)\n            context.userAgent = [...(context.userAgent || []), [\"cfg/retry-mode\", retryStrategy.mode]];\n        return retryStrategy.retry(next, args);\n    }\n};\nconst isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== \"undefined\" &&\n    typeof retryStrategy.refreshRetryTokenForRetry !== \"undefined\" &&\n    typeof retryStrategy.recordSuccess !== \"undefined\";\nconst getRetyErrorInto = (error) => {\n    const errorInfo = {\n        errorType: getRetryErrorType(error),\n    };\n    const retryAfterHint = getRetryAfterHint(error.$response);\n    if (retryAfterHint) {\n        errorInfo.retryAfterHint = retryAfterHint;\n    }\n    return errorInfo;\n};\nconst getRetryErrorType = (error) => {\n    if (isThrottlingError(error))\n        return \"THROTTLING\";\n    if (isTransientError(error))\n        return \"TRANSIENT\";\n    if (isServerError(error))\n        return \"SERVER_ERROR\";\n    return \"CLIENT_ERROR\";\n};\nexport const retryMiddlewareOptions = {\n    name: \"retryMiddleware\",\n    tags: [\"RETRY\"],\n    step: \"finalizeRequest\",\n    priority: \"high\",\n    override: true,\n};\nexport const getRetryPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n    },\n});\nexport const getRetryAfterHint = (response) => {\n    if (!HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return new Date(retryAfterSeconds * 1000);\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate;\n};\n", "export class ProviderError extends Error {\n    constructor(message, tryNextLink = true) {\n        super(message);\n        this.tryNextLink = tryNextLink;\n        this.name = \"ProviderError\";\n        Object.setPrototypeOf(this, ProviderError.prototype);\n    }\n    static from(error, tryNextLink = true) {\n        return Object.assign(new this(error.message, tryNextLink), error);\n    }\n}\n", "import { ProviderError } from \"./ProviderError\";\nexport class CredentialsProviderError extends ProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"CredentialsProviderError\";\n        Object.setPrototypeOf(this, CredentialsProviderError.prototype);\n    }\n}\n", "import { ProviderError } from \"./ProviderError\";\nexport class TokenProviderError extends ProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"TokenProviderError\";\n        Object.setPrototypeOf(this, TokenProviderError.prototype);\n    }\n}\n", "import { ProviderError } from \"./ProviderError\";\nexport function chain(...providers) {\n    return () => {\n        let promise = Promise.reject(new ProviderError(\"No providers in chain\"));\n        for (const provider of providers) {\n            promise = promise.catch((err) => {\n                if (err?.tryNextLink) {\n                    return provider();\n                }\n                throw err;\n            });\n        }\n        return promise;\n    };\n}\n", "export const fromStatic = (staticValue) => () => Promise.resolve(staticValue);\n", "export const memoize = (provider, isExpired, requiresRefresh) => {\n    let resolved;\n    let pending;\n    let hasResult;\n    let isConstant = false;\n    const coalesceProvider = async () => {\n        if (!pending) {\n            pending = provider();\n        }\n        try {\n            resolved = await pending;\n            hasResult = true;\n            isConstant = false;\n        }\n        finally {\n            pending = undefined;\n        }\n        return resolved;\n    };\n    if (isExpired === undefined) {\n        return async (options) => {\n            if (!hasResult || options?.forceRefresh) {\n                resolved = await coalesceProvider();\n            }\n            return resolved;\n        };\n    }\n    return async (options) => {\n        if (!hasResult || options?.forceRefresh) {\n            resolved = await coalesceProvider();\n        }\n        if (isConstant) {\n            return resolved;\n        }\n        if (requiresRefresh && !requiresRefresh(resolved)) {\n            isConstant = true;\n            return resolved;\n        }\n        if (isExpired(resolved)) {\n            await coalesceProvider();\n            return resolved;\n        }\n        return resolved;\n    };\n};\n", "const SHORT_TO_HEX = {};\nconst HEX_TO_SHORT = {};\nfor (let i = 0; i < 256; i++) {\n    let encodedByte = i.toString(16).toLowerCase();\n    if (encodedByte.length === 1) {\n        encodedByte = `0${encodedByte}`;\n    }\n    SHORT_TO_HEX[i] = encodedByte;\n    HEX_TO_SHORT[encodedByte] = i;\n}\nexport function fromHex(encoded) {\n    if (encoded.length % 2 !== 0) {\n        throw new Error(\"Hex encoded strings must have an even number length\");\n    }\n    const out = new Uint8Array(encoded.length / 2);\n    for (let i = 0; i < encoded.length; i += 2) {\n        const encodedByte = encoded.slice(i, i + 2).toLowerCase();\n        if (encodedByte in HEX_TO_SHORT) {\n            out[i / 2] = HEX_TO_SHORT[encodedByte];\n        }\n        else {\n            throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);\n        }\n    }\n    return out;\n}\nexport function toHex(bytes) {\n    let out = \"\";\n    for (let i = 0; i < bytes.byteLength; i++) {\n        out += SHORT_TO_HEX[bytes[i]];\n    }\n    return out;\n}\n", "export const isArrayBuffer = (arg) => (typeof ArrayBuffer === \"function\" && arg instanceof ArrayBuffer) ||\n    Object.prototype.toString.call(arg) === \"[object ArrayBuffer]\";\n", "import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { Buffer } from \"buffer\";\nexport const fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {\n    if (!isArrayBuffer(input)) {\n        throw new TypeError(`The \"input\" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);\n    }\n    return Buffer.from(input, offset, length);\n};\nexport const fromString = (input, encoding) => {\n    if (typeof input !== \"string\") {\n        throw new TypeError(`The \"input\" argument must be of type string. Received type ${typeof input} (${input})`);\n    }\n    return encoding ? Buffer.from(input, encoding) : Buffer.from(input);\n};\n", "import { fromString } from \"@aws-sdk/util-buffer-from\";\nexport const fromUtf8 = (input) => {\n    const buf = fromString(input, \"utf8\");\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n};\n", "import { fromUtf8 } from \"./fromUtf8\";\nexport const toUint8Array = (data) => {\n    if (typeof data === \"string\") {\n        return fromUtf8(data);\n    }\n    if (ArrayBuffer.isView(data)) {\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\n    }\n    return new Uint8Array(data);\n};\n", "import { fromArrayBuffer } from \"@aws-sdk/util-buffer-from\";\nexport const toUtf8 = (input) => fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString(\"utf8\");\n", "export const ALGORITHM_QUERY_PARAM = \"X-Amz-Algorithm\";\nexport const CREDENTIAL_QUERY_PARAM = \"X-Amz-Credential\";\nexport const AMZ_DATE_QUERY_PARAM = \"X-Amz-Date\";\nexport const SIGNED_HEADERS_QUERY_PARAM = \"X-Amz-SignedHeaders\";\nexport const EXPIRES_QUERY_PARAM = \"X-Amz-Expires\";\nexport const SIGNATURE_QUERY_PARAM = \"X-Amz-Signature\";\nexport const TOKEN_QUERY_PARAM = \"X-Amz-Security-Token\";\nexport const REGION_SET_PARAM = \"X-Amz-Region-Set\";\nexport const AUTH_HEADER = \"authorization\";\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();\nexport const DATE_HEADER = \"date\";\nexport const GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];\nexport const SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();\nexport const SHA256_HEADER = \"x-amz-content-sha256\";\nexport const TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();\nexport const HOST_HEADER = \"host\";\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    \"cache-control\": true,\n    connection: true,\n    expect: true,\n    from: true,\n    \"keep-alive\": true,\n    \"max-forwards\": true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    \"transfer-encoding\": true,\n    upgrade: true,\n    \"user-agent\": true,\n    \"x-amzn-trace-id\": true,\n};\nexport const PROXY_HEADER_PATTERN = /^proxy-/;\nexport const SEC_HEADER_PATTERN = /^sec-/;\nexport const UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];\nexport const ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256\";\nexport const ALGORITHM_IDENTIFIER_V4A = \"AWS4-ECDSA-P256-SHA256\";\nexport const EVENT_ALGORITHM_IDENTIFIER = \"AWS4-HMAC-SHA256-PAYLOAD\";\nexport const UNSIGNED_PAYLOAD = \"UNSIGNED-PAYLOAD\";\nexport const MAX_CACHE_SIZE = 50;\nexport const KEY_TYPE_IDENTIFIER = \"aws4_request\";\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;\n", "import { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { KEY_TYPE_IDENTIFIER, MAX_CACHE_SIZE } from \"./constants\";\nconst signingKeyCache = {};\nconst cacheQueue = [];\nexport const createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;\nexport const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {\n    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);\n    const cacheKey = `${shortDate}:${region}:${service}:${toHex(credsHash)}:${credentials.sessionToken}`;\n    if (cacheKey in signingKeyCache) {\n        return signingKeyCache[cacheKey];\n    }\n    cacheQueue.push(cacheKey);\n    while (cacheQueue.length > MAX_CACHE_SIZE) {\n        delete signingKeyCache[cacheQueue.shift()];\n    }\n    let key = `AWS4${credentials.secretAccessKey}`;\n    for (const signable of [shortDate, region, service, KEY_TYPE_IDENTIFIER]) {\n        key = await hmac(sha256Constructor, key, signable);\n    }\n    return (signingKeyCache[cacheKey] = key);\n};\nexport const clearCredentialCache = () => {\n    cacheQueue.length = 0;\n    Object.keys(signingKeyCache).forEach((cacheKey) => {\n        delete signingKeyCache[cacheKey];\n    });\n};\nconst hmac = (ctor, secret, data) => {\n    const hash = new ctor(secret);\n    hash.update(toUint8Array(data));\n    return hash.digest();\n};\n", "import { ALWAYS_UNSIGNABLE_HEADERS, PROXY_HEADER_PATTERN, SEC_HEADER_PATTERN } from \"./constants\";\nexport const getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {\n    const canonical = {};\n    for (const headerName of Object.keys(headers).sort()) {\n        if (headers[headerName] == undefined) {\n            continue;\n        }\n        const canonicalHeaderName = headerName.toLowerCase();\n        if (canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS ||\n            unsignableHeaders?.has(canonicalHeaderName) ||\n            PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||\n            SEC_HEADER_PATTERN.test(canonicalHeaderName)) {\n            if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {\n                continue;\n            }\n        }\n        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, \" \");\n    }\n    return canonical;\n};\n", "export const escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);\nconst hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;\n", "import { escapeUri } from \"@aws-sdk/util-uri-escape\";\nimport { SIGNATURE_HEADER } from \"./constants\";\nexport const getCanonicalQuery = ({ query = {} }) => {\n    const keys = [];\n    const serialized = {};\n    for (const key of Object.keys(query).sort()) {\n        if (key.toLowerCase() === SIGNATURE_HEADER) {\n            continue;\n        }\n        keys.push(key);\n        const value = query[key];\n        if (typeof value === \"string\") {\n            serialized[key] = `${escapeUri(key)}=${escapeUri(value)}`;\n        }\n        else if (Array.isArray(value)) {\n            serialized[key] = value\n                .slice(0)\n                .sort()\n                .reduce((encoded, value) => encoded.concat([`${escapeUri(key)}=${escapeUri(value)}`]), [])\n                .join(\"&\");\n        }\n    }\n    return keys\n        .map((key) => serialized[key])\n        .filter((serialized) => serialized)\n        .join(\"&\");\n};\n", "import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\nexport const getPayloadHash = async ({ headers, body }, hashConstructor) => {\n    for (const headerName of Object.keys(headers)) {\n        if (headerName.toLowerCase() === SHA256_HEADER) {\n            return headers[headerName];\n        }\n    }\n    if (body == undefined) {\n        return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n    }\n    else if (typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n        const hashCtor = new hashConstructor();\n        hashCtor.update(toUint8Array(body));\n        return toHex(await hashCtor.digest());\n    }\n    return UNSIGNED_PAYLOAD;\n};\n", "export const hasHeader = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const getHeaderValue = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return headers[headerName];\n        }\n    }\n    return undefined;\n};\nexport const deleteHeader = (soughtHeader, headers) => {\n    soughtHeader = soughtHeader.toLowerCase();\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            delete headers[headerName];\n        }\n    }\n};\n", "export const cloneRequest = ({ headers, query, ...rest }) => ({\n    ...rest,\n    headers: { ...headers },\n    query: query ? cloneQuery(query) : undefined,\n});\nexport const cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {\n    const param = query[paramName];\n    return {\n        ...carry,\n        [paramName]: Array.isArray(param) ? [...param] : param,\n    };\n}, {});\n", "import { cloneRequest } from \"./cloneRequest\";\nexport const moveHeadersToQuery = (request, options = {}) => {\n    const { headers, query = {} } = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request);\n    for (const name of Object.keys(headers)) {\n        const lname = name.toLowerCase();\n        if (lname.slice(0, 6) === \"x-amz-\" && !options.unhoistableHeaders?.has(lname)) {\n            query[name] = headers[name];\n            delete headers[name];\n        }\n    }\n    return {\n        ...request,\n        headers,\n        query,\n    };\n};\n", "import { cloneRequest } from \"./cloneRequest\";\nimport { GENERATED_HEADERS } from \"./constants\";\nexport const prepareRequest = (request) => {\n    request = typeof request.clone === \"function\" ? request.clone() : cloneRequest(request);\n    for (const headerName of Object.keys(request.headers)) {\n        if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n            delete request.headers[headerName];\n        }\n    }\n    return request;\n};\n", "export const iso8601 = (time) => toDate(time)\n    .toISOString()\n    .replace(/\\.\\d{3}Z$/, \"Z\");\nexport const toDate = (time) => {\n    if (typeof time === \"number\") {\n        return new Date(time * 1000);\n    }\n    if (typeof time === \"string\") {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000);\n        }\n        return new Date(time);\n    }\n    return time;\n};\n", "import { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { ALGORITHM_IDENTIFIER, ALGORITHM_QUERY_PARAM, AMZ_DATE_HEADER, AMZ_DATE_QUERY_PARAM, AUTH_HEADER, CREDENTIAL_QUERY_PARAM, EVENT_ALGORITHM_IDENTIFIER, EXPIRES_QUERY_PARAM, MAX_PRESIGNED_TTL, SHA256_HEADER, SIGNATURE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, TOKEN_HEADER, TOKEN_QUERY_PARAM, } from \"./constants\";\nimport { createScope, getSigningKey } from \"./credentialDerivation\";\nimport { getCanonicalHeaders } from \"./getCanonicalHeaders\";\nimport { getCanonicalQuery } from \"./getCanonicalQuery\";\nimport { getPayloadHash } from \"./getPayloadHash\";\nimport { hasHeader } from \"./headerUtil\";\nimport { moveHeadersToQuery } from \"./moveHeadersToQuery\";\nimport { prepareRequest } from \"./prepareRequest\";\nimport { iso8601 } from \"./utilDate\";\nexport class SignatureV4 {\n    constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true, }) {\n        this.service = service;\n        this.sha256 = sha256;\n        this.uriEscapePath = uriEscapePath;\n        this.applyChecksum = typeof applyChecksum === \"boolean\" ? applyChecksum : true;\n        this.regionProvider = normalizeProvider(region);\n        this.credentialProvider = normalizeProvider(credentials);\n    }\n    async presign(originalRequest, options = {}) {\n        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, } = options;\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { longDate, shortDate } = formatDate(signingDate);\n        if (expiresIn > MAX_PRESIGNED_TTL) {\n            return Promise.reject(\"Signature version 4 presigned URLs\" + \" must have an expiration date less than one week in\" + \" the future\");\n        }\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });\n        if (credentials.sessionToken) {\n            request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;\n        }\n        request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;\n        request.query[CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;\n        request.query[AMZ_DATE_QUERY_PARAM] = longDate;\n        request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);\n        request.query[SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await getPayloadHash(originalRequest, this.sha256)));\n        return request;\n    }\n    async sign(toSign, options) {\n        if (typeof toSign === \"string\") {\n            return this.signString(toSign, options);\n        }\n        else if (toSign.headers && toSign.payload) {\n            return this.signEvent(toSign, options);\n        }\n        else {\n            return this.signRequest(toSign, options);\n        }\n    }\n    async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate, longDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        const hashedPayload = await getPayloadHash({ headers: {}, body: payload }, this.sha256);\n        const hash = new this.sha256();\n        hash.update(headers);\n        const hashedHeaders = toHex(await hash.digest());\n        const stringToSign = [\n            EVENT_ALGORITHM_IDENTIFIER,\n            longDate,\n            scope,\n            priorSignature,\n            hashedHeaders,\n            hashedPayload,\n        ].join(\"\\n\");\n        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });\n    }\n    async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const { shortDate } = formatDate(signingDate);\n        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService, } = {}) {\n        const credentials = await this.credentialProvider();\n        this.validateResolvedCredentials(credentials);\n        const region = signingRegion ?? (await this.regionProvider());\n        const request = prepareRequest(requestToSign);\n        const { longDate, shortDate } = formatDate(signingDate);\n        const scope = createScope(shortDate, region, signingService ?? this.service);\n        request.headers[AMZ_DATE_HEADER] = longDate;\n        if (credentials.sessionToken) {\n            request.headers[TOKEN_HEADER] = credentials.sessionToken;\n        }\n        const payloadHash = await getPayloadHash(request, this.sha256);\n        if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {\n            request.headers[SHA256_HEADER] = payloadHash;\n        }\n        const canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));\n        request.headers[AUTH_HEADER] =\n            `${ALGORITHM_IDENTIFIER} ` +\n                `Credential=${credentials.accessKeyId}/${scope}, ` +\n                `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` +\n                `Signature=${signature}`;\n        return request;\n    }\n    createCanonicalRequest(request, canonicalHeaders, payloadHash) {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort();\n        return `${request.method}\n${this.getCanonicalPath(request)}\n${getCanonicalQuery(request)}\n${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join(\"\\n\")}\n\n${sortedHeaders.join(\";\")}\n${payloadHash}`;\n    }\n    async createStringToSign(longDate, credentialScope, canonicalRequest) {\n        const hash = new this.sha256();\n        hash.update(toUint8Array(canonicalRequest));\n        const hashedRequest = await hash.digest();\n        return `${ALGORITHM_IDENTIFIER}\n${longDate}\n${credentialScope}\n${toHex(hashedRequest)}`;\n    }\n    getCanonicalPath({ path }) {\n        if (this.uriEscapePath) {\n            const normalizedPathSegments = [];\n            for (const pathSegment of path.split(\"/\")) {\n                if (pathSegment?.length === 0)\n                    continue;\n                if (pathSegment === \".\")\n                    continue;\n                if (pathSegment === \"..\") {\n                    normalizedPathSegments.pop();\n                }\n                else {\n                    normalizedPathSegments.push(pathSegment);\n                }\n            }\n            const normalizedPath = `${path?.startsWith(\"/\") ? \"/\" : \"\"}${normalizedPathSegments.join(\"/\")}${normalizedPathSegments.length > 0 && path?.endsWith(\"/\") ? \"/\" : \"\"}`;\n            const doubleEncoded = encodeURIComponent(normalizedPath);\n            return doubleEncoded.replace(/%2F/g, \"/\");\n        }\n        return path;\n    }\n    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {\n        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);\n        const hash = new this.sha256(await keyPromise);\n        hash.update(toUint8Array(stringToSign));\n        return toHex(await hash.digest());\n    }\n    getSigningKey(credentials, region, shortDate, service) {\n        return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);\n    }\n    validateResolvedCredentials(credentials) {\n        if (typeof credentials !== \"object\" ||\n            typeof credentials.accessKeyId !== \"string\" ||\n            typeof credentials.secretAccessKey !== \"string\") {\n            throw new Error(\"Resolved credential object is not valid\");\n        }\n    }\n}\nconst formatDate = (now) => {\n    const longDate = iso8601(now).replace(/[\\-:]/g, \"\");\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    };\n};\nconst getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(\";\");\n", "import { memoize } from \"@aws-sdk/property-provider\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nconst CREDENTIAL_EXPIRE_WINDOW = 300000;\nexport const resolveAwsAuthConfig = (input) => {\n    const normalizedCreds = input.credentials\n        ? normalizeCredentialProvider(input.credentials)\n        : input.credentialDefaultProvider(input);\n    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n    let signer;\n    if (input.signer) {\n        signer = normalizeProvider(input.signer);\n    }\n    else if (input.regionInfoProvider) {\n        signer = () => normalizeProvider(input.region)()\n            .then(async (region) => [\n            (await input.regionInfoProvider(region, {\n                useFipsEndpoint: await input.useFipsEndpoint(),\n                useDualstackEndpoint: await input.useDualstackEndpoint(),\n            })) || {},\n            region,\n        ])\n            .then(([regionInfo, region]) => {\n            const { signingRegion, signingService } = regionInfo;\n            input.signingRegion = input.signingRegion || signingRegion || region;\n            input.signingName = input.signingName || signingService || input.serviceId;\n            const params = {\n                ...input,\n                credentials: normalizedCreds,\n                region: input.signingRegion,\n                service: input.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = input.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        });\n    }\n    else {\n        signer = async (authScheme) => {\n            authScheme = Object.assign({}, {\n                name: \"sigv4\",\n                signingName: input.signingName || input.defaultSigningName,\n                signingRegion: await normalizeProvider(input.region)(),\n                properties: {},\n            }, authScheme);\n            const signingRegion = authScheme.signingRegion;\n            const signingService = authScheme.signingName;\n            input.signingRegion = input.signingRegion || signingRegion;\n            input.signingName = input.signingName || signingService || input.serviceId;\n            const params = {\n                ...input,\n                credentials: normalizedCreds,\n                region: input.signingRegion,\n                service: input.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = input.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        };\n    }\n    return {\n        ...input,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n    };\n};\nexport const resolveSigV4AuthConfig = (input) => {\n    const normalizedCreds = input.credentials\n        ? normalizeCredentialProvider(input.credentials)\n        : input.credentialDefaultProvider(input);\n    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n    let signer;\n    if (input.signer) {\n        signer = normalizeProvider(input.signer);\n    }\n    else {\n        signer = normalizeProvider(new SignatureV4({\n            credentials: normalizedCreds,\n            region: input.region,\n            service: input.signingName,\n            sha256,\n            uriEscapePath: signingEscapePath,\n        }));\n    }\n    return {\n        ...input,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n    };\n};\nconst normalizeCredentialProvider = (credentials) => {\n    if (typeof credentials === \"function\") {\n        return memoize(credentials, (credentials) => credentials.expiration !== undefined &&\n            credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials) => credentials.expiration !== undefined);\n    }\n    return normalizeProvider(credentials);\n};\n", "export const getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);\n", "import { getSkewCorrectedDate } from \"./getSkewCorrectedDate\";\nexport const isClockSkewed = (clockTime, systemClockOffset) => Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - clockTime) >= 300000;\n", "import { isClockSkewed } from \"./isClockSkewed\";\nexport const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {\n    const clockTimeInMs = Date.parse(clockTime);\n    if (isClockSkewed(clockTimeInMs, currentSystemClockOffset)) {\n        return clockTimeInMs - Date.now();\n    }\n    return currentSystemClockOffset;\n};\n", "import { HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { getSkewCorrectedDate } from \"./utils/getSkewCorrectedDate\";\nimport { getUpdatedSystemClockOffset } from \"./utils/getUpdatedSystemClockOffset\";\nexport const awsAuthMiddleware = (options) => (next, context) => async function (args) {\n    if (!HttpRequest.isInstance(args.request))\n        return next(args);\n    const authScheme = context.endpointV2?.properties?.authSchemes?.[0];\n    const multiRegionOverride = authScheme?.name === \"sigv4a\" ? authScheme?.signingRegionSet?.join(\",\") : undefined;\n    const signer = await options.signer(authScheme);\n    const output = await next({\n        ...args,\n        request: await signer.sign(args.request, {\n            signingDate: getSkewCorrectedDate(options.systemClockOffset),\n            signingRegion: multiRegionOverride || context[\"signing_region\"],\n            signingService: context[\"signing_service\"],\n        }),\n    }).catch((error) => {\n        const serverTime = error.ServerTime ?? getDateHeader(error.$response);\n        if (serverTime) {\n            options.systemClockOffset = getUpdatedSystemClockOffset(serverTime, options.systemClockOffset);\n        }\n        throw error;\n    });\n    const dateHeader = getDateHeader(output.response);\n    if (dateHeader) {\n        options.systemClockOffset = getUpdatedSystemClockOffset(dateHeader, options.systemClockOffset);\n    }\n    return output;\n};\nconst getDateHeader = (response) => HttpResponse.isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;\nexport const awsAuthMiddlewareOptions = {\n    name: \"awsAuthMiddleware\",\n    tags: [\"SIGNATURE\", \"AWSAUTH\"],\n    relation: \"after\",\n    toMiddleware: \"retryMiddleware\",\n    override: true,\n};\nexport const getAwsAuthPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);\n    },\n});\nexport const getSigV4AuthPlugin = getAwsAuthPlugin;\n", "export function resolveUserAgentConfig(input) {\n    return {\n        ...input,\n        customUserAgent: typeof input.customUserAgent === \"string\" ? [[input.customUserAgent]] : input.customUserAgent,\n    };\n}\n", "{\n    \"partitions\": [{\n            \"id\": \"aws\",\n            \"outputs\": {\n                \"dnsSuffix\": \"amazonaws.com\",\n                \"dualStackDnsSuffix\": \"api.aws\",\n                \"name\": \"aws\",\n                \"supportsDualStack\": true,\n                \"supportsFIPS\": true\n            },\n            \"regionRegex\": \"^(us|eu|ap|sa|ca|me|af)\\\\-\\\\w+\\\\-\\\\d+$\",\n            \"regions\": {\n                \"af-south-1\": {\n                    \"description\": \"Africa (Cape Town)\"\n                },\n                \"ap-east-1\": {\n                    \"description\": \"Asia Pacific (Hong Kong)\"\n                },\n                \"ap-northeast-1\": {\n                    \"description\": \"Asia Pacific (Tokyo)\"\n                },\n                \"ap-northeast-2\": {\n                    \"description\": \"Asia Pacific (Seoul)\"\n                },\n                \"ap-northeast-3\": {\n                    \"description\": \"Asia Pacific (Osaka)\"\n                },\n                \"ap-south-1\": {\n                    \"description\": \"Asia Pacific (Mumbai)\"\n                },\n                \"ap-south-2\": {\n                    \"description\": \"Asia Pacific (Hyderabad)\"\n                },\n                \"ap-southeast-1\": {\n                    \"description\": \"Asia Pacific (Singapore)\"\n                },\n                \"ap-southeast-2\": {\n                    \"description\": \"Asia Pacific (Sydney)\"\n                },\n                \"ap-southeast-3\": {\n                    \"description\": \"Asia Pacific (Jakarta)\"\n                },\n                \"ap-southeast-4\": {\n                    \"description\": \"Asia Pacific (Melbourne)\"\n                },\n                \"aws-global\": {\n                    \"description\": \"AWS Standard global region\"\n                },\n                \"ca-central-1\": {\n                    \"description\": \"Canada (Central)\"\n                },\n                \"eu-central-1\": {\n                    \"description\": \"Europe (Frankfurt)\"\n                },\n                \"eu-central-2\": {\n                    \"description\": \"Europe (Zurich)\"\n                },\n                \"eu-north-1\": {\n                    \"description\": \"Europe (Stockholm)\"\n                },\n                \"eu-south-1\": {\n                    \"description\": \"Europe (Milan)\"\n                },\n                \"eu-south-2\": {\n                    \"description\": \"Europe (Spain)\"\n                },\n                \"eu-west-1\": {\n                    \"description\": \"Europe (Ireland)\"\n                },\n                \"eu-west-2\": {\n                    \"description\": \"Europe (London)\"\n                },\n                \"eu-west-3\": {\n                    \"description\": \"Europe (Paris)\"\n                },\n                \"me-central-1\": {\n                    \"description\": \"Middle East (UAE)\"\n                },\n                \"me-south-1\": {\n                    \"description\": \"Middle East (Bahrain)\"\n                },\n                \"sa-east-1\": {\n                    \"description\": \"South America (Sao Paulo)\"\n                },\n                \"us-east-1\": {\n                    \"description\": \"US East (N. Virginia)\"\n                },\n                \"us-east-2\": {\n                    \"description\": \"US East (Ohio)\"\n                },\n                \"us-west-1\": {\n                    \"description\": \"US West (N. California)\"\n                },\n                \"us-west-2\": {\n                    \"description\": \"US West (Oregon)\"\n                }\n            }\n        }, {\n            \"id\": \"aws-cn\",\n            \"outputs\": {\n                \"dnsSuffix\": \"amazonaws.com.cn\",\n                \"dualStackDnsSuffix\": \"api.amazonwebservices.com.cn\",\n                \"name\": \"aws-cn\",\n                \"supportsDualStack\": true,\n                \"supportsFIPS\": true\n            },\n            \"regionRegex\": \"^cn\\\\-\\\\w+\\\\-\\\\d+$\",\n            \"regions\": {\n                \"aws-cn-global\": {\n                    \"description\": \"AWS China global region\"\n                },\n                \"cn-north-1\": {\n                    \"description\": \"China (Beijing)\"\n                },\n                \"cn-northwest-1\": {\n                    \"description\": \"China (Ningxia)\"\n                }\n            }\n        }, {\n            \"id\": \"aws-us-gov\",\n            \"outputs\": {\n                \"dnsSuffix\": \"amazonaws.com\",\n                \"dualStackDnsSuffix\": \"api.aws\",\n                \"name\": \"aws-us-gov\",\n                \"supportsDualStack\": true,\n                \"supportsFIPS\": true\n            },\n            \"regionRegex\": \"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$\",\n            \"regions\": {\n                \"aws-us-gov-global\": {\n                    \"description\": \"AWS GovCloud (US) global region\"\n                },\n                \"us-gov-east-1\": {\n                    \"description\": \"AWS GovCloud (US-East)\"\n                },\n                \"us-gov-west-1\": {\n                    \"description\": \"AWS GovCloud (US-West)\"\n                }\n            }\n        }, {\n            \"id\": \"aws-iso\",\n            \"outputs\": {\n                \"dnsSuffix\": \"c2s.ic.gov\",\n                \"dualStackDnsSuffix\": \"c2s.ic.gov\",\n                \"name\": \"aws-iso\",\n                \"supportsDualStack\": false,\n                \"supportsFIPS\": true\n            },\n            \"regionRegex\": \"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$\",\n            \"regions\": {\n                \"aws-iso-global\": {\n                    \"description\": \"AWS ISO (US) global region\"\n                },\n                \"us-iso-east-1\": {\n                    \"description\": \"US ISO East\"\n                },\n                \"us-iso-west-1\": {\n                    \"description\": \"US ISO WEST\"\n                }\n            }\n        }, {\n            \"id\": \"aws-iso-b\",\n            \"outputs\": {\n                \"dnsSuffix\": \"sc2s.sgov.gov\",\n                \"dualStackDnsSuffix\": \"sc2s.sgov.gov\",\n                \"name\": \"aws-iso-b\",\n                \"supportsDualStack\": false,\n                \"supportsFIPS\": true\n            },\n            \"regionRegex\": \"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$\",\n            \"regions\": {\n                \"aws-iso-b-global\": {\n                    \"description\": \"AWS ISOB (US) global region\"\n                },\n                \"us-isob-east-1\": {\n                    \"description\": \"US ISOB East (Ohio)\"\n                }\n            }\n        }],\n    \"version\": \"1.1\"\n}\n", "import partitionsInfo from \"./partitions.json\";\nlet selectedPartitionsInfo = partitionsInfo;\nlet selectedUserAgentPrefix = \"\";\nexport const partition = (value) => {\n    const { partitions } = selectedPartitionsInfo;\n    for (const partition of partitions) {\n        const { regions, outputs } = partition;\n        for (const [region, regionData] of Object.entries(regions)) {\n            if (region === value) {\n                return {\n                    ...outputs,\n                    ...regionData,\n                };\n            }\n        }\n    }\n    for (const partition of partitions) {\n        const { regionRegex, outputs } = partition;\n        if (new RegExp(regionRegex).test(value)) {\n            return {\n                ...outputs,\n            };\n        }\n    }\n    const DEFAULT_PARTITION = partitions.find((partition) => partition.id === \"aws\");\n    if (!DEFAULT_PARTITION) {\n        throw new Error(\"Provided region was not found in the partition array or regex,\" +\n            \" and default partition with id 'aws' doesn't exist.\");\n    }\n    return {\n        ...DEFAULT_PARTITION.outputs,\n    };\n};\nexport const setPartitionInfo = (partitionsInfo, userAgentPrefix = \"\") => {\n    selectedPartitionsInfo = partitionsInfo;\n    selectedUserAgentPrefix = userAgentPrefix;\n};\nexport const useDefaultPartitionInfo = () => {\n    setPartitionInfo(partitionsInfo, \"\");\n};\nexport const getUserAgentPrefix = () => selectedUserAgentPrefix;\n", "export const debugId = \"endpoints\";\n", "export function toDebugString(input) {\n    if (typeof input !== \"object\" || input == null) {\n        return input;\n    }\n    if (\"ref\" in input) {\n        return `$${toDebugString(input.ref)}`;\n    }\n    if (\"fn\" in input) {\n        return `${input.fn}(${(input.argv || []).map(toDebugString).join(\", \")})`;\n    }\n    return JSON.stringify(input, null, 2);\n}\n", "export class EndpointError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"EndpointError\";\n    }\n}\n", "export * as aws from \"./aws\";\nexport * from \"./booleanEquals\";\nexport * from \"./getAttr\";\nexport * from \"./isSet\";\nexport * from \"./isValidHostLabel\";\nexport * from \"./not\";\nexport * from \"./parseURL\";\nexport * from \"./stringEquals\";\nexport * from \"./substring\";\nexport * from \"./uriEncode\";\n", "export * from \"./isVirtualHostableS3Bucket\";\nexport * from \"./parseArn\";\nexport * from \"./partition\";\n", "const IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}$`);\nexport const isIpAddress = (value) => IP_V4_REGEX.test(value) || (value.startsWith(\"[\") && value.endsWith(\"]\"));\n", "const VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);\nexport const isValidHostLabel = (value, allowSubDomains = false) => {\n    if (!allowSubDomains) {\n        return VALID_HOST_LABEL_REGEX.test(value);\n    }\n    const labels = value.split(\".\");\n    for (const label of labels) {\n        if (!isValidHostLabel(label)) {\n            return false;\n        }\n    }\n    return true;\n};\n", "import { isIpAddress } from \"../isIpAddress\";\nimport { isValidHostLabel } from \"../isValidHostLabel\";\nexport const isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {\n    if (allowSubDomains) {\n        for (const label of value.split(\".\")) {\n            if (!isVirtualHostableS3Bucket(label)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    if (!isValidHostLabel(value)) {\n        return false;\n    }\n    if (value.length < 3 || value.length > 63) {\n        return false;\n    }\n    if (value !== value.toLowerCase()) {\n        return false;\n    }\n    if (isIpAddress(value)) {\n        return false;\n    }\n    return true;\n};\n", "export const parseArn = (value) => {\n    const segments = value.split(\":\");\n    if (segments.length < 6)\n        return null;\n    const [arn, partition, service, region, accountId, ...resourceId] = segments;\n    if (arn !== \"arn\" || partition === \"\" || service === \"\" || resourceId[0] === \"\")\n        return null;\n    return {\n        partition,\n        service,\n        region,\n        accountId,\n        resourceId: resourceId[0].includes(\"/\") ? resourceId[0].split(\"/\") : resourceId,\n    };\n};\n", "export const booleanEquals = (value1, value2) => value1 === value2;\n", "import { EndpointError } from \"../types\";\nexport const getAttrPathList = (path) => {\n    const parts = path.split(\".\");\n    const pathList = [];\n    for (const part of parts) {\n        const squareBracketIndex = part.indexOf(\"[\");\n        if (squareBracketIndex !== -1) {\n            if (part.indexOf(\"]\") !== part.length - 1) {\n                throw new EndpointError(`Path: '${path}' does not end with ']'`);\n            }\n            const arrayIndex = part.slice(squareBracketIndex + 1, -1);\n            if (Number.isNaN(parseInt(arrayIndex))) {\n                throw new EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);\n            }\n            if (squareBracketIndex !== 0) {\n                pathList.push(part.slice(0, squareBracketIndex));\n            }\n            pathList.push(arrayIndex);\n        }\n        else {\n            pathList.push(part);\n        }\n    }\n    return pathList;\n};\n", "import { EndpointError } from \"../types\";\nimport { getAttrPathList } from \"./getAttrPathList\";\nexport const getAttr = (value, path) => getAttrPathList(path).reduce((acc, index) => {\n    if (typeof acc !== \"object\") {\n        throw new EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);\n    }\n    else if (Array.isArray(acc)) {\n        return acc[parseInt(index)];\n    }\n    return acc[index];\n}, value);\n", "export const isSet = (value) => value != null;\n", "export const not = (value) => !value;\n", "export var HttpAuthLocation;\n(function (HttpAuthLocation) {\n    HttpAuthLocation[\"HEADER\"] = \"header\";\n    HttpAuthLocation[\"QUERY\"] = \"query\";\n})(HttpAuthLocation || (HttpAuthLocation = {}));\n", "export var HostAddressType;\n(function (HostAddressType) {\n    HostAddressType[\"AAAA\"] = \"AAAA\";\n    HostAddressType[\"A\"] = \"A\";\n})(HostAddressType || (HostAddressType = {}));\n", "export var EndpointURLScheme;\n(function (EndpointURLScheme) {\n    EndpointURLScheme[\"HTTP\"] = \"http\";\n    EndpointURLScheme[\"HTTPS\"] = \"https\";\n})(EndpointURLScheme || (EndpointURLScheme = {}));\n", "export var RequestHandlerProtocol;\n(function (RequestHandlerProtocol) {\n    RequestHandlerProtocol[\"HTTP_0_9\"] = \"http/0.9\";\n    RequestHandlerProtocol[\"HTTP_1_0\"] = \"http/1.0\";\n    RequestHandlerProtocol[\"TDS_8_0\"] = \"tds/8.0\";\n})(RequestHandlerProtocol || (RequestHandlerProtocol = {}));\n", "import { EndpointURLScheme } from \"@aws-sdk/types\";\nimport { isIpAddress } from \"./isIpAddress\";\nconst DEFAULT_PORTS = {\n    [EndpointURLScheme.HTTP]: 80,\n    [EndpointURLScheme.HTTPS]: 443,\n};\nexport const parseURL = (value) => {\n    const whatwgURL = (() => {\n        try {\n            if (value instanceof URL) {\n                return value;\n            }\n            if (typeof value === \"object\" && \"hostname\" in value) {\n                const { hostname, port, protocol = \"\", path = \"\", query = {} } = value;\n                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : \"\"}${path}`);\n                url.search = Object.entries(query)\n                    .map(([k, v]) => `${k}=${v}`)\n                    .join(\"&\");\n                return url;\n            }\n            return new URL(value);\n        }\n        catch (error) {\n            return null;\n        }\n    })();\n    if (!whatwgURL) {\n        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);\n        return null;\n    }\n    const urlString = whatwgURL.href;\n    const { host, hostname, pathname, protocol, search } = whatwgURL;\n    if (search) {\n        return null;\n    }\n    const scheme = protocol.slice(0, -1);\n    if (!Object.values(EndpointURLScheme).includes(scheme)) {\n        return null;\n    }\n    const isIp = isIpAddress(hostname);\n    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||\n        (typeof value === \"string\" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));\n    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;\n    return {\n        scheme,\n        authority,\n        path: pathname,\n        normalizedPath: pathname.endsWith(\"/\") ? pathname : `${pathname}/`,\n        isIp,\n    };\n};\n", "export const stringEquals = (value1, value2) => value1 === value2;\n", "export const substring = (input, start, stop, reverse) => {\n    if (start >= stop || input.length < stop) {\n        return null;\n    }\n    if (!reverse) {\n        return input.substring(start, stop);\n    }\n    return input.substring(input.length - stop, input.length - start);\n};\n", "export const uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n", "import { getAttr } from \"../lib\";\nexport const evaluateTemplate = (template, options) => {\n    const evaluatedTemplateArr = [];\n    const templateContext = {\n        ...options.endpointParams,\n        ...options.referenceRecord,\n    };\n    let currentIndex = 0;\n    while (currentIndex < template.length) {\n        const openingBraceIndex = template.indexOf(\"{\", currentIndex);\n        if (openingBraceIndex === -1) {\n            evaluatedTemplateArr.push(template.slice(currentIndex));\n            break;\n        }\n        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));\n        const closingBraceIndex = template.indexOf(\"}\", openingBraceIndex);\n        if (closingBraceIndex === -1) {\n            evaluatedTemplateArr.push(template.slice(openingBraceIndex));\n            break;\n        }\n        if (template[openingBraceIndex + 1] === \"{\" && template[closingBraceIndex + 1] === \"}\") {\n            evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));\n            currentIndex = closingBraceIndex + 2;\n        }\n        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);\n        if (parameterName.includes(\"#\")) {\n            const [refName, attrName] = parameterName.split(\"#\");\n            evaluatedTemplateArr.push(getAttr(templateContext[refName], attrName));\n        }\n        else {\n            evaluatedTemplateArr.push(templateContext[parameterName]);\n        }\n        currentIndex = closingBraceIndex + 1;\n    }\n    return evaluatedTemplateArr.join(\"\");\n};\n", "export const getReferenceValue = ({ ref }, options) => {\n    const referenceRecord = {\n        ...options.endpointParams,\n        ...options.referenceRecord,\n    };\n    return referenceRecord[ref];\n};\n", "import { EndpointError } from \"../types\";\nimport { callFunction } from \"./callFunction\";\nimport { evaluateTemplate } from \"./evaluateTemplate\";\nimport { getReferenceValue } from \"./getReferenceValue\";\nexport const evaluateExpression = (obj, keyName, options) => {\n    if (typeof obj === \"string\") {\n        return evaluateTemplate(obj, options);\n    }\n    else if (obj[\"fn\"]) {\n        return callFunction(obj, options);\n    }\n    else if (obj[\"ref\"]) {\n        return getReferenceValue(obj, options);\n    }\n    throw new EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);\n};\n", "import * as lib from \"../lib\";\nimport { evaluateExpression } from \"./evaluateExpression\";\nexport const callFunction = ({ fn, argv }, options) => {\n    const evaluatedArgs = argv.map((arg) => [\"boolean\", \"number\"].includes(typeof arg) ? arg : evaluateExpression(arg, \"arg\", options));\n    return fn.split(\".\").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);\n};\n", "import { debugId, toDebugString } from \"../debug\";\nimport { EndpointError } from \"../types\";\nimport { callFunction } from \"./callFunction\";\nexport const evaluateCondition = ({ assign, ...fnArgs }, options) => {\n    if (assign && assign in options.referenceRecord) {\n        throw new EndpointError(`'${assign}' is already defined in Reference Record.`);\n    }\n    const value = callFunction(fnArgs, options);\n    options.logger?.debug?.(debugId, `evaluateCondition: ${toDebugString(fnArgs)} = ${toDebugString(value)}`);\n    return {\n        result: value === \"\" ? true : !!value,\n        ...(assign != null && { toAssign: { name: assign, value } }),\n    };\n};\n", "import { debugId, toDebugString } from \"../debug\";\nimport { evaluateCondition } from \"./evaluateCondition\";\nexport const evaluateConditions = (conditions = [], options) => {\n    const conditionsReferenceRecord = {};\n    for (const condition of conditions) {\n        const { result, toAssign } = evaluateCondition(condition, {\n            ...options,\n            referenceRecord: {\n                ...options.referenceRecord,\n                ...conditionsReferenceRecord,\n            },\n        });\n        if (!result) {\n            return { result };\n        }\n        if (toAssign) {\n            conditionsReferenceRecord[toAssign.name] = toAssign.value;\n            options.logger?.debug?.(debugId, `assign: ${toAssign.name} := ${toDebugString(toAssign.value)}`);\n        }\n    }\n    return { result: true, referenceRecord: conditionsReferenceRecord };\n};\n", "import { EndpointError } from \"../types\";\nimport { evaluateExpression } from \"./evaluateExpression\";\nexport const getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({\n    ...acc,\n    [headerKey]: headerVal.map((headerValEntry) => {\n        const processedExpr = evaluateExpression(headerValEntry, \"Header value entry\", options);\n        if (typeof processedExpr !== \"string\") {\n            throw new EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);\n        }\n        return processedExpr;\n    }),\n}), {});\n", "import { EndpointError } from \"../types\";\nimport { evaluateTemplate } from \"./evaluateTemplate\";\nimport { getEndpointProperties } from \"./getEndpointProperties\";\nexport const getEndpointProperty = (property, options) => {\n    if (Array.isArray(property)) {\n        return property.map((propertyEntry) => getEndpointProperty(propertyEntry, options));\n    }\n    switch (typeof property) {\n        case \"string\":\n            return evaluateTemplate(property, options);\n        case \"object\":\n            if (property === null) {\n                throw new EndpointError(`Unexpected endpoint property: ${property}`);\n            }\n            return getEndpointProperties(property, options);\n        case \"boolean\":\n            return property;\n        default:\n            throw new EndpointError(`Unexpected endpoint property type: ${typeof property}`);\n    }\n};\n", "import { getEndpointProperty } from \"./getEndpointProperty\";\nexport const getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({\n    ...acc,\n    [propertyKey]: getEndpointProperty(propertyVal, options),\n}), {});\n", "import { EndpointError } from \"../types\";\nimport { evaluateExpression } from \"./evaluateExpression\";\nexport const getEndpointUrl = (endpointUrl, options) => {\n    const expression = evaluateExpression(endpointUrl, \"Endpoint URL\", options);\n    if (typeof expression === \"string\") {\n        try {\n            return new URL(expression);\n        }\n        catch (error) {\n            console.error(`Failed to construct URL with ${expression}`, error);\n            throw error;\n        }\n    }\n    throw new EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);\n};\n", "import { debugId, toDebugString } from \"../debug\";\nimport { evaluateConditions } from \"./evaluateConditions\";\nimport { getEndpointHeaders } from \"./getEndpointHeaders\";\nimport { getEndpointProperties } from \"./getEndpointProperties\";\nimport { getEndpointUrl } from \"./getEndpointUrl\";\nexport const evaluateEndpointRule = (endpointRule, options) => {\n    const { conditions, endpoint } = endpointRule;\n    const { result, referenceRecord } = evaluateConditions(conditions, options);\n    if (!result) {\n        return;\n    }\n    const endpointRuleOptions = {\n        ...options,\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n    };\n    const { url, properties, headers } = endpoint;\n    options.logger?.debug?.(debugId, `Resolving endpoint from template: ${toDebugString(endpoint)}`);\n    return {\n        ...(headers != undefined && {\n            headers: getEndpointHeaders(headers, endpointRuleOptions),\n        }),\n        ...(properties != undefined && {\n            properties: getEndpointProperties(properties, endpointRuleOptions),\n        }),\n        url: getEndpointUrl(url, endpointRuleOptions),\n    };\n};\n", "import { EndpointError } from \"../types\";\nimport { evaluateConditions } from \"./evaluateConditions\";\nimport { evaluateExpression } from \"./evaluateExpression\";\nexport const evaluateErrorRule = (errorRule, options) => {\n    const { conditions, error } = errorRule;\n    const { result, referenceRecord } = evaluateConditions(conditions, options);\n    if (!result) {\n        return;\n    }\n    throw new EndpointError(evaluateExpression(error, \"Error\", {\n        ...options,\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n    }));\n};\n", "import { evaluateConditions } from \"./evaluateConditions\";\nimport { evaluateRules } from \"./evaluateRules\";\nexport const evaluateTreeRule = (treeRule, options) => {\n    const { conditions, rules } = treeRule;\n    const { result, referenceRecord } = evaluateConditions(conditions, options);\n    if (!result) {\n        return;\n    }\n    return evaluateRules(rules, {\n        ...options,\n        referenceRecord: { ...options.referenceRecord, ...referenceRecord },\n    });\n};\n", "import { EndpointError } from \"../types\";\nimport { evaluateEndpointRule } from \"./evaluateEndpointRule\";\nimport { evaluateErrorRule } from \"./evaluateErrorRule\";\nimport { evaluateTreeRule } from \"./evaluateTreeRule\";\nexport const evaluateRules = (rules, options) => {\n    for (const rule of rules) {\n        if (rule.type === \"endpoint\") {\n            const endpointOrUndefined = evaluateEndpointRule(rule, options);\n            if (endpointOrUndefined) {\n                return endpointOrUndefined;\n            }\n        }\n        else if (rule.type === \"error\") {\n            evaluateErrorRule(rule, options);\n        }\n        else if (rule.type === \"tree\") {\n            const endpointOrUndefined = evaluateTreeRule(rule, options);\n            if (endpointOrUndefined) {\n                return endpointOrUndefined;\n            }\n        }\n        else {\n            throw new EndpointError(`Unknown endpoint rule: ${rule}`);\n        }\n    }\n    throw new EndpointError(`Rules evaluation failed`);\n};\n", "import { debugId, toDebugString } from \"./debug\";\nimport { EndpointError } from \"./types\";\nimport { evaluateRules } from \"./utils\";\nexport const resolveEndpoint = (ruleSetObject, options) => {\n    const { endpointParams, logger } = options;\n    const { parameters, rules } = ruleSetObject;\n    options.logger?.debug?.(debugId, `Initial EndpointParams: ${toDebugString(endpointParams)}`);\n    const paramsWithDefault = Object.entries(parameters)\n        .filter(([, v]) => v.default != null)\n        .map(([k, v]) => [k, v.default]);\n    if (paramsWithDefault.length > 0) {\n        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {\n            endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;\n        }\n    }\n    const requiredParams = Object.entries(parameters)\n        .filter(([, v]) => v.required)\n        .map(([k]) => k);\n    for (const requiredParam of requiredParams) {\n        if (endpointParams[requiredParam] == null) {\n            throw new EndpointError(`Missing required parameter: '${requiredParam}'`);\n        }\n    }\n    const endpoint = evaluateRules(rules, { endpointParams, logger, referenceRecord: {} });\n    if (options.endpointParams?.Endpoint) {\n        try {\n            const givenEndpoint = new URL(options.endpointParams.Endpoint);\n            const { protocol, port } = givenEndpoint;\n            endpoint.url.protocol = protocol;\n            endpoint.url.port = port;\n        }\n        catch (e) {\n        }\n    }\n    options.logger?.debug?.(debugId, `Resolved endpoint: ${toDebugString(endpoint)}`);\n    return endpoint;\n};\n", "export const USER_AGENT = \"user-agent\";\nexport const X_AMZ_USER_AGENT = \"x-amz-user-agent\";\nexport const SPACE = \" \";\nexport const UA_ESCAPE_REGEX = /[^\\!\\#\\$\\%\\&\\'\\*\\+\\-\\.\\^\\_\\`\\|\\~\\d\\w]/g;\n", "import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { getUserAgentPrefix } from \"@aws-sdk/util-endpoints\";\nimport { SPACE, UA_ESCAPE_REGEX, USER_AGENT, X_AMZ_USER_AGENT } from \"./constants\";\nexport const userAgentMiddleware = (options) => (next, context) => async (args) => {\n    const { request } = args;\n    if (!HttpRequest.isInstance(request))\n        return next(args);\n    const { headers } = request;\n    const userAgent = context?.userAgent?.map(escapeUserAgent) || [];\n    const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);\n    const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];\n    const prefix = getUserAgentPrefix();\n    const sdkUserAgentValue = (prefix ? [prefix] : [])\n        .concat([...defaultUserAgent, ...userAgent, ...customUserAgent])\n        .join(SPACE);\n    const normalUAValue = [\n        ...defaultUserAgent.filter((section) => section.startsWith(\"aws-sdk-\")),\n        ...customUserAgent,\n    ].join(SPACE);\n    if (options.runtime !== \"browser\") {\n        if (normalUAValue) {\n            headers[X_AMZ_USER_AGENT] = headers[X_AMZ_USER_AGENT]\n                ? `${headers[USER_AGENT]} ${normalUAValue}`\n                : normalUAValue;\n        }\n        headers[USER_AGENT] = sdkUserAgentValue;\n    }\n    else {\n        headers[X_AMZ_USER_AGENT] = sdkUserAgentValue;\n    }\n    return next({\n        ...args,\n        request,\n    });\n};\nconst escapeUserAgent = ([name, version]) => {\n    const prefixSeparatorIndex = name.indexOf(\"/\");\n    const prefix = name.substring(0, prefixSeparatorIndex);\n    let uaName = name.substring(prefixSeparatorIndex + 1);\n    if (prefix === \"api\") {\n        uaName = uaName.toLowerCase();\n    }\n    return [prefix, uaName, version]\n        .filter((item) => item && item.length > 0)\n        .map((item) => item?.replace(UA_ESCAPE_REGEX, \"_\"))\n        .join(\"/\");\n};\nexport const getUserAgentMiddlewareOptions = {\n    name: \"getUserAgentMiddleware\",\n    step: \"build\",\n    priority: \"low\",\n    tags: [\"SET_USER_AGENT\", \"USER_AGENT\"],\n    override: true,\n};\nexport const getUserAgentPlugin = (config) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);\n    },\n});\n", "export const resolveClientEndpointParameters = (options) => {\n    return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        defaultSigningName: \"ssm\",\n    };\n};\n", "{\n  \"name\": \"@aws-sdk/client-ssm\",\n  \"description\": \"AWS SDK for JavaScript Ssm Client for Node.js, Browser and React Native\",\n  \"version\": \"3.321.1\",\n  \"scripts\": {\n    \"build\": \"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\",\n    \"build:cjs\": \"tsc -p tsconfig.cjs.json\",\n    \"build:docs\": \"typedoc\",\n    \"build:es\": \"tsc -p tsconfig.es.json\",\n    \"build:include:deps\": \"lerna run --scope $npm_package_name --include-dependencies build\",\n    \"build:types\": \"tsc -p tsconfig.types.json\",\n    \"build:types:downlevel\": \"downlevel-dts dist-types dist-types/ts3.4\",\n    \"clean\": \"rimraf ./dist-* && rimraf *.tsbuildinfo\",\n    \"extract:docs\": \"api-extractor run --local\",\n    \"generate:client\": \"node ../../scripts/generate-clients/single-service --solo ssm\"\n  },\n  \"main\": \"./dist-cjs/index.js\",\n  \"types\": \"./dist-types/index.d.ts\",\n  \"module\": \"./dist-es/index.js\",\n  \"sideEffects\": false,\n  \"dependencies\": {\n    \"@aws-crypto/sha256-browser\": \"3.0.0\",\n    \"@aws-crypto/sha256-js\": \"3.0.0\",\n    \"@aws-sdk/client-sts\": \"3.321.1\",\n    \"@aws-sdk/config-resolver\": \"3.310.0\",\n    \"@aws-sdk/credential-provider-node\": \"3.321.1\",\n    \"@aws-sdk/fetch-http-handler\": \"3.310.0\",\n    \"@aws-sdk/hash-node\": \"3.310.0\",\n    \"@aws-sdk/invalid-dependency\": \"3.310.0\",\n    \"@aws-sdk/middleware-content-length\": \"3.310.0\",\n    \"@aws-sdk/middleware-endpoint\": \"3.310.0\",\n    \"@aws-sdk/middleware-host-header\": \"3.310.0\",\n    \"@aws-sdk/middleware-logger\": \"3.310.0\",\n    \"@aws-sdk/middleware-recursion-detection\": \"3.310.0\",\n    \"@aws-sdk/middleware-retry\": \"3.310.0\",\n    \"@aws-sdk/middleware-serde\": \"3.310.0\",\n    \"@aws-sdk/middleware-signing\": \"3.310.0\",\n    \"@aws-sdk/middleware-stack\": \"3.310.0\",\n    \"@aws-sdk/middleware-user-agent\": \"3.319.0\",\n    \"@aws-sdk/node-config-provider\": \"3.310.0\",\n    \"@aws-sdk/node-http-handler\": \"3.321.1\",\n    \"@aws-sdk/protocol-http\": \"3.310.0\",\n    \"@aws-sdk/smithy-client\": \"3.316.0\",\n    \"@aws-sdk/types\": \"3.310.0\",\n    \"@aws-sdk/url-parser\": \"3.310.0\",\n    \"@aws-sdk/util-base64\": \"3.310.0\",\n    \"@aws-sdk/util-body-length-browser\": \"3.310.0\",\n    \"@aws-sdk/util-body-length-node\": \"3.310.0\",\n    \"@aws-sdk/util-defaults-mode-browser\": \"3.316.0\",\n    \"@aws-sdk/util-defaults-mode-node\": \"3.316.0\",\n    \"@aws-sdk/util-endpoints\": \"3.319.0\",\n    \"@aws-sdk/util-retry\": \"3.310.0\",\n    \"@aws-sdk/util-user-agent-browser\": \"3.310.0\",\n    \"@aws-sdk/util-user-agent-node\": \"3.310.0\",\n    \"@aws-sdk/util-utf8\": \"3.310.0\",\n    \"@aws-sdk/util-waiter\": \"3.310.0\",\n    \"tslib\": \"^2.5.0\",\n    \"uuid\": \"^8.3.2\"\n  },\n  \"devDependencies\": {\n    \"@aws-sdk/service-client-documentation-generator\": \"3.310.0\",\n    \"@tsconfig/node14\": \"1.0.3\",\n    \"@types/node\": \"^14.14.31\",\n    \"@types/uuid\": \"^8.3.0\",\n    \"concurrently\": \"7.0.0\",\n    \"downlevel-dts\": \"0.10.1\",\n    \"rimraf\": \"3.0.2\",\n    \"typedoc\": \"0.23.23\",\n    \"typescript\": \"~4.9.5\"\n  },\n  \"engines\": {\n    \"node\": \">=14.0.0\"\n  },\n  \"typesVersions\": {\n    \"<4.0\": {\n      \"dist-types/*\": [\n        \"dist-types/ts3.4/*\"\n      ]\n    }\n  },\n  \"files\": [\n    \"dist-*/**\"\n  ],\n  \"author\": {\n    \"name\": \"AWS SDK for JavaScript Team\",\n    \"url\": \"https://aws.amazon.com/javascript/\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"browser\": {\n    \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.browser\"\n  },\n  \"react-native\": {\n    \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.native\"\n  },\n  \"homepage\": \"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-ssm\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/aws/aws-sdk-js-v3.git\",\n    \"directory\": \"clients/client-ssm\"\n  }\n}\n", "import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getValueFromTextNode as __getValueFromTextNode, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, strictParseInt32 as __strictParseInt32, withBaseException, } from \"@aws-sdk/smithy-client\";\nimport { XMLParser } from \"fast-xml-parser\";\nimport { ExpiredTokenException, IDPCommunicationErrorException, IDPRejectedClaimException, InvalidAuthorizationMessageException, InvalidIdentityTokenException, MalformedPolicyDocumentException, PackedPolicyTooLargeException, RegionDisabledException, } from \"../models/models_0\";\nimport { STSServiceException as __BaseException } from \"../models/STSServiceException\";\nexport const se_AssumeRoleCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_AssumeRoleRequest(input, context),\n        Action: \"AssumeRole\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_AssumeRoleWithSAMLCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_AssumeRoleWithSAMLRequest(input, context),\n        Action: \"AssumeRoleWithSAML\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_AssumeRoleWithWebIdentityCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_AssumeRoleWithWebIdentityRequest(input, context),\n        Action: \"AssumeRoleWithWebIdentity\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DecodeAuthorizationMessageCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_DecodeAuthorizationMessageRequest(input, context),\n        Action: \"DecodeAuthorizationMessage\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetAccessKeyInfoCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_GetAccessKeyInfoRequest(input, context),\n        Action: \"GetAccessKeyInfo\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetCallerIdentityCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_GetCallerIdentityRequest(input, context),\n        Action: \"GetCallerIdentity\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetFederationTokenCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_GetFederationTokenRequest(input, context),\n        Action: \"GetFederationToken\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetSessionTokenCommand = async (input, context) => {\n    const headers = SHARED_HEADERS;\n    let body;\n    body = buildFormUrlencodedString({\n        ...se_GetSessionTokenRequest(input, context),\n        Action: \"GetSessionToken\",\n        Version: \"2011-06-15\",\n    });\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const de_AssumeRoleCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_AssumeRoleCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_AssumeRoleResponse(data.AssumeRoleResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_AssumeRoleCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await de_RegionDisabledExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nexport const de_AssumeRoleWithSAMLCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_AssumeRoleWithSAMLCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_AssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_AssumeRoleWithSAMLCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);\n        case \"IDPRejectedClaim\":\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\n            throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);\n        case \"InvalidIdentityToken\":\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n            throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await de_RegionDisabledExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nexport const de_AssumeRoleWithWebIdentityCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_AssumeRoleWithWebIdentityCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_AssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_AssumeRoleWithWebIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.sts#ExpiredTokenException\":\n            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);\n        case \"IDPCommunicationError\":\n        case \"com.amazonaws.sts#IDPCommunicationErrorException\":\n            throw await de_IDPCommunicationErrorExceptionRes(parsedOutput, context);\n        case \"IDPRejectedClaim\":\n        case \"com.amazonaws.sts#IDPRejectedClaimException\":\n            throw await de_IDPRejectedClaimExceptionRes(parsedOutput, context);\n        case \"InvalidIdentityToken\":\n        case \"com.amazonaws.sts#InvalidIdentityTokenException\":\n            throw await de_InvalidIdentityTokenExceptionRes(parsedOutput, context);\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await de_RegionDisabledExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nexport const de_DecodeAuthorizationMessageCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DecodeAuthorizationMessageCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DecodeAuthorizationMessageCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidAuthorizationMessageException\":\n        case \"com.amazonaws.sts#InvalidAuthorizationMessageException\":\n            throw await de_InvalidAuthorizationMessageExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nexport const de_GetAccessKeyInfoCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetAccessKeyInfoCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetAccessKeyInfoCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        errorCode,\n    });\n};\nexport const de_GetCallerIdentityCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetCallerIdentityCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetCallerIdentityResponse(data.GetCallerIdentityResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetCallerIdentityCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    const parsedBody = parsedOutput.body;\n    return throwDefaultError({\n        output,\n        parsedBody: parsedBody.Error,\n        errorCode,\n    });\n};\nexport const de_GetFederationTokenCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetFederationTokenCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetFederationTokenResponse(data.GetFederationTokenResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetFederationTokenCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"MalformedPolicyDocument\":\n        case \"com.amazonaws.sts#MalformedPolicyDocumentException\":\n            throw await de_MalformedPolicyDocumentExceptionRes(parsedOutput, context);\n        case \"PackedPolicyTooLarge\":\n        case \"com.amazonaws.sts#PackedPolicyTooLargeException\":\n            throw await de_PackedPolicyTooLargeExceptionRes(parsedOutput, context);\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await de_RegionDisabledExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nexport const de_GetSessionTokenCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetSessionTokenCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetSessionTokenResponse(data.GetSessionTokenResult, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetSessionTokenCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadQueryErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"RegionDisabledException\":\n        case \"com.amazonaws.sts#RegionDisabledException\":\n            throw await de_RegionDisabledExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody: parsedBody.Error,\n                errorCode,\n            });\n    }\n};\nconst de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_ExpiredTokenException(body.Error, context);\n    const exception = new ExpiredTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_IDPCommunicationErrorExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_IDPCommunicationErrorException(body.Error, context);\n    const exception = new IDPCommunicationErrorException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_IDPRejectedClaimExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_IDPRejectedClaimException(body.Error, context);\n    const exception = new IDPRejectedClaimException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidAuthorizationMessageExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_InvalidAuthorizationMessageException(body.Error, context);\n    const exception = new InvalidAuthorizationMessageException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidIdentityTokenExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_InvalidIdentityTokenException(body.Error, context);\n    const exception = new InvalidIdentityTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_MalformedPolicyDocumentExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_MalformedPolicyDocumentException(body.Error, context);\n    const exception = new MalformedPolicyDocumentException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_PackedPolicyTooLargeExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_PackedPolicyTooLargeException(body.Error, context);\n    const exception = new PackedPolicyTooLargeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_RegionDisabledExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = de_RegionDisabledException(body.Error, context);\n    const exception = new RegionDisabledException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst se_AssumeRoleRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn != null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.RoleSessionName != null) {\n        entries[\"RoleSessionName\"] = input.RoleSessionName;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.Tags != null) {\n        const memberEntries = se_tagListType(input.Tags, context);\n        if (input.Tags?.length === 0) {\n            entries.Tags = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `Tags.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.TransitiveTagKeys != null) {\n        const memberEntries = se_tagKeyListType(input.TransitiveTagKeys, context);\n        if (input.TransitiveTagKeys?.length === 0) {\n            entries.TransitiveTagKeys = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `TransitiveTagKeys.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.ExternalId != null) {\n        entries[\"ExternalId\"] = input.ExternalId;\n    }\n    if (input.SerialNumber != null) {\n        entries[\"SerialNumber\"] = input.SerialNumber;\n    }\n    if (input.TokenCode != null) {\n        entries[\"TokenCode\"] = input.TokenCode;\n    }\n    if (input.SourceIdentity != null) {\n        entries[\"SourceIdentity\"] = input.SourceIdentity;\n    }\n    return entries;\n};\nconst se_AssumeRoleWithSAMLRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn != null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.PrincipalArn != null) {\n        entries[\"PrincipalArn\"] = input.PrincipalArn;\n    }\n    if (input.SAMLAssertion != null) {\n        entries[\"SAMLAssertion\"] = input.SAMLAssertion;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    return entries;\n};\nconst se_AssumeRoleWithWebIdentityRequest = (input, context) => {\n    const entries = {};\n    if (input.RoleArn != null) {\n        entries[\"RoleArn\"] = input.RoleArn;\n    }\n    if (input.RoleSessionName != null) {\n        entries[\"RoleSessionName\"] = input.RoleSessionName;\n    }\n    if (input.WebIdentityToken != null) {\n        entries[\"WebIdentityToken\"] = input.WebIdentityToken;\n    }\n    if (input.ProviderId != null) {\n        entries[\"ProviderId\"] = input.ProviderId;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    return entries;\n};\nconst se_DecodeAuthorizationMessageRequest = (input, context) => {\n    const entries = {};\n    if (input.EncodedMessage != null) {\n        entries[\"EncodedMessage\"] = input.EncodedMessage;\n    }\n    return entries;\n};\nconst se_GetAccessKeyInfoRequest = (input, context) => {\n    const entries = {};\n    if (input.AccessKeyId != null) {\n        entries[\"AccessKeyId\"] = input.AccessKeyId;\n    }\n    return entries;\n};\nconst se_GetCallerIdentityRequest = (input, context) => {\n    const entries = {};\n    return entries;\n};\nconst se_GetFederationTokenRequest = (input, context) => {\n    const entries = {};\n    if (input.Name != null) {\n        entries[\"Name\"] = input.Name;\n    }\n    if (input.Policy != null) {\n        entries[\"Policy\"] = input.Policy;\n    }\n    if (input.PolicyArns != null) {\n        const memberEntries = se_policyDescriptorListType(input.PolicyArns, context);\n        if (input.PolicyArns?.length === 0) {\n            entries.PolicyArns = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `PolicyArns.${key}`;\n            entries[loc] = value;\n        });\n    }\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.Tags != null) {\n        const memberEntries = se_tagListType(input.Tags, context);\n        if (input.Tags?.length === 0) {\n            entries.Tags = [];\n        }\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            const loc = `Tags.${key}`;\n            entries[loc] = value;\n        });\n    }\n    return entries;\n};\nconst se_GetSessionTokenRequest = (input, context) => {\n    const entries = {};\n    if (input.DurationSeconds != null) {\n        entries[\"DurationSeconds\"] = input.DurationSeconds;\n    }\n    if (input.SerialNumber != null) {\n        entries[\"SerialNumber\"] = input.SerialNumber;\n    }\n    if (input.TokenCode != null) {\n        entries[\"TokenCode\"] = input.TokenCode;\n    }\n    return entries;\n};\nconst se_policyDescriptorListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = se_PolicyDescriptorType(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst se_PolicyDescriptorType = (input, context) => {\n    const entries = {};\n    if (input.arn != null) {\n        entries[\"arn\"] = input.arn;\n    }\n    return entries;\n};\nconst se_Tag = (input, context) => {\n    const entries = {};\n    if (input.Key != null) {\n        entries[\"Key\"] = input.Key;\n    }\n    if (input.Value != null) {\n        entries[\"Value\"] = input.Value;\n    }\n    return entries;\n};\nconst se_tagKeyListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        entries[`member.${counter}`] = entry;\n        counter++;\n    }\n    return entries;\n};\nconst se_tagListType = (input, context) => {\n    const entries = {};\n    let counter = 1;\n    for (const entry of input) {\n        if (entry === null) {\n            continue;\n        }\n        const memberEntries = se_Tag(entry, context);\n        Object.entries(memberEntries).forEach(([key, value]) => {\n            entries[`member.${counter}.${key}`] = value;\n        });\n        counter++;\n    }\n    return entries;\n};\nconst de_AssumedRoleUser = (output, context) => {\n    const contents = {};\n    if (output[\"AssumedRoleId\"] !== undefined) {\n        contents.AssumedRoleId = __expectString(output[\"AssumedRoleId\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = __expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst de_AssumeRoleResponse = (output, context) => {\n    const contents = {};\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = de_Credentials(output[\"Credentials\"], context);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = de_AssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst de_AssumeRoleWithSAMLResponse = (output, context) => {\n    const contents = {};\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = de_Credentials(output[\"Credentials\"], context);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = de_AssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"Subject\"] !== undefined) {\n        contents.Subject = __expectString(output[\"Subject\"]);\n    }\n    if (output[\"SubjectType\"] !== undefined) {\n        contents.SubjectType = __expectString(output[\"SubjectType\"]);\n    }\n    if (output[\"Issuer\"] !== undefined) {\n        contents.Issuer = __expectString(output[\"Issuer\"]);\n    }\n    if (output[\"Audience\"] !== undefined) {\n        contents.Audience = __expectString(output[\"Audience\"]);\n    }\n    if (output[\"NameQualifier\"] !== undefined) {\n        contents.NameQualifier = __expectString(output[\"NameQualifier\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst de_AssumeRoleWithWebIdentityResponse = (output, context) => {\n    const contents = {};\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = de_Credentials(output[\"Credentials\"], context);\n    }\n    if (output[\"SubjectFromWebIdentityToken\"] !== undefined) {\n        contents.SubjectFromWebIdentityToken = __expectString(output[\"SubjectFromWebIdentityToken\"]);\n    }\n    if (output[\"AssumedRoleUser\"] !== undefined) {\n        contents.AssumedRoleUser = de_AssumedRoleUser(output[\"AssumedRoleUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    if (output[\"Provider\"] !== undefined) {\n        contents.Provider = __expectString(output[\"Provider\"]);\n    }\n    if (output[\"Audience\"] !== undefined) {\n        contents.Audience = __expectString(output[\"Audience\"]);\n    }\n    if (output[\"SourceIdentity\"] !== undefined) {\n        contents.SourceIdentity = __expectString(output[\"SourceIdentity\"]);\n    }\n    return contents;\n};\nconst de_Credentials = (output, context) => {\n    const contents = {};\n    if (output[\"AccessKeyId\"] !== undefined) {\n        contents.AccessKeyId = __expectString(output[\"AccessKeyId\"]);\n    }\n    if (output[\"SecretAccessKey\"] !== undefined) {\n        contents.SecretAccessKey = __expectString(output[\"SecretAccessKey\"]);\n    }\n    if (output[\"SessionToken\"] !== undefined) {\n        contents.SessionToken = __expectString(output[\"SessionToken\"]);\n    }\n    if (output[\"Expiration\"] !== undefined) {\n        contents.Expiration = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[\"Expiration\"]));\n    }\n    return contents;\n};\nconst de_DecodeAuthorizationMessageResponse = (output, context) => {\n    const contents = {};\n    if (output[\"DecodedMessage\"] !== undefined) {\n        contents.DecodedMessage = __expectString(output[\"DecodedMessage\"]);\n    }\n    return contents;\n};\nconst de_ExpiredTokenException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_FederatedUser = (output, context) => {\n    const contents = {};\n    if (output[\"FederatedUserId\"] !== undefined) {\n        contents.FederatedUserId = __expectString(output[\"FederatedUserId\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = __expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst de_GetAccessKeyInfoResponse = (output, context) => {\n    const contents = {};\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = __expectString(output[\"Account\"]);\n    }\n    return contents;\n};\nconst de_GetCallerIdentityResponse = (output, context) => {\n    const contents = {};\n    if (output[\"UserId\"] !== undefined) {\n        contents.UserId = __expectString(output[\"UserId\"]);\n    }\n    if (output[\"Account\"] !== undefined) {\n        contents.Account = __expectString(output[\"Account\"]);\n    }\n    if (output[\"Arn\"] !== undefined) {\n        contents.Arn = __expectString(output[\"Arn\"]);\n    }\n    return contents;\n};\nconst de_GetFederationTokenResponse = (output, context) => {\n    const contents = {};\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = de_Credentials(output[\"Credentials\"], context);\n    }\n    if (output[\"FederatedUser\"] !== undefined) {\n        contents.FederatedUser = de_FederatedUser(output[\"FederatedUser\"], context);\n    }\n    if (output[\"PackedPolicySize\"] !== undefined) {\n        contents.PackedPolicySize = __strictParseInt32(output[\"PackedPolicySize\"]);\n    }\n    return contents;\n};\nconst de_GetSessionTokenResponse = (output, context) => {\n    const contents = {};\n    if (output[\"Credentials\"] !== undefined) {\n        contents.Credentials = de_Credentials(output[\"Credentials\"], context);\n    }\n    return contents;\n};\nconst de_IDPCommunicationErrorException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_IDPRejectedClaimException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_InvalidAuthorizationMessageException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_InvalidIdentityTokenException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_MalformedPolicyDocumentException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_PackedPolicyTooLargeException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst de_RegionDisabledException = (output, context) => {\n    const contents = {};\n    if (output[\"message\"] !== undefined) {\n        contents.message = __expectString(output[\"message\"]);\n    }\n    return contents;\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst throwDefaultError = withBaseException(__BaseException);\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const contents = {\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n        headers,\n    };\n    if (resolvedHostname !== undefined) {\n        contents.hostname = resolvedHostname;\n    }\n    if (body !== undefined) {\n        contents.body = body;\n    }\n    return new __HttpRequest(contents);\n};\nconst SHARED_HEADERS = {\n    \"content-type\": \"application/x-www-form-urlencoded\",\n};\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        const parser = new XMLParser({\n            attributeNamePrefix: \"\",\n            htmlEntities: true,\n            ignoreAttributes: false,\n            ignoreDeclaration: true,\n            parseTagValue: false,\n            trimValues: false,\n            tagValueProcessor: (_, val) => (val.trim() === \"\" && val.includes(\"\\n\") ? \"\" : undefined),\n        });\n        parser.addEntity(\"#xD\", \"\\r\");\n        parser.addEntity(\"#10\", \"\\n\");\n        const parsedObj = parser.parse(encoded);\n        const textNodeName = \"#text\";\n        const key = Object.keys(parsedObj)[0];\n        const parsedObjToReturn = parsedObj[key];\n        if (parsedObjToReturn[textNodeName]) {\n            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];\n            delete parsedObjToReturn[textNodeName];\n        }\n        return __getValueFromTextNode(parsedObjToReturn);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    if (value.Error) {\n        value.Error.message = value.Error.message ?? value.Error.Message;\n    }\n    return value;\n};\nconst buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)\n    .map(([key, value]) => __extendedEncodeURIComponent(key) + \"=\" + __extendedEncodeURIComponent(value))\n    .join(\"&\");\nconst loadQueryErrorCode = (output, data) => {\n    if (data.Error?.Code !== undefined) {\n        return data.Error.Code;\n    }\n    if (output.statusCode == 404) {\n        return \"NotFound\";\n    }\n};\n", "import { ServiceException as __ServiceException, } from \"@aws-sdk/smithy-client\";\nexport class STSServiceException extends __ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, STSServiceException.prototype);\n    }\n}\n", "import { STSServiceException as __BaseException } from \"./STSServiceException\";\nexport class ExpiredTokenException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ExpiredTokenException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ExpiredTokenException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ExpiredTokenException.prototype);\n    }\n}\nexport class MalformedPolicyDocumentException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"MalformedPolicyDocumentException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"MalformedPolicyDocumentException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);\n    }\n}\nexport class PackedPolicyTooLargeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"PackedPolicyTooLargeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"PackedPolicyTooLargeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);\n    }\n}\nexport class RegionDisabledException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"RegionDisabledException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"RegionDisabledException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, RegionDisabledException.prototype);\n    }\n}\nexport class IDPRejectedClaimException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"IDPRejectedClaimException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"IDPRejectedClaimException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);\n    }\n}\nexport class InvalidIdentityTokenException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidIdentityTokenException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidIdentityTokenException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);\n    }\n}\nexport class IDPCommunicationErrorException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"IDPCommunicationErrorException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"IDPCommunicationErrorException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);\n    }\n}\nexport class InvalidAuthorizationMessageException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidAuthorizationMessageException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidAuthorizationMessageException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);\n    }\n}\n", "import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getAwsAuthPlugin } from \"@aws-sdk/middleware-signing\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { de_AssumeRoleCommand, se_AssumeRoleCommand } from \"../protocols/Aws_query\";\nexport class AssumeRoleCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, AssumeRoleCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use(getAwsAuthPlugin(configuration));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"AssumeRoleCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (_) => _,\n            outputFilterSensitiveLog: (_) => _,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_AssumeRoleCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_AssumeRoleCommand(output, context);\n    }\n}\n", "import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { de_AssumeRoleWithWebIdentityCommand, se_AssumeRoleWithWebIdentityCommand } from \"../protocols/Aws_query\";\nexport class AssumeRoleWithWebIdentityCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseGlobalEndpoint: { type: \"builtInParams\", name: \"useGlobalEndpoint\" },\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"STSClient\";\n        const commandName = \"AssumeRoleWithWebIdentityCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (_) => _,\n            outputFilterSensitiveLog: (_) => _,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_AssumeRoleWithWebIdentityCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_AssumeRoleWithWebIdentityCommand(output, context);\n    }\n}\n", "import { resolveAwsAuthConfig } from \"@aws-sdk/middleware-signing\";\nexport const resolveStsAuthConfig = (input, { stsClientCtor }) => resolveAwsAuthConfig({\n    ...input,\n    stsClientCtor,\n});\n", "export const resolveClientEndpointParameters = (options) => {\n    return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        useGlobalEndpoint: options.useGlobalEndpoint ?? false,\n        defaultSigningName: \"sts\",\n    };\n};\n", "{\n  \"name\": \"@aws-sdk/client-sts\",\n  \"description\": \"AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native\",\n  \"version\": \"3.321.1\",\n  \"scripts\": {\n    \"build\": \"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\",\n    \"build:cjs\": \"tsc -p tsconfig.cjs.json\",\n    \"build:docs\": \"typedoc\",\n    \"build:es\": \"tsc -p tsconfig.es.json\",\n    \"build:include:deps\": \"lerna run --scope $npm_package_name --include-dependencies build\",\n    \"build:types\": \"tsc -p tsconfig.types.json\",\n    \"build:types:downlevel\": \"downlevel-dts dist-types dist-types/ts3.4\",\n    \"clean\": \"rimraf ./dist-* && rimraf *.tsbuildinfo\",\n    \"extract:docs\": \"api-extractor run --local\",\n    \"generate:client\": \"node ../../scripts/generate-clients/single-service --solo sts\",\n    \"test\": \"yarn test:unit\",\n    \"test:unit\": \"jest\"\n  },\n  \"main\": \"./dist-cjs/index.js\",\n  \"types\": \"./dist-types/index.d.ts\",\n  \"module\": \"./dist-es/index.js\",\n  \"sideEffects\": false,\n  \"dependencies\": {\n    \"@aws-crypto/sha256-browser\": \"3.0.0\",\n    \"@aws-crypto/sha256-js\": \"3.0.0\",\n    \"@aws-sdk/config-resolver\": \"3.310.0\",\n    \"@aws-sdk/credential-provider-node\": \"3.321.1\",\n    \"@aws-sdk/fetch-http-handler\": \"3.310.0\",\n    \"@aws-sdk/hash-node\": \"3.310.0\",\n    \"@aws-sdk/invalid-dependency\": \"3.310.0\",\n    \"@aws-sdk/middleware-content-length\": \"3.310.0\",\n    \"@aws-sdk/middleware-endpoint\": \"3.310.0\",\n    \"@aws-sdk/middleware-host-header\": \"3.310.0\",\n    \"@aws-sdk/middleware-logger\": \"3.310.0\",\n    \"@aws-sdk/middleware-recursion-detection\": \"3.310.0\",\n    \"@aws-sdk/middleware-retry\": \"3.310.0\",\n    \"@aws-sdk/middleware-sdk-sts\": \"3.310.0\",\n    \"@aws-sdk/middleware-serde\": \"3.310.0\",\n    \"@aws-sdk/middleware-signing\": \"3.310.0\",\n    \"@aws-sdk/middleware-stack\": \"3.310.0\",\n    \"@aws-sdk/middleware-user-agent\": \"3.319.0\",\n    \"@aws-sdk/node-config-provider\": \"3.310.0\",\n    \"@aws-sdk/node-http-handler\": \"3.321.1\",\n    \"@aws-sdk/protocol-http\": \"3.310.0\",\n    \"@aws-sdk/smithy-client\": \"3.316.0\",\n    \"@aws-sdk/types\": \"3.310.0\",\n    \"@aws-sdk/url-parser\": \"3.310.0\",\n    \"@aws-sdk/util-base64\": \"3.310.0\",\n    \"@aws-sdk/util-body-length-browser\": \"3.310.0\",\n    \"@aws-sdk/util-body-length-node\": \"3.310.0\",\n    \"@aws-sdk/util-defaults-mode-browser\": \"3.316.0\",\n    \"@aws-sdk/util-defaults-mode-node\": \"3.316.0\",\n    \"@aws-sdk/util-endpoints\": \"3.319.0\",\n    \"@aws-sdk/util-retry\": \"3.310.0\",\n    \"@aws-sdk/util-user-agent-browser\": \"3.310.0\",\n    \"@aws-sdk/util-user-agent-node\": \"3.310.0\",\n    \"@aws-sdk/util-utf8\": \"3.310.0\",\n    \"fast-xml-parser\": \"4.1.2\",\n    \"tslib\": \"^2.5.0\"\n  },\n  \"devDependencies\": {\n    \"@aws-sdk/service-client-documentation-generator\": \"3.310.0\",\n    \"@tsconfig/node14\": \"1.0.3\",\n    \"@types/node\": \"^14.14.31\",\n    \"concurrently\": \"7.0.0\",\n    \"downlevel-dts\": \"0.10.1\",\n    \"rimraf\": \"3.0.2\",\n    \"typedoc\": \"0.23.23\",\n    \"typescript\": \"~4.9.5\"\n  },\n  \"engines\": {\n    \"node\": \">=14.0.0\"\n  },\n  \"typesVersions\": {\n    \"<4.0\": {\n      \"dist-types/*\": [\n        \"dist-types/ts3.4/*\"\n      ]\n    }\n  },\n  \"files\": [\n    \"dist-*/**\"\n  ],\n  \"author\": {\n    \"name\": \"AWS SDK for JavaScript Team\",\n    \"url\": \"https://aws.amazon.com/javascript/\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"browser\": {\n    \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.browser\"\n  },\n  \"react-native\": {\n    \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.native\"\n  },\n  \"homepage\": \"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/aws/aws-sdk-js-v3.git\",\n    \"directory\": \"clients/client-sts\"\n  }\n}\n", "import { AssumeRoleCommand } from \"./commands/AssumeRoleCommand\";\nimport { AssumeRoleWithWebIdentityCommand, } from \"./commands/AssumeRoleWithWebIdentityCommand\";\nconst ASSUME_ROLE_DEFAULT_REGION = \"us-east-1\";\nconst decorateDefaultRegion = (region) => {\n    if (typeof region !== \"function\") {\n        return region === undefined ? ASSUME_ROLE_DEFAULT_REGION : region;\n    }\n    return async () => {\n        try {\n            return await region();\n        }\n        catch (e) {\n            return ASSUME_ROLE_DEFAULT_REGION;\n        }\n    };\n};\nexport const getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    let closureSourceCreds;\n    return async (sourceCreds, params) => {\n        closureSourceCreds = sourceCreds;\n        if (!stsClient) {\n            const { logger, region, requestHandler } = stsOptions;\n            stsClient = new stsClientCtor({\n                logger,\n                credentialDefaultProvider: () => async () => closureSourceCreds,\n                region: decorateDefaultRegion(region || stsOptions.region),\n                ...(requestHandler ? { requestHandler } : {}),\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n        };\n    };\n};\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {\n    let stsClient;\n    return async (params) => {\n        if (!stsClient) {\n            const { logger, region, requestHandler } = stsOptions;\n            stsClient = new stsClientCtor({\n                logger,\n                region: decorateDefaultRegion(region || stsOptions.region),\n                ...(requestHandler ? { requestHandler } : {}),\n            });\n        }\n        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand(params));\n        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {\n            throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);\n        }\n        return {\n            accessKeyId: Credentials.AccessKeyId,\n            secretAccessKey: Credentials.SecretAccessKey,\n            sessionToken: Credentials.SessionToken,\n            expiration: Credentials.Expiration,\n        };\n    };\n};\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input, input.stsClientCtor),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input, input.stsClientCtor),\n    ...input,\n});\n", "import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const ENV_KEY = \"AWS_ACCESS_KEY_ID\";\nexport const ENV_SECRET = \"AWS_SECRET_ACCESS_KEY\";\nexport const ENV_SESSION = \"AWS_SESSION_TOKEN\";\nexport const ENV_EXPIRATION = \"AWS_CREDENTIAL_EXPIRATION\";\nexport const fromEnv = () => async () => {\n    const accessKeyId = process.env[ENV_KEY];\n    const secretAccessKey = process.env[ENV_SECRET];\n    const sessionToken = process.env[ENV_SESSION];\n    const expiry = process.env[ENV_EXPIRATION];\n    if (accessKeyId && secretAccessKey) {\n        return {\n            accessKeyId,\n            secretAccessKey,\n            ...(sessionToken && { sessionToken }),\n            ...(expiry && { expiration: new Date(expiry) }),\n        };\n    }\n    throw new CredentialsProviderError(\"Unable to find environment variable credentials.\");\n};\n", "import { homedir } from \"os\";\nimport { sep } from \"path\";\nexport const getHomeDir = () => {\n    const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${sep}` } = process.env;\n    if (HOME)\n        return HOME;\n    if (USERPROFILE)\n        return USERPROFILE;\n    if (HOMEPATH)\n        return `${HOMEDRIVE}${HOMEPATH}`;\n    return homedir();\n};\n", "export const ENV_PROFILE = \"AWS_PROFILE\";\nexport const DEFAULT_PROFILE = \"default\";\nexport const getProfileName = (init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE;\n", "import { createHash } from \"crypto\";\nimport { join } from \"path\";\nimport { getHomeDir } from \"./getHomeDir\";\nexport const getSSOTokenFilepath = (id) => {\n    const hasher = createHash(\"sha1\");\n    const cacheName = hasher.update(id).digest(\"hex\");\n    return join(getHomeDir(), \".aws\", \"sso\", \"cache\", `${cacheName}.json`);\n};\n", "import { promises as fsPromises } from \"fs\";\nimport { getSSOTokenFilepath } from \"./getSSOTokenFilepath\";\nconst { readFile } = fsPromises;\nexport const getSSOTokenFromFile = async (id) => {\n    const ssoTokenFilepath = getSSOTokenFilepath(id);\n    const ssoTokenText = await readFile(ssoTokenFilepath, \"utf8\");\n    return JSON.parse(ssoTokenText);\n};\n", "import { join } from \"path\";\nimport { getHomeDir } from \"./getHomeDir\";\nexport const ENV_CONFIG_PATH = \"AWS_CONFIG_FILE\";\nexport const getConfigFilepath = () => process.env[ENV_CONFIG_PATH] || join(getHomeDir(), \".aws\", \"config\");\n", "import { join } from \"path\";\nimport { getHomeDir } from \"./getHomeDir\";\nexport const ENV_CREDENTIALS_PATH = \"AWS_SHARED_CREDENTIALS_FILE\";\nexport const getCredentialsFilepath = () => process.env[ENV_CREDENTIALS_PATH] || join(getHomeDir(), \".aws\", \"credentials\");\n", "const profileKeyRegex = /^profile\\s([\"'])?([^\\1]+)\\1$/;\nexport const getProfileData = (data) => Object.entries(data)\n    .filter(([key]) => profileKeyRegex.test(key))\n    .reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {\n    ...(data.default && { default: data.default }),\n});\n", "const profileNameBlockList = [\"__proto__\", \"profile __proto__\"];\nexport const parseIni = (iniData) => {\n    const map = {};\n    let currentSection;\n    for (let line of iniData.split(/\\r?\\n/)) {\n        line = line.split(/(^|\\s)[;#]/)[0].trim();\n        const isSection = line[0] === \"[\" && line[line.length - 1] === \"]\";\n        if (isSection) {\n            currentSection = line.substring(1, line.length - 1);\n            if (profileNameBlockList.includes(currentSection)) {\n                throw new Error(`Found invalid profile name \"${currentSection}\"`);\n            }\n        }\n        else if (currentSection) {\n            const indexOfEqualsSign = line.indexOf(\"=\");\n            const start = 0;\n            const end = line.length - 1;\n            const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;\n            if (isAssignment) {\n                const [name, value] = [\n                    line.substring(0, indexOfEqualsSign).trim(),\n                    line.substring(indexOfEqualsSign + 1).trim(),\n                ];\n                map[currentSection] = map[currentSection] || {};\n                map[currentSection][name] = value;\n            }\n        }\n    }\n    return map;\n};\n", "import { promises as fsPromises } from \"fs\";\nconst { readFile } = fsPromises;\nconst filePromisesHash = {};\nexport const slurpFile = (path, options) => {\n    if (!filePromisesHash[path] || options?.ignoreCache) {\n        filePromisesHash[path] = readFile(path, \"utf8\");\n    }\n    return filePromisesHash[path];\n};\n", "import { getConfigFilepath } from \"./getConfigFilepath\";\nimport { getCredentialsFilepath } from \"./getCredentialsFilepath\";\nimport { getProfileData } from \"./getProfileData\";\nimport { parseIni } from \"./parseIni\";\nimport { slurpFile } from \"./slurpFile\";\nconst swallowError = () => ({});\nexport const loadSharedConfigFiles = async (init = {}) => {\n    const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;\n    const parsedFiles = await Promise.all([\n        slurpFile(configFilepath, {\n            ignoreCache: init.ignoreCache,\n        })\n            .then(parseIni)\n            .then(getProfileData)\n            .catch(swallowError),\n        slurpFile(filepath, {\n            ignoreCache: init.ignoreCache,\n        })\n            .then(parseIni)\n            .catch(swallowError),\n    ]);\n    return {\n        configFile: parsedFiles[0],\n        credentialsFile: parsedFiles[1],\n    };\n};\n", "const ssoSessionKeyRegex = /^sso-session\\s([\"'])?([^\\1]+)\\1$/;\nexport const getSsoSessionData = (data) => Object.entries(data)\n    .filter(([key]) => ssoSessionKeyRegex.test(key))\n    .reduce((acc, [key, value]) => ({ ...acc, [ssoSessionKeyRegex.exec(key)[2]]: value }), {});\n", "import { getConfigFilepath } from \"./getConfigFilepath\";\nimport { getSsoSessionData } from \"./getSsoSessionData\";\nimport { parseIni } from \"./parseIni\";\nimport { slurpFile } from \"./slurpFile\";\nconst swallowError = () => ({});\nexport const loadSsoSessionData = async (init = {}) => slurpFile(init.configFilepath ?? getConfigFilepath())\n    .then(parseIni)\n    .then(getSsoSessionData)\n    .catch(swallowError);\n", "export const mergeConfigFiles = (...files) => {\n    const merged = {};\n    for (const file of files) {\n        for (const [key, values] of Object.entries(file)) {\n            if (merged[key] !== undefined) {\n                Object.assign(merged[key], values);\n            }\n            else {\n                merged[key] = values;\n            }\n        }\n    }\n    return merged;\n};\n", "import { loadSharedConfigFiles } from \"./loadSharedConfigFiles\";\nimport { mergeConfigFiles } from \"./mergeConfigFiles\";\nexport const parseKnownFiles = async (init) => {\n    const parsedFiles = await loadSharedConfigFiles(init);\n    return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);\n};\n", "import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { parse } from \"url\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nexport const ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexport const ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexport const ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return () => retry(async () => {\n        const requestOptions = await getCmdsUri();\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!isImdsCredentials(credsResponse)) {\n            throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\");\n        }\n        return fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    \"127.0.0.1\": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    \"http:\": true,\n    \"https:\": true,\n};\nconst getCmdsUri = async () => {\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = parse(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\n        \" variable is set\", false);\n};\n", "import { ProviderError } from \"@aws-sdk/property-provider\";\nimport { Buffer } from \"buffer\";\nimport { request } from \"http\";\nexport function httpRequest(options) {\n    return new Promise((resolve, reject) => {\n        const req = request({\n            method: \"GET\",\n            ...options,\n            hostname: options.hostname?.replace(/^\\[(.+)\\]$/, \"$1\"),\n        });\n        req.on(\"error\", (err) => {\n            reject(Object.assign(new ProviderError(\"Unable to connect to instance metadata service\"), err));\n            req.destroy();\n        });\n        req.on(\"timeout\", () => {\n            reject(new ProviderError(\"TimeoutError from instance metadata service\"));\n            req.destroy();\n        });\n        req.on(\"response\", (res) => {\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new ProviderError(\"Error response received from instance metadata service\"), { statusCode }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on(\"data\", (chunk) => {\n                chunks.push(chunk);\n            });\n            res.on(\"end\", () => {\n                resolve(Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\n", "export const isImdsCredentials = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.AccessKeyId === \"string\" &&\n    typeof arg.SecretAccessKey === \"string\" &&\n    typeof arg.Token === \"string\" &&\n    typeof arg.Expiration === \"string\";\nexport const fromImdsCredentials = (creds) => ({\n    accessKeyId: creds.AccessKeyId,\n    secretAccessKey: creds.SecretAccessKey,\n    sessionToken: creds.Token,\n    expiration: new Date(creds.Expiration),\n});\n", "export const DEFAULT_TIMEOUT = 1000;\nexport const DEFAULT_MAX_RETRIES = 0;\nexport const providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT, }) => ({ maxRetries, timeout });\n", "export const retry = (toRetry, maxRetries) => {\n    let promise = toRetry();\n    for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n};\n", "import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const fromEnv = (envVarSelector) => async () => {\n    try {\n        const config = envVarSelector(process.env);\n        if (config === undefined) {\n            throw new Error();\n        }\n        return config;\n    }\n    catch (e) {\n        throw new CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);\n    }\n};\n", "import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { getProfileName, loadSharedConfigFiles } from \"@aws-sdk/shared-ini-file-loader\";\nexport const fromSharedConfigFiles = (configSelector, { preferredFile = \"config\", ...init } = {}) => async () => {\n    const profile = getProfileName(init);\n    const { configFile, credentialsFile } = await loadSharedConfigFiles(init);\n    const profileFromCredentials = credentialsFile[profile] || {};\n    const profileFromConfig = configFile[profile] || {};\n    const mergedProfile = preferredFile === \"config\"\n        ? { ...profileFromCredentials, ...profileFromConfig }\n        : { ...profileFromConfig, ...profileFromCredentials };\n    try {\n        const configValue = configSelector(mergedProfile);\n        if (configValue === undefined) {\n            throw new Error();\n        }\n        return configValue;\n    }\n    catch (e) {\n        throw new CredentialsProviderError(e.message ||\n            `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);\n    }\n};\n", "import { fromStatic as convertToProvider } from \"@aws-sdk/property-provider\";\nconst isFunction = (func) => typeof func === \"function\";\nexport const fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : convertToProvider(defaultValue);\n", "import { chain, memoize } from \"@aws-sdk/property-provider\";\nimport { fromEnv } from \"./fromEnv\";\nimport { fromSharedConfigFiles } from \"./fromSharedConfigFiles\";\nimport { fromStatic } from \"./fromStatic\";\nexport const loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => memoize(chain(fromEnv(environmentVariableSelector), fromSharedConfigFiles(configFileSelector, configuration), fromStatic(defaultValue)));\n", "export var Endpoint;\n(function (Endpoint) {\n    Endpoint[\"IPv4\"] = \"http://169.254.169.254\";\n    Endpoint[\"IPv6\"] = \"http://[fd00:ec2::254]\";\n})(Endpoint || (Endpoint = {}));\n", "export const ENV_ENDPOINT_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT\";\nexport const CONFIG_ENDPOINT_NAME = \"ec2_metadata_service_endpoint\";\nexport const ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],\n    default: undefined,\n};\n", "export var EndpointMode;\n(function (EndpointMode) {\n    EndpointMode[\"IPv4\"] = \"IPv4\";\n    EndpointMode[\"IPv6\"] = \"IPv6\";\n})(EndpointMode || (EndpointMode = {}));\n", "import { EndpointMode } from \"./EndpointMode\";\nexport const ENV_ENDPOINT_MODE_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\";\nexport const CONFIG_ENDPOINT_MODE_NAME = \"ec2_metadata_service_endpoint_mode\";\nexport const ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],\n    default: EndpointMode.IPv4,\n};\n", "import { loadConfig } from \"@aws-sdk/node-config-provider\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\nimport { Endpoint as InstanceMetadataEndpoint } from \"../config/Endpoint\";\nimport { ENDPOINT_CONFIG_OPTIONS } from \"../config/EndpointConfigOptions\";\nimport { EndpointMode } from \"../config/EndpointMode\";\nimport { ENDPOINT_MODE_CONFIG_OPTIONS, } from \"../config/EndpointModeConfigOptions\";\nexport const getInstanceMetadataEndpoint = async () => parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nconst getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n    const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch (endpointMode) {\n        case EndpointMode.IPv4:\n            return InstanceMetadataEndpoint.IPv4;\n        case EndpointMode.IPv6:\n            return InstanceMetadataEndpoint.IPv6;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\n    }\n};\n", "const STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\nconst STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\nconst STATIC_STABILITY_DOC_URL = \"https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\";\nexport const getExtendedInstanceMetadataCredentials = (credentials, logger) => {\n    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +\n        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n    const newExpiration = new Date(Date.now() + refreshInterval * 1000);\n    logger.warn(\"Attempting credential expiration extension due to a credential service availability issue. A refresh of these \" +\n        \"credentials will be attempted after ${new Date(newExpiration)}.\\nFor more information, please visit: \" +\n        STATIC_STABILITY_DOC_URL);\n    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n    return {\n        ...credentials,\n        ...(originalExpiration ? { originalExpiration } : {}),\n        expiration: newExpiration,\n    };\n};\n", "import { getExtendedInstanceMetadataCredentials } from \"./getExtendedInstanceMetadataCredentials\";\nexport const staticStabilityProvider = (provider, options = {}) => {\n    const logger = options?.logger || console;\n    let pastCredentials;\n    return async () => {\n        let credentials;\n        try {\n            credentials = await provider();\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n            }\n        }\n        catch (e) {\n            if (pastCredentials) {\n                logger.warn(\"Credential renew failed: \", e);\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n            }\n            else {\n                throw e;\n            }\n        }\n        pastCredentials = credentials;\n        return credentials;\n    };\n};\n", "import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nimport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nimport { staticStabilityProvider } from \"./utils/staticStabilityProvider\";\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nexport const fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceImdsProvider(init), { logger: init.logger });\nconst getInstanceImdsProvider = (init) => {\n    let disableFetchToken = false;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const profile = (await retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(profile, options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: \"EC2 Metadata token request returned error\",\n                    });\n                }\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    \"x-aws-ec2-metadata-token\": token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nconst getMetadataToken = async (options) => httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: \"PUT\",\n    headers: {\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\n    },\n});\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options) => {\n    const credsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!isImdsCredentials(credsResponse)) {\n        throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\");\n    }\n    return fromImdsCredentials(credsResponse);\n};\n", "import { fromEnv } from \"@aws-sdk/credential-provider-env\";\nimport { fromContainerMetadata, fromInstanceMetadata } from \"@aws-sdk/credential-provider-imds\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName) => {\n    const sourceProvidersMap = {\n        EcsContainer: fromContainerMetadata,\n        Ec2InstanceMetadata: fromInstanceMetadata,\n        Environment: fromEnv,\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource]();\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`);\n    }\n};\n", "import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { getProfileName } from \"@aws-sdk/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n    (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));\nconst isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\nconst isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    const data = profiles[profileName];\n    if (!options.roleAssumer) {\n        throw new CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);\n    }\n    const { source_profile } = data;\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), false);\n    }\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, profiles, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        })\n        : resolveCredentialSource(data.credential_source, profileName)();\n    const params = {\n        RoleArn: data.role_arn,\n        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,\n        ExternalId: data.external_id,\n    };\n    const { mfa_serial } = data;\n    if (mfa_serial) {\n        if (!options.mfaCodeProvider) {\n            throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);\n        }\n        params.SerialNumber = mfa_serial;\n        params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n    }\n    const sourceCreds = await sourceCredsProvider;\n    return options.roleAssumer(sourceCreds, params);\n};\n", "import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { getValidatedProcessCredentials } from \"./getValidatedProcessCredentials\";\nexport const resolveProcessCredentials = async (profileName, profiles) => {\n    const profile = profiles[profileName];\n    if (profiles[profileName]) {\n        const credentialProcess = profile[\"credential_process\"];\n        if (credentialProcess !== undefined) {\n            const execPromise = promisify(exec);\n            try {\n                const { stdout } = await execPromise(credentialProcess);\n                let data;\n                try {\n                    data = JSON.parse(stdout.trim());\n                }\n                catch {\n                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n                }\n                return getValidatedProcessCredentials(profileName, data);\n            }\n            catch (error) {\n                throw new CredentialsProviderError(error.message);\n            }\n        }\n        else {\n            throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);\n        }\n    }\n    else {\n        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);\n    }\n};\n", "export const getValidatedProcessCredentials = (profileName, data) => {\n    if (data.Version !== 1) {\n        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);\n    }\n    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {\n        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);\n    }\n    if (data.Expiration) {\n        const currentTime = new Date();\n        const expireTime = new Date(data.Expiration);\n        if (expireTime < currentTime) {\n            throw Error(`Profile ${profileName} credential_process returned expired credentials.`);\n        }\n    }\n    return {\n        accessKeyId: data.AccessKeyId,\n        secretAccessKey: data.SecretAccessKey,\n        ...(data.SessionToken && { sessionToken: data.SessionToken }),\n        ...(data.Expiration && { expiration: new Date(data.Expiration) }),\n    };\n};\n", "import { getProfileName, parseKnownFiles } from \"@aws-sdk/shared-ini-file-loader\";\nimport { resolveProcessCredentials } from \"./resolveProcessCredentials\";\nexport const fromProcess = (init = {}) => async () => {\n    const profiles = await parseKnownFiles(init);\n    return resolveProcessCredentials(getProfileName(init), profiles);\n};\n", "import { fromProcess } from \"@aws-sdk/credential-provider-process\";\nexport const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => fromProcess({\n    ...options,\n    profile,\n})();\n", "export const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n", "import { ServiceException as __ServiceException, } from \"@aws-sdk/smithy-client\";\nexport class SSOServiceException extends __ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, SSOServiceException.prototype);\n    }\n}\n", "import { SENSITIVE_STRING } from \"@aws-sdk/smithy-client\";\nimport { SSOServiceException as __BaseException } from \"./SSOServiceException\";\nexport class InvalidRequestException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidRequestException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidRequestException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidRequestException.prototype);\n    }\n}\nexport class ResourceNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);\n    }\n}\nexport class TooManyRequestsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TooManyRequestsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TooManyRequestsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TooManyRequestsException.prototype);\n    }\n}\nexport class UnauthorizedException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnauthorizedException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnauthorizedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnauthorizedException.prototype);\n    }\n}\nexport const GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.accessToken && { accessToken: SENSITIVE_STRING }),\n});\nexport const RoleCredentialsFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.secretAccessKey && { secretAccessKey: SENSITIVE_STRING }),\n    ...(obj.sessionToken && { sessionToken: SENSITIVE_STRING }),\n});\nexport const GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.roleCredentials && { roleCredentials: RoleCredentialsFilterSensitiveLog(obj.roleCredentials) }),\n});\nexport const ListAccountRolesRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.accessToken && { accessToken: SENSITIVE_STRING }),\n});\nexport const ListAccountsRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.accessToken && { accessToken: SENSITIVE_STRING }),\n});\nexport const LogoutRequestFilterSensitiveLog = (obj) => ({\n    ...obj,\n    ...(obj.accessToken && { accessToken: SENSITIVE_STRING }),\n});\n", "import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { _json, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, take, withBaseException, } from \"@aws-sdk/smithy-client\";\nimport { InvalidRequestException, ResourceNotFoundException, TooManyRequestsException, UnauthorizedException, } from \"../models/models_0\";\nimport { SSOServiceException as __BaseException } from \"../models/SSOServiceException\";\nexport const se_GetRoleCredentialsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-sso_bearer_token\": input.accessToken,\n    });\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/federation/credentials\";\n    const query = map({\n        role_name: [, __expectNonNull(input.roleName, `roleName`)],\n        account_id: [, __expectNonNull(input.accountId, `accountId`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListAccountRolesCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-sso_bearer_token\": input.accessToken,\n    });\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/roles\";\n    const query = map({\n        next_token: [, input.nextToken],\n        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],\n        account_id: [, __expectNonNull(input.accountId, `accountId`)],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_ListAccountsCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-sso_bearer_token\": input.accessToken,\n    });\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/assignment/accounts\";\n    const query = map({\n        next_token: [, input.nextToken],\n        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],\n    });\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"GET\",\n        headers,\n        path: resolvedPath,\n        query,\n        body,\n    });\n};\nexport const se_LogoutCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = map({}, isSerializableHeaderValue, {\n        \"x-amz-sso_bearer_token\": input.accessToken,\n    });\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/logout\";\n    let body;\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const de_GetRoleCredentialsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_GetRoleCredentialsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        roleCredentials: _json,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_GetRoleCredentialsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n            throw await de_UnauthorizedExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListAccountRolesCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListAccountRolesCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        nextToken: __expectString,\n        roleList: _json,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_ListAccountRolesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n            throw await de_UnauthorizedExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListAccountsCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_ListAccountsCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        accountList: _json,\n        nextToken: __expectString,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_ListAccountsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.sso#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n            throw await de_UnauthorizedExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_LogoutCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_LogoutCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    await collectBody(output.body, context);\n    return contents;\n};\nconst de_LogoutCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.sso#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"TooManyRequestsException\":\n        case \"com.amazonaws.sso#TooManyRequestsException\":\n            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);\n        case \"UnauthorizedException\":\n        case \"com.amazonaws.sso#UnauthorizedException\":\n            throw await de_UnauthorizedExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nconst throwDefaultError = withBaseException(__BaseException);\nconst de_InvalidRequestExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InvalidRequestException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ResourceNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new TooManyRequestsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_UnauthorizedExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        message: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new UnauthorizedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst isSerializableHeaderValue = (value) => value !== undefined &&\n    value !== null &&\n    value !== \"\" &&\n    (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n    (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        return JSON.parse(encoded);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    value.message = value.message ?? value.Message;\n    return value;\n};\nconst loadRestJsonErrorCode = (output, data) => {\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n    const sanitizeErrorCode = (rawValue) => {\n        let cleanValue = rawValue;\n        if (typeof cleanValue === \"number\") {\n            cleanValue = cleanValue.toString();\n        }\n        if (cleanValue.indexOf(\",\") >= 0) {\n            cleanValue = cleanValue.split(\",\")[0];\n        }\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data.code !== undefined) {\n        return sanitizeErrorCode(data.code);\n    }\n    if (data[\"__type\"] !== undefined) {\n        return sanitizeErrorCode(data[\"__type\"]);\n    }\n};\n", "import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { GetRoleCredentialsRequestFilterSensitiveLog, GetRoleCredentialsResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { de_GetRoleCredentialsCommand, se_GetRoleCredentialsCommand } from \"../protocols/Aws_restJson1\";\nexport class GetRoleCredentialsCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, GetRoleCredentialsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSOClient\";\n        const commandName = \"GetRoleCredentialsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: GetRoleCredentialsRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: GetRoleCredentialsResponseFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_GetRoleCredentialsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_GetRoleCredentialsCommand(output, context);\n    }\n}\n", "export const resolveClientEndpointParameters = (options) => {\n    return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        defaultSigningName: \"awsssoportal\",\n    };\n};\n", "{\n  \"name\": \"@aws-sdk/client-sso\",\n  \"description\": \"AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native\",\n  \"version\": \"3.321.1\",\n  \"scripts\": {\n    \"build\": \"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\",\n    \"build:cjs\": \"tsc -p tsconfig.cjs.json\",\n    \"build:docs\": \"typedoc\",\n    \"build:es\": \"tsc -p tsconfig.es.json\",\n    \"build:include:deps\": \"lerna run --scope $npm_package_name --include-dependencies build\",\n    \"build:types\": \"tsc -p tsconfig.types.json\",\n    \"build:types:downlevel\": \"downlevel-dts dist-types dist-types/ts3.4\",\n    \"clean\": \"rimraf ./dist-* && rimraf *.tsbuildinfo\",\n    \"extract:docs\": \"api-extractor run --local\",\n    \"generate:client\": \"node ../../scripts/generate-clients/single-service --solo sso\"\n  },\n  \"main\": \"./dist-cjs/index.js\",\n  \"types\": \"./dist-types/index.d.ts\",\n  \"module\": \"./dist-es/index.js\",\n  \"sideEffects\": false,\n  \"dependencies\": {\n    \"@aws-crypto/sha256-browser\": \"3.0.0\",\n    \"@aws-crypto/sha256-js\": \"3.0.0\",\n    \"@aws-sdk/config-resolver\": \"3.310.0\",\n    \"@aws-sdk/fetch-http-handler\": \"3.310.0\",\n    \"@aws-sdk/hash-node\": \"3.310.0\",\n    \"@aws-sdk/invalid-dependency\": \"3.310.0\",\n    \"@aws-sdk/middleware-content-length\": \"3.310.0\",\n    \"@aws-sdk/middleware-endpoint\": \"3.310.0\",\n    \"@aws-sdk/middleware-host-header\": \"3.310.0\",\n    \"@aws-sdk/middleware-logger\": \"3.310.0\",\n    \"@aws-sdk/middleware-recursion-detection\": \"3.310.0\",\n    \"@aws-sdk/middleware-retry\": \"3.310.0\",\n    \"@aws-sdk/middleware-serde\": \"3.310.0\",\n    \"@aws-sdk/middleware-stack\": \"3.310.0\",\n    \"@aws-sdk/middleware-user-agent\": \"3.319.0\",\n    \"@aws-sdk/node-config-provider\": \"3.310.0\",\n    \"@aws-sdk/node-http-handler\": \"3.321.1\",\n    \"@aws-sdk/protocol-http\": \"3.310.0\",\n    \"@aws-sdk/smithy-client\": \"3.316.0\",\n    \"@aws-sdk/types\": \"3.310.0\",\n    \"@aws-sdk/url-parser\": \"3.310.0\",\n    \"@aws-sdk/util-base64\": \"3.310.0\",\n    \"@aws-sdk/util-body-length-browser\": \"3.310.0\",\n    \"@aws-sdk/util-body-length-node\": \"3.310.0\",\n    \"@aws-sdk/util-defaults-mode-browser\": \"3.316.0\",\n    \"@aws-sdk/util-defaults-mode-node\": \"3.316.0\",\n    \"@aws-sdk/util-endpoints\": \"3.319.0\",\n    \"@aws-sdk/util-retry\": \"3.310.0\",\n    \"@aws-sdk/util-user-agent-browser\": \"3.310.0\",\n    \"@aws-sdk/util-user-agent-node\": \"3.310.0\",\n    \"@aws-sdk/util-utf8\": \"3.310.0\",\n    \"tslib\": \"^2.5.0\"\n  },\n  \"devDependencies\": {\n    \"@aws-sdk/service-client-documentation-generator\": \"3.310.0\",\n    \"@tsconfig/node14\": \"1.0.3\",\n    \"@types/node\": \"^14.14.31\",\n    \"concurrently\": \"7.0.0\",\n    \"downlevel-dts\": \"0.10.1\",\n    \"rimraf\": \"3.0.2\",\n    \"typedoc\": \"0.23.23\",\n    \"typescript\": \"~4.9.5\"\n  },\n  \"engines\": {\n    \"node\": \">=14.0.0\"\n  },\n  \"typesVersions\": {\n    \"<4.0\": {\n      \"dist-types/*\": [\n        \"dist-types/ts3.4/*\"\n      ]\n    }\n  },\n  \"files\": [\n    \"dist-*/**\"\n  ],\n  \"author\": {\n    \"name\": \"AWS SDK for JavaScript Team\",\n    \"url\": \"https://aws.amazon.com/javascript/\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"browser\": {\n    \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.browser\"\n  },\n  \"react-native\": {\n    \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.native\"\n  },\n  \"homepage\": \"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/aws/aws-sdk-js-v3.git\",\n    \"directory\": \"clients/client-sso\"\n  }\n}\n", "import { fromArrayBuffer, fromString } from \"@aws-sdk/util-buffer-from\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { Buffer } from \"buffer\";\nimport { createHash, createHmac } from \"crypto\";\nexport class Hash {\n    constructor(algorithmIdentifier, secret) {\n        this.algorithmIdentifier = algorithmIdentifier;\n        this.secret = secret;\n        this.reset();\n    }\n    update(toHash, encoding) {\n        this.hash.update(toUint8Array(castSourceData(toHash, encoding)));\n    }\n    digest() {\n        return Promise.resolve(this.hash.digest());\n    }\n    reset() {\n        this.hash = this.secret\n            ? createHmac(this.algorithmIdentifier, castSourceData(this.secret))\n            : createHash(this.algorithmIdentifier);\n    }\n}\nfunction castSourceData(toCast, encoding) {\n    if (Buffer.isBuffer(toCast)) {\n        return toCast;\n    }\n    if (typeof toCast === \"string\") {\n        return fromString(toCast, encoding);\n    }\n    if (ArrayBuffer.isView(toCast)) {\n        return fromArrayBuffer(toCast.buffer, toCast.byteOffset, toCast.byteLength);\n    }\n    return fromArrayBuffer(toCast);\n}\n", "import { escapeUri } from \"@aws-sdk/util-uri-escape\";\nexport function buildQueryString(query) {\n    const parts = [];\n    for (let key of Object.keys(query).sort()) {\n        const value = query[key];\n        key = escapeUri(key);\n        if (Array.isArray(value)) {\n            for (let i = 0, iLen = value.length; i < iLen; i++) {\n                parts.push(`${key}=${escapeUri(value[i])}`);\n            }\n        }\n        else {\n            let qsEntry = key;\n            if (value || typeof value === \"string\") {\n                qsEntry += `=${escapeUri(value)}`;\n            }\n            parts.push(qsEntry);\n        }\n    }\n    return parts.join(\"&\");\n}\n", "import { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { Agent as hAgent, request as hRequest } from \"http\";\nimport { Agent as hsAgent, request as hsRequest } from \"https\";\nimport { NODEJS_TIMEOUT_ERROR_CODES } from \"./constants\";\nimport { getTransformedHeaders } from \"./get-transformed-headers\";\nimport { setConnectionTimeout } from \"./set-connection-timeout\";\nimport { setSocketTimeout } from \"./set-socket-timeout\";\nimport { writeRequestBody } from \"./write-request-body\";\nexport const DEFAULT_REQUEST_TIMEOUT = 0;\nexport class NodeHttpHandler {\n    constructor(options) {\n        this.metadata = { handlerProtocol: \"http/1.1\" };\n        this.configProvider = new Promise((resolve, reject) => {\n            if (typeof options === \"function\") {\n                options()\n                    .then((_options) => {\n                    resolve(this.resolveDefaultConfig(_options));\n                })\n                    .catch(reject);\n            }\n            else {\n                resolve(this.resolveDefaultConfig(options));\n            }\n        });\n    }\n    resolveDefaultConfig(options) {\n        const { requestTimeout, connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};\n        const keepAlive = true;\n        const maxSockets = 50;\n        return {\n            connectionTimeout,\n            requestTimeout: requestTimeout ?? socketTimeout,\n            httpAgent: httpAgent || new hAgent({ keepAlive, maxSockets }),\n            httpsAgent: httpsAgent || new hsAgent({ keepAlive, maxSockets }),\n        };\n    }\n    destroy() {\n        this.config?.httpAgent?.destroy();\n        this.config?.httpsAgent?.destroy();\n    }\n    async handle(request, { abortSignal } = {}) {\n        if (!this.config) {\n            this.config = await this.configProvider;\n        }\n        return new Promise((resolve, reject) => {\n            if (!this.config) {\n                throw new Error(\"Node HTTP request handler config is not resolved\");\n            }\n            if (abortSignal?.aborted) {\n                const abortError = new Error(\"Request aborted\");\n                abortError.name = \"AbortError\";\n                reject(abortError);\n                return;\n            }\n            const isSSL = request.protocol === \"https:\";\n            const queryString = buildQueryString(request.query || {});\n            const nodeHttpsOptions = {\n                headers: request.headers,\n                host: request.hostname,\n                method: request.method,\n                path: queryString ? `${request.path}?${queryString}` : request.path,\n                port: request.port,\n                agent: isSSL ? this.config.httpsAgent : this.config.httpAgent,\n            };\n            const requestFunc = isSSL ? hsRequest : hRequest;\n            const req = requestFunc(nodeHttpsOptions, (res) => {\n                const httpResponse = new HttpResponse({\n                    statusCode: res.statusCode || -1,\n                    headers: getTransformedHeaders(res.headers),\n                    body: res,\n                });\n                resolve({ response: httpResponse });\n            });\n            req.on(\"error\", (err) => {\n                if (NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {\n                    reject(Object.assign(err, { name: \"TimeoutError\" }));\n                }\n                else {\n                    reject(err);\n                }\n            });\n            setConnectionTimeout(req, reject, this.config.connectionTimeout);\n            setSocketTimeout(req, reject, this.config.requestTimeout);\n            if (abortSignal) {\n                abortSignal.onabort = () => {\n                    req.abort();\n                    const abortError = new Error(\"Request aborted\");\n                    abortError.name = \"AbortError\";\n                    reject(abortError);\n                };\n            }\n            writeRequestBody(req, request);\n        });\n    }\n}\n", "export const NODEJS_TIMEOUT_ERROR_CODES = [\"ECONNRESET\", \"EPIPE\", \"ETIMEDOUT\"];\n", "const getTransformedHeaders = (headers) => {\n    const transformedHeaders = {};\n    for (const name of Object.keys(headers)) {\n        const headerValues = headers[name];\n        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(\",\") : headerValues;\n    }\n    return transformedHeaders;\n};\nexport { getTransformedHeaders };\n", "export const setConnectionTimeout = (request, reject, timeoutInMs = 0) => {\n    if (!timeoutInMs) {\n        return;\n    }\n    request.on(\"socket\", (socket) => {\n        if (socket.connecting) {\n            const timeoutId = setTimeout(() => {\n                request.destroy();\n                reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {\n                    name: \"TimeoutError\",\n                }));\n            }, timeoutInMs);\n            socket.on(\"connect\", () => {\n                clearTimeout(timeoutId);\n            });\n        }\n    });\n};\n", "export const setSocketTimeout = (request, reject, timeoutInMs = 0) => {\n    request.setTimeout(timeoutInMs, () => {\n        request.destroy();\n        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: \"TimeoutError\" }));\n    });\n};\n", "import { Readable } from \"stream\";\nexport function writeRequestBody(httpRequest, request) {\n    const expect = request.headers[\"Expect\"] || request.headers[\"expect\"];\n    if (expect === \"100-continue\") {\n        httpRequest.on(\"continue\", () => {\n            writeBody(httpRequest, request.body);\n        });\n    }\n    else {\n        writeBody(httpRequest, request.body);\n    }\n}\nfunction writeBody(httpRequest, body) {\n    if (body instanceof Readable) {\n        body.pipe(httpRequest);\n    }\n    else if (body) {\n        httpRequest.end(Buffer.from(body));\n    }\n    else {\n        httpRequest.end();\n    }\n}\n", "export class NodeHttp2ConnectionPool {\n    constructor(sessions) {\n        this.sessions = [];\n        this.sessions = sessions ?? [];\n    }\n    poll() {\n        if (this.sessions.length > 0) {\n            return this.sessions.shift();\n        }\n    }\n    offerLast(session) {\n        this.sessions.push(session);\n    }\n    contains(session) {\n        return this.sessions.includes(session);\n    }\n    remove(session) {\n        this.sessions = this.sessions.filter((s) => s !== session);\n    }\n    [Symbol.iterator]() {\n        return this.sessions[Symbol.iterator]();\n    }\n    destroy(connection) {\n        for (const session of this.sessions) {\n            if (session === connection) {\n                if (!session.destroyed) {\n                    session.destroy();\n                }\n            }\n        }\n    }\n}\n", "import { Writable } from \"stream\";\nexport class Collector extends Writable {\n    constructor() {\n        super(...arguments);\n        this.bufferedBytes = [];\n    }\n    _write(chunk, encoding, callback) {\n        this.bufferedBytes.push(chunk);\n        callback();\n    }\n}\n", "import { Collector } from \"./collector\";\nexport const streamCollector = (stream) => new Promise((resolve, reject) => {\n    const collector = new Collector();\n    stream.pipe(collector);\n    stream.on(\"error\", (err) => {\n        collector.end();\n        reject(err);\n    });\n    collector.on(\"error\", reject);\n    collector.on(\"finish\", function () {\n        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));\n        resolve(bytes);\n    });\n});\n", "import { fstatSync, lstatSync } from \"fs\";\nexport const calculateBodyLength = (body) => {\n    if (!body) {\n        return 0;\n    }\n    if (typeof body === \"string\") {\n        return Buffer.from(body).length;\n    }\n    else if (typeof body.byteLength === \"number\") {\n        return body.byteLength;\n    }\n    else if (typeof body.size === \"number\") {\n        return body.size;\n    }\n    else if (typeof body.path === \"string\" || Buffer.isBuffer(body.path)) {\n        return lstatSync(body.path).size;\n    }\n    else if (typeof body.fd === \"number\") {\n        return fstatSync(body.fd).size;\n    }\n    throw new Error(`Body Length computation failed for ${body}`);\n};\n", "import { loadConfig } from \"@aws-sdk/node-config-provider\";\nimport { platform, release } from \"os\";\nimport { env, versions } from \"process\";\nimport { isCrtAvailable } from \"./is-crt-available\";\nexport const UA_APP_ID_ENV_NAME = \"AWS_SDK_UA_APP_ID\";\nexport const UA_APP_ID_INI_NAME = \"sdk-ua-app-id\";\nexport const defaultUserAgent = ({ serviceId, clientVersion }) => {\n    const sections = [\n        [\"aws-sdk-js\", clientVersion],\n        [`os/${platform()}`, release()],\n        [\"lang/js\"],\n        [\"md/nodejs\", `${versions.node}`],\n    ];\n    const crtAvailable = isCrtAvailable();\n    if (crtAvailable) {\n        sections.push(crtAvailable);\n    }\n    if (serviceId) {\n        sections.push([`api/${serviceId}`, clientVersion]);\n    }\n    if (env.AWS_EXECUTION_ENV) {\n        sections.push([`exec-env/${env.AWS_EXECUTION_ENV}`]);\n    }\n    const appIdPromise = loadConfig({\n        environmentVariableSelector: (env) => env[UA_APP_ID_ENV_NAME],\n        configFileSelector: (profile) => profile[UA_APP_ID_INI_NAME],\n        default: undefined,\n    })();\n    let resolvedUserAgent = undefined;\n    return async () => {\n        if (!resolvedUserAgent) {\n            const appId = await appIdPromise;\n            resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];\n        }\n        return resolvedUserAgent;\n    };\n};\n", "export const isCrtAvailable = () => {\n    try {\n        if (typeof require === \"function\" && typeof module !== \"undefined\" && require(\"aws-crt\")) {\n            return [\"md/crt-avail\"];\n        }\n        return null;\n    }\n    catch (e) {\n        return null;\n    }\n};\n", "import { fromString } from \"@aws-sdk/util-buffer-from\";\nconst BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;\nexport const fromBase64 = (input) => {\n    if ((input.length * 3) % 4 !== 0) {\n        throw new TypeError(`Incorrect padding on base64 string.`);\n    }\n    if (!BASE64_REGEX.exec(input)) {\n        throw new TypeError(`Invalid base64 string.`);\n    }\n    const buffer = fromString(input, \"base64\");\n    return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n};\n", "import { fromArrayBuffer } from \"@aws-sdk/util-buffer-from\";\nexport const toBase64 = (input) => fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString(\"base64\");\n", "const p = \"required\", q = \"fn\", r = \"argv\", s = \"ref\";\nconst a = \"PartitionResult\", b = \"tree\", c = \"error\", d = \"endpoint\", e = { [p]: false, \"type\": \"String\" }, f = { [p]: true, \"default\": false, \"type\": \"Boolean\" }, g = { [s]: \"Endpoint\" }, h = { [q]: \"booleanEquals\", [r]: [{ [s]: \"UseFIPS\" }, true] }, i = { [q]: \"booleanEquals\", [r]: [{ [s]: \"UseDualStack\" }, true] }, j = {}, k = { [q]: \"booleanEquals\", [r]: [true, { [q]: \"getAttr\", [r]: [{ [s]: a }, \"supportsFIPS\"] }] }, l = { [q]: \"booleanEquals\", [r]: [true, { [q]: \"getAttr\", [r]: [{ [s]: a }, \"supportsDualStack\"] }] }, m = [g], n = [h], o = [i];\nconst _data = { version: \"1.0\", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: \"aws.partition\", [r]: [{ [s]: \"Region\" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: \"isSet\", [r]: m }, { [q]: \"parseURL\", [r]: m, assign: \"url\" }], type: b, rules: [{ conditions: n, error: \"Invalid Configuration: FIPS and custom endpoint are not supported\", type: c }, { type: b, rules: [{ conditions: o, error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: \"https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: j, headers: j }, type: d }] }, { error: \"FIPS and DualStack are enabled, but this partition does not support one or both\", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: \"https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}\", properties: j, headers: j }, type: d }] }] }, { error: \"FIPS is enabled but this partition does not support FIPS\", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: \"https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: j, headers: j }, type: d }] }, { error: \"DualStack is enabled but this partition does not support DualStack\", type: c }] }, { endpoint: { url: \"https://portal.sso.{Region}.{PartitionResult#dnsSuffix}\", properties: j, headers: j }, type: d }] }] };\nexport const ruleSet = _data;\n", "import { resolveEndpoint } from \"@aws-sdk/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n    return resolveEndpoint(ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    });\n};\n", "import { NoOpLogger } from \"@aws-sdk/smithy-client\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\nimport { fromBase64, toBase64 } from \"@aws-sdk/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@aws-sdk/util-utf8\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = (config) => ({\n    apiVersion: \"2019-06-10\",\n    base64Decoder: config?.base64Decoder ?? fromBase64,\n    base64Encoder: config?.base64Encoder ?? toBase64,\n    disableHostPrefix: config?.disableHostPrefix ?? false,\n    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n    logger: config?.logger ?? new NoOpLogger(),\n    serviceId: config?.serviceId ?? \"SSO\",\n    urlParser: config?.urlParser ?? parseUrl,\n    utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n    utf8Encoder: config?.utf8Encoder ?? toUtf8,\n});\n", "export const AWS_EXECUTION_ENV = \"AWS_EXECUTION_ENV\";\nexport const AWS_REGION_ENV = \"AWS_REGION\";\nexport const AWS_DEFAULT_REGION_ENV = \"AWS_DEFAULT_REGION\";\nexport const ENV_IMDS_DISABLED = \"AWS_EC2_METADATA_DISABLED\";\nexport const DEFAULTS_MODE_OPTIONS = [\"in-region\", \"cross-region\", \"mobile\", \"standard\", \"legacy\"];\nexport const IMDS_REGION_PATH = \"/latest/meta-data/placement/region\";\n", "const AWS_DEFAULTS_MODE_ENV = \"AWS_DEFAULTS_MODE\";\nconst AWS_DEFAULTS_MODE_CONFIG = \"defaults_mode\";\nexport const NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => {\n        return env[AWS_DEFAULTS_MODE_ENV];\n    },\n    configFileSelector: (profile) => {\n        return profile[AWS_DEFAULTS_MODE_CONFIG];\n    },\n    default: \"legacy\",\n};\n", "import { NODE_REGION_CONFIG_OPTIONS } from \"@aws-sdk/config-resolver\";\nimport { getInstanceMetadataEndpoint, httpRequest } from \"@aws-sdk/credential-provider-imds\";\nimport { loadConfig } from \"@aws-sdk/node-config-provider\";\nimport { memoize } from \"@aws-sdk/property-provider\";\nimport { AWS_DEFAULT_REGION_ENV, AWS_EXECUTION_ENV, AWS_REGION_ENV, DEFAULTS_MODE_OPTIONS, ENV_IMDS_DISABLED, IMDS_REGION_PATH, } from \"./constants\";\nimport { NODE_DEFAULTS_MODE_CONFIG_OPTIONS } from \"./defaultsModeConfig\";\nexport const resolveDefaultsModeConfig = ({ region = loadConfig(NODE_REGION_CONFIG_OPTIONS), defaultsMode = loadConfig(NODE_DEFAULTS_MODE_CONFIG_OPTIONS), } = {}) => memoize(async () => {\n    const mode = typeof defaultsMode === \"function\" ? await defaultsMode() : defaultsMode;\n    switch (mode?.toLowerCase()) {\n        case \"auto\":\n            return resolveNodeDefaultsModeAuto(region);\n        case \"in-region\":\n        case \"cross-region\":\n        case \"mobile\":\n        case \"standard\":\n        case \"legacy\":\n            return Promise.resolve(mode?.toLocaleLowerCase());\n        case undefined:\n            return Promise.resolve(\"legacy\");\n        default:\n            throw new Error(`Invalid parameter for \"defaultsMode\", expect ${DEFAULTS_MODE_OPTIONS.join(\", \")}, got ${mode}`);\n    }\n});\nconst resolveNodeDefaultsModeAuto = async (clientRegion) => {\n    if (clientRegion) {\n        const resolvedRegion = typeof clientRegion === \"function\" ? await clientRegion() : clientRegion;\n        const inferredRegion = await inferPhysicalRegion();\n        if (!inferredRegion) {\n            return \"standard\";\n        }\n        if (resolvedRegion === inferredRegion) {\n            return \"in-region\";\n        }\n        else {\n            return \"cross-region\";\n        }\n    }\n    return \"standard\";\n};\nconst inferPhysicalRegion = async () => {\n    if (process.env[AWS_EXECUTION_ENV] && (process.env[AWS_REGION_ENV] || process.env[AWS_DEFAULT_REGION_ENV])) {\n        return process.env[AWS_REGION_ENV] ?? process.env[AWS_DEFAULT_REGION_ENV];\n    }\n    if (!process.env[ENV_IMDS_DISABLED]) {\n        try {\n            const endpoint = await getInstanceMetadataEndpoint();\n            return (await httpRequest({ ...endpoint, path: IMDS_REGION_PATH })).toString();\n        }\n        catch (e) {\n        }\n    }\n};\n", "import packageInfo from \"../package.json\";\nimport { NODE_REGION_CONFIG_FILE_OPTIONS, NODE_REGION_CONFIG_OPTIONS, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, } from \"@aws-sdk/config-resolver\";\nimport { Hash } from \"@aws-sdk/hash-node\";\nimport { NODE_MAX_ATTEMPT_CONFIG_OPTIONS, NODE_RETRY_MODE_CONFIG_OPTIONS } from \"@aws-sdk/middleware-retry\";\nimport { loadConfig as loadNodeConfig } from \"@aws-sdk/node-config-provider\";\nimport { NodeHttpHandler as RequestHandler, streamCollector } from \"@aws-sdk/node-http-handler\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-node\";\nimport { DEFAULT_RETRY_MODE } from \"@aws-sdk/util-retry\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-node\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@aws-sdk/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@aws-sdk/util-defaults-mode-node\";\nimport { emitWarningIfUnsupportedVersion } from \"@aws-sdk/smithy-client\";\nexport const getRuntimeConfig = (config) => {\n    emitWarningIfUnsupportedVersion(process.version);\n    const defaultsMode = resolveDefaultsModeConfig(config);\n    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n    const clientSharedValues = getSharedRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }),\n        maxAttempts: config?.maxAttempts ?? loadNodeConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: config?.region ?? loadNodeConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: config?.requestHandler ?? new RequestHandler(defaultConfigProvider),\n        retryMode: config?.retryMode ??\n            loadNodeConfig({\n                ...NODE_RETRY_MODE_CONFIG_OPTIONS,\n                default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE,\n            }),\n        sha256: config?.sha256 ?? Hash.bind(null, \"sha256\"),\n        streamCollector: config?.streamCollector ?? streamCollector,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadNodeConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: config?.useFipsEndpoint ?? loadNodeConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n    };\n};\n", "import { resolveRegionConfig } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@aws-sdk/middleware-endpoint\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client, } from \"@aws-sdk/smithy-client\";\nimport { resolveClientEndpointParameters, } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nexport class SSOClient extends __Client {\n    constructor(configuration) {\n        const _config_0 = __getRuntimeConfig(configuration);\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = resolveRegionConfig(_config_1);\n        const _config_3 = resolveEndpointConfig(_config_2);\n        const _config_4 = resolveRetryConfig(_config_3);\n        const _config_5 = resolveHostHeaderConfig(_config_4);\n        const _config_6 = resolveUserAgentConfig(_config_5);\n        super(_config_6);\n        this.config = _config_6;\n        this.middlewareStack.use(getRetryPlugin(this.config));\n        this.middlewareStack.use(getContentLengthPlugin(this.config));\n        this.middlewareStack.use(getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(getLoggerPlugin(this.config));\n        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n        this.middlewareStack.use(getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n", "export const EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nexport const REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;\n", "import { ServiceException as __ServiceException, } from \"@aws-sdk/smithy-client\";\nexport class SSOOIDCServiceException extends __ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, SSOOIDCServiceException.prototype);\n    }\n}\n", "import { SSOOIDCServiceException as __BaseException } from \"./SSOOIDCServiceException\";\nexport class AccessDeniedException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AccessDeniedException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AccessDeniedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AccessDeniedException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class AuthorizationPendingException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"AuthorizationPendingException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"AuthorizationPendingException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, AuthorizationPendingException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class ExpiredTokenException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ExpiredTokenException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ExpiredTokenException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ExpiredTokenException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class InternalServerException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InternalServerException\",\n            $fault: \"server\",\n            ...opts,\n        });\n        this.name = \"InternalServerException\";\n        this.$fault = \"server\";\n        Object.setPrototypeOf(this, InternalServerException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class InvalidClientException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidClientException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidClientException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidClientException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class InvalidGrantException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidGrantException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidGrantException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidGrantException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class InvalidRequestException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidRequestException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidRequestException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidRequestException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class InvalidScopeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidScopeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidScopeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidScopeException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class SlowDownException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"SlowDownException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"SlowDownException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, SlowDownException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class UnauthorizedClientException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnauthorizedClientException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnauthorizedClientException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnauthorizedClientException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class UnsupportedGrantTypeException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnsupportedGrantTypeException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnsupportedGrantTypeException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnsupportedGrantTypeException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\nexport class InvalidClientMetadataException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidClientMetadataException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidClientMetadataException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidClientMetadataException.prototype);\n        this.error = opts.error;\n        this.error_description = opts.error_description;\n    }\n}\n", "import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { _json, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectObject as __expectObject, expectString as __expectString, map, take, withBaseException, } from \"@aws-sdk/smithy-client\";\nimport { AccessDeniedException, AuthorizationPendingException, ExpiredTokenException, InternalServerException, InvalidClientException, InvalidClientMetadataException, InvalidGrantException, InvalidRequestException, InvalidScopeException, SlowDownException, UnauthorizedClientException, UnsupportedGrantTypeException, } from \"../models/models_0\";\nimport { SSOOIDCServiceException as __BaseException } from \"../models/SSOOIDCServiceException\";\nexport const se_CreateTokenCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/json\",\n    };\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/token\";\n    let body;\n    body = JSON.stringify(take(input, {\n        clientId: [],\n        clientSecret: [],\n        code: [],\n        deviceCode: [],\n        grantType: [],\n        redirectUri: [],\n        refreshToken: [],\n        scope: (_) => _json(_),\n    }));\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const se_RegisterClientCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/json\",\n    };\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/client/register\";\n    let body;\n    body = JSON.stringify(take(input, {\n        clientName: [],\n        clientType: [],\n        scopes: (_) => _json(_),\n    }));\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const se_StartDeviceAuthorizationCommand = async (input, context) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const headers = {\n        \"content-type\": \"application/json\",\n    };\n    const resolvedPath = `${basePath?.endsWith(\"/\") ? basePath.slice(0, -1) : basePath || \"\"}` + \"/device_authorization\";\n    let body;\n    body = JSON.stringify(take(input, {\n        clientId: [],\n        clientSecret: [],\n        startUrl: [],\n    }));\n    return new __HttpRequest({\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        headers,\n        path: resolvedPath,\n        body,\n    });\n};\nexport const de_CreateTokenCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_CreateTokenCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        accessToken: __expectString,\n        expiresIn: __expectInt32,\n        idToken: __expectString,\n        refreshToken: __expectString,\n        tokenType: __expectString,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_CreateTokenCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"AccessDeniedException\":\n        case \"com.amazonaws.ssooidc#AccessDeniedException\":\n            throw await de_AccessDeniedExceptionRes(parsedOutput, context);\n        case \"AuthorizationPendingException\":\n        case \"com.amazonaws.ssooidc#AuthorizationPendingException\":\n            throw await de_AuthorizationPendingExceptionRes(parsedOutput, context);\n        case \"ExpiredTokenException\":\n        case \"com.amazonaws.ssooidc#ExpiredTokenException\":\n            throw await de_ExpiredTokenExceptionRes(parsedOutput, context);\n        case \"InternalServerException\":\n        case \"com.amazonaws.ssooidc#InternalServerException\":\n            throw await de_InternalServerExceptionRes(parsedOutput, context);\n        case \"InvalidClientException\":\n        case \"com.amazonaws.ssooidc#InvalidClientException\":\n            throw await de_InvalidClientExceptionRes(parsedOutput, context);\n        case \"InvalidGrantException\":\n        case \"com.amazonaws.ssooidc#InvalidGrantException\":\n            throw await de_InvalidGrantExceptionRes(parsedOutput, context);\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.ssooidc#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"InvalidScopeException\":\n        case \"com.amazonaws.ssooidc#InvalidScopeException\":\n            throw await de_InvalidScopeExceptionRes(parsedOutput, context);\n        case \"SlowDownException\":\n        case \"com.amazonaws.ssooidc#SlowDownException\":\n            throw await de_SlowDownExceptionRes(parsedOutput, context);\n        case \"UnauthorizedClientException\":\n        case \"com.amazonaws.ssooidc#UnauthorizedClientException\":\n            throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);\n        case \"UnsupportedGrantTypeException\":\n        case \"com.amazonaws.ssooidc#UnsupportedGrantTypeException\":\n            throw await de_UnsupportedGrantTypeExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_RegisterClientCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_RegisterClientCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        authorizationEndpoint: __expectString,\n        clientId: __expectString,\n        clientIdIssuedAt: __expectLong,\n        clientSecret: __expectString,\n        clientSecretExpiresAt: __expectLong,\n        tokenEndpoint: __expectString,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_RegisterClientCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerException\":\n        case \"com.amazonaws.ssooidc#InternalServerException\":\n            throw await de_InternalServerExceptionRes(parsedOutput, context);\n        case \"InvalidClientMetadataException\":\n        case \"com.amazonaws.ssooidc#InvalidClientMetadataException\":\n            throw await de_InvalidClientMetadataExceptionRes(parsedOutput, context);\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.ssooidc#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"InvalidScopeException\":\n        case \"com.amazonaws.ssooidc#InvalidScopeException\":\n            throw await de_InvalidScopeExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StartDeviceAuthorizationCommand = async (output, context) => {\n    if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return de_StartDeviceAuthorizationCommandError(output, context);\n    }\n    const contents = map({\n        $metadata: deserializeMetadata(output),\n    });\n    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), \"body\");\n    const doc = take(data, {\n        deviceCode: __expectString,\n        expiresIn: __expectInt32,\n        interval: __expectInt32,\n        userCode: __expectString,\n        verificationUri: __expectString,\n        verificationUriComplete: __expectString,\n    });\n    Object.assign(contents, doc);\n    return contents;\n};\nconst de_StartDeviceAuthorizationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InternalServerException\":\n        case \"com.amazonaws.ssooidc#InternalServerException\":\n            throw await de_InternalServerExceptionRes(parsedOutput, context);\n        case \"InvalidClientException\":\n        case \"com.amazonaws.ssooidc#InvalidClientException\":\n            throw await de_InvalidClientExceptionRes(parsedOutput, context);\n        case \"InvalidRequestException\":\n        case \"com.amazonaws.ssooidc#InvalidRequestException\":\n            throw await de_InvalidRequestExceptionRes(parsedOutput, context);\n        case \"SlowDownException\":\n        case \"com.amazonaws.ssooidc#SlowDownException\":\n            throw await de_SlowDownExceptionRes(parsedOutput, context);\n        case \"UnauthorizedClientException\":\n        case \"com.amazonaws.ssooidc#UnauthorizedClientException\":\n            throw await de_UnauthorizedClientExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nconst throwDefaultError = withBaseException(__BaseException);\nconst de_AccessDeniedExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new AccessDeniedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_AuthorizationPendingExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new AuthorizationPendingException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_ExpiredTokenExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new ExpiredTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InternalServerExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InternalServerException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InvalidClientExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InvalidClientException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InvalidClientMetadataExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InvalidClientMetadataException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InvalidGrantExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InvalidGrantException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InvalidRequestExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InvalidRequestException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_InvalidScopeExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new InvalidScopeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_SlowDownExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new SlowDownException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_UnauthorizedClientExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new UnauthorizedClientException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst de_UnsupportedGrantTypeExceptionRes = async (parsedOutput, context) => {\n    const contents = map({});\n    const data = parsedOutput.body;\n    const doc = take(data, {\n        error: __expectString,\n        error_description: __expectString,\n    });\n    Object.assign(contents, doc);\n    const exception = new UnsupportedGrantTypeException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...contents,\n    });\n    return __decorateServiceException(exception, parsedOutput.body);\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst isSerializableHeaderValue = (value) => value !== undefined &&\n    value !== null &&\n    value !== \"\" &&\n    (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n    (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        return JSON.parse(encoded);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    value.message = value.message ?? value.Message;\n    return value;\n};\nconst loadRestJsonErrorCode = (output, data) => {\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n    const sanitizeErrorCode = (rawValue) => {\n        let cleanValue = rawValue;\n        if (typeof cleanValue === \"number\") {\n            cleanValue = cleanValue.toString();\n        }\n        if (cleanValue.indexOf(\",\") >= 0) {\n            cleanValue = cleanValue.split(\",\")[0];\n        }\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data.code !== undefined) {\n        return sanitizeErrorCode(data.code);\n    }\n    if (data[\"__type\"] !== undefined) {\n        return sanitizeErrorCode(data[\"__type\"]);\n    }\n};\n", "import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { de_CreateTokenCommand, se_CreateTokenCommand } from \"../protocols/Aws_restJson1\";\nexport class CreateTokenCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, CreateTokenCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"SSOOIDCClient\";\n        const commandName = \"CreateTokenCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (_) => _,\n            outputFilterSensitiveLog: (_) => _,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_CreateTokenCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_CreateTokenCommand(output, context);\n    }\n}\n", "export const resolveClientEndpointParameters = (options) => {\n    return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        defaultSigningName: \"awsssooidc\",\n    };\n};\n", "{\n  \"name\": \"@aws-sdk/client-sso-oidc\",\n  \"description\": \"AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native\",\n  \"version\": \"3.321.1\",\n  \"scripts\": {\n    \"build\": \"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\",\n    \"build:cjs\": \"tsc -p tsconfig.cjs.json\",\n    \"build:docs\": \"typedoc\",\n    \"build:es\": \"tsc -p tsconfig.es.json\",\n    \"build:include:deps\": \"lerna run --scope $npm_package_name --include-dependencies build\",\n    \"build:types\": \"tsc -p tsconfig.types.json\",\n    \"build:types:downlevel\": \"downlevel-dts dist-types dist-types/ts3.4\",\n    \"clean\": \"rimraf ./dist-* && rimraf *.tsbuildinfo\",\n    \"extract:docs\": \"api-extractor run --local\",\n    \"generate:client\": \"node ../../scripts/generate-clients/single-service --solo sso-oidc\"\n  },\n  \"main\": \"./dist-cjs/index.js\",\n  \"types\": \"./dist-types/index.d.ts\",\n  \"module\": \"./dist-es/index.js\",\n  \"sideEffects\": false,\n  \"dependencies\": {\n    \"@aws-crypto/sha256-browser\": \"3.0.0\",\n    \"@aws-crypto/sha256-js\": \"3.0.0\",\n    \"@aws-sdk/config-resolver\": \"3.310.0\",\n    \"@aws-sdk/fetch-http-handler\": \"3.310.0\",\n    \"@aws-sdk/hash-node\": \"3.310.0\",\n    \"@aws-sdk/invalid-dependency\": \"3.310.0\",\n    \"@aws-sdk/middleware-content-length\": \"3.310.0\",\n    \"@aws-sdk/middleware-endpoint\": \"3.310.0\",\n    \"@aws-sdk/middleware-host-header\": \"3.310.0\",\n    \"@aws-sdk/middleware-logger\": \"3.310.0\",\n    \"@aws-sdk/middleware-recursion-detection\": \"3.310.0\",\n    \"@aws-sdk/middleware-retry\": \"3.310.0\",\n    \"@aws-sdk/middleware-serde\": \"3.310.0\",\n    \"@aws-sdk/middleware-stack\": \"3.310.0\",\n    \"@aws-sdk/middleware-user-agent\": \"3.319.0\",\n    \"@aws-sdk/node-config-provider\": \"3.310.0\",\n    \"@aws-sdk/node-http-handler\": \"3.321.1\",\n    \"@aws-sdk/protocol-http\": \"3.310.0\",\n    \"@aws-sdk/smithy-client\": \"3.316.0\",\n    \"@aws-sdk/types\": \"3.310.0\",\n    \"@aws-sdk/url-parser\": \"3.310.0\",\n    \"@aws-sdk/util-base64\": \"3.310.0\",\n    \"@aws-sdk/util-body-length-browser\": \"3.310.0\",\n    \"@aws-sdk/util-body-length-node\": \"3.310.0\",\n    \"@aws-sdk/util-defaults-mode-browser\": \"3.316.0\",\n    \"@aws-sdk/util-defaults-mode-node\": \"3.316.0\",\n    \"@aws-sdk/util-endpoints\": \"3.319.0\",\n    \"@aws-sdk/util-retry\": \"3.310.0\",\n    \"@aws-sdk/util-user-agent-browser\": \"3.310.0\",\n    \"@aws-sdk/util-user-agent-node\": \"3.310.0\",\n    \"@aws-sdk/util-utf8\": \"3.310.0\",\n    \"tslib\": \"^2.5.0\"\n  },\n  \"devDependencies\": {\n    \"@aws-sdk/service-client-documentation-generator\": \"3.310.0\",\n    \"@tsconfig/node14\": \"1.0.3\",\n    \"@types/node\": \"^14.14.31\",\n    \"concurrently\": \"7.0.0\",\n    \"downlevel-dts\": \"0.10.1\",\n    \"rimraf\": \"3.0.2\",\n    \"typedoc\": \"0.23.23\",\n    \"typescript\": \"~4.9.5\"\n  },\n  \"engines\": {\n    \"node\": \">=14.0.0\"\n  },\n  \"typesVersions\": {\n    \"<4.0\": {\n      \"dist-types/*\": [\n        \"dist-types/ts3.4/*\"\n      ]\n    }\n  },\n  \"files\": [\n    \"dist-*/**\"\n  ],\n  \"author\": {\n    \"name\": \"AWS SDK for JavaScript Team\",\n    \"url\": \"https://aws.amazon.com/javascript/\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"browser\": {\n    \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.browser\"\n  },\n  \"react-native\": {\n    \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.native\"\n  },\n  \"homepage\": \"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/aws/aws-sdk-js-v3.git\",\n    \"directory\": \"clients/client-sso-oidc\"\n  }\n}\n", "const p = \"required\", q = \"fn\", r = \"argv\", s = \"ref\";\nconst a = \"PartitionResult\", b = \"tree\", c = \"error\", d = \"endpoint\", e = { [p]: false, \"type\": \"String\" }, f = { [p]: true, \"default\": false, \"type\": \"Boolean\" }, g = { [s]: \"Endpoint\" }, h = { [q]: \"booleanEquals\", [r]: [{ [s]: \"UseFIPS\" }, true] }, i = { [q]: \"booleanEquals\", [r]: [{ [s]: \"UseDualStack\" }, true] }, j = {}, k = { [q]: \"booleanEquals\", [r]: [true, { [q]: \"getAttr\", [r]: [{ [s]: a }, \"supportsFIPS\"] }] }, l = { [q]: \"booleanEquals\", [r]: [true, { [q]: \"getAttr\", [r]: [{ [s]: a }, \"supportsDualStack\"] }] }, m = [g], n = [h], o = [i];\nconst _data = { version: \"1.0\", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: \"aws.partition\", [r]: [{ [s]: \"Region\" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: \"isSet\", [r]: m }, { [q]: \"parseURL\", [r]: m, assign: \"url\" }], type: b, rules: [{ conditions: n, error: \"Invalid Configuration: FIPS and custom endpoint are not supported\", type: c }, { type: b, rules: [{ conditions: o, error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: \"https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: j, headers: j }, type: d }] }, { error: \"FIPS and DualStack are enabled, but this partition does not support one or both\", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: \"https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}\", properties: j, headers: j }, type: d }] }] }, { error: \"FIPS is enabled but this partition does not support FIPS\", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: \"https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: j, headers: j }, type: d }] }, { error: \"DualStack is enabled but this partition does not support DualStack\", type: c }] }, { endpoint: { url: \"https://oidc.{Region}.{PartitionResult#dnsSuffix}\", properties: j, headers: j }, type: d }] }] };\nexport const ruleSet = _data;\n", "import { resolveEndpoint } from \"@aws-sdk/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n    return resolveEndpoint(ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    });\n};\n", "import { NoOpLogger } from \"@aws-sdk/smithy-client\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\nimport { fromBase64, toBase64 } from \"@aws-sdk/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@aws-sdk/util-utf8\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = (config) => ({\n    apiVersion: \"2019-06-10\",\n    base64Decoder: config?.base64Decoder ?? fromBase64,\n    base64Encoder: config?.base64Encoder ?? toBase64,\n    disableHostPrefix: config?.disableHostPrefix ?? false,\n    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n    logger: config?.logger ?? new NoOpLogger(),\n    serviceId: config?.serviceId ?? \"SSO OIDC\",\n    urlParser: config?.urlParser ?? parseUrl,\n    utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n    utf8Encoder: config?.utf8Encoder ?? toUtf8,\n});\n", "import packageInfo from \"../package.json\";\nimport { NODE_REGION_CONFIG_FILE_OPTIONS, NODE_REGION_CONFIG_OPTIONS, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, } from \"@aws-sdk/config-resolver\";\nimport { Hash } from \"@aws-sdk/hash-node\";\nimport { NODE_MAX_ATTEMPT_CONFIG_OPTIONS, NODE_RETRY_MODE_CONFIG_OPTIONS } from \"@aws-sdk/middleware-retry\";\nimport { loadConfig as loadNodeConfig } from \"@aws-sdk/node-config-provider\";\nimport { NodeHttpHandler as RequestHandler, streamCollector } from \"@aws-sdk/node-http-handler\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-node\";\nimport { DEFAULT_RETRY_MODE } from \"@aws-sdk/util-retry\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-node\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@aws-sdk/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@aws-sdk/util-defaults-mode-node\";\nimport { emitWarningIfUnsupportedVersion } from \"@aws-sdk/smithy-client\";\nexport const getRuntimeConfig = (config) => {\n    emitWarningIfUnsupportedVersion(process.version);\n    const defaultsMode = resolveDefaultsModeConfig(config);\n    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n    const clientSharedValues = getSharedRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }),\n        maxAttempts: config?.maxAttempts ?? loadNodeConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: config?.region ?? loadNodeConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: config?.requestHandler ?? new RequestHandler(defaultConfigProvider),\n        retryMode: config?.retryMode ??\n            loadNodeConfig({\n                ...NODE_RETRY_MODE_CONFIG_OPTIONS,\n                default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE,\n            }),\n        sha256: config?.sha256 ?? Hash.bind(null, \"sha256\"),\n        streamCollector: config?.streamCollector ?? streamCollector,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadNodeConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: config?.useFipsEndpoint ?? loadNodeConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n    };\n};\n", "import { resolveRegionConfig } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@aws-sdk/middleware-endpoint\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client, } from \"@aws-sdk/smithy-client\";\nimport { resolveClientEndpointParameters, } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nexport class SSOOIDCClient extends __Client {\n    constructor(configuration) {\n        const _config_0 = __getRuntimeConfig(configuration);\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = resolveRegionConfig(_config_1);\n        const _config_3 = resolveEndpointConfig(_config_2);\n        const _config_4 = resolveRetryConfig(_config_3);\n        const _config_5 = resolveHostHeaderConfig(_config_4);\n        const _config_6 = resolveUserAgentConfig(_config_5);\n        super(_config_6);\n        this.config = _config_6;\n        this.middlewareStack.use(getRetryPlugin(this.config));\n        this.middlewareStack.use(getContentLengthPlugin(this.config));\n        this.middlewareStack.use(getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(getLoggerPlugin(this.config));\n        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n        this.middlewareStack.use(getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n", "import { SSOOIDCClient } from \"@aws-sdk/client-sso-oidc\";\nconst ssoOidcClientsHash = {};\nexport const getSsoOidcClient = (ssoRegion) => {\n    if (ssoOidcClientsHash[ssoRegion]) {\n        return ssoOidcClientsHash[ssoRegion];\n    }\n    const ssoOidcClient = new SSOOIDCClient({ region: ssoRegion });\n    ssoOidcClientsHash[ssoRegion] = ssoOidcClient;\n    return ssoOidcClient;\n};\n", "import { CreateTokenCommand } from \"@aws-sdk/client-sso-oidc\";\nimport { getSsoOidcClient } from \"./getSsoOidcClient\";\nexport const getNewSsoOidcToken = (ssoToken, ssoRegion) => {\n    const ssoOidcClient = getSsoOidcClient(ssoRegion);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: \"refresh_token\",\n    }));\n};\n", "import { TokenProviderError } from \"@aws-sdk/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n", "import { TokenProviderError } from \"@aws-sdk/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === \"undefined\") {\n        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? \". Cannot refresh\" : \"\"}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n", "import { getSSOTokenFilepath } from \"@aws-sdk/shared-ini-file-loader\";\nimport { promises as fsPromises } from \"fs\";\nconst { writeFile } = fsPromises;\nexport const writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = getSSOTokenFilepath(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n", "import { TokenProviderError } from \"@aws-sdk/property-provider\";\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles, } from \"@aws-sdk/shared-ini-file-loader\";\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\nimport { validateTokenKey } from \"./validateTokenKey\";\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\nconst lastRefreshAttemptTime = new Date(0);\nexport const fromSso = (init = {}) => async () => {\n    const profiles = await parseKnownFiles(init);\n    const profileName = getProfileName(init);\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile[\"sso_session\"]) {\n        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await loadSsoSessionData(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n        ssoToken = await getSSOTokenFromFile(ssoSessionName);\n    }\n    catch (e) {\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion);\n        validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n        validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n", "import { GetRoleCredentialsCommand, SSOClient } from \"@aws-sdk/client-sso\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { getSSOTokenFromFile } from \"@aws-sdk/shared-ini-file-loader\";\nimport { fromSso as getSsoTokenProvider } from \"@aws-sdk/token-providers\";\nconst EXPIRE_WINDOW_MS = 15 * 60 * 1000;\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nexport const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await getSsoTokenProvider({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);\n        }\n    }\n    else {\n        try {\n            token = await getSSOTokenFromFile(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {\n        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { accessToken } = token;\n    const sso = ssoClient || new SSOClient({ region: ssoRegion });\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError(\"SSO returns an invalid temporary credential.\", SHOULD_FAIL_CREDENTIAL_CHAIN);\n    }\n    return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };\n};\n", "import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const validateSsoProfile = (profile) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", ` +\n            `\"sso_region\", \"sso_role_name\", \"sso_start_url\". Got ${Object.keys(profile).join(\", \")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);\n    }\n    return profile;\n};\n", "import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { getProfileName, loadSsoSessionData, parseKnownFiles, } from \"@aws-sdk/shared-ini-file-loader\";\nimport { isSsoProfile } from \"./isSsoProfile\";\nimport { resolveSSOCredentials } from \"./resolveSSOCredentials\";\nimport { validateSsoProfile } from \"./validateSsoProfile\";\nexport const fromSSO = (init = {}) => async () => {\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;\n    const profileName = getProfileName(init);\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await parseKnownFiles(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new CredentialsProviderError(`Profile ${profileName} was not found.`);\n        }\n        if (!isSsoProfile(profile)) {\n            throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await loadSsoSessionData(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" +\n            '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"');\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            profile: profileName,\n        });\n    }\n};\n", "import { fromSSO, validateSsoProfile } from \"@aws-sdk/credential-provider-sso\";\nexport { isSsoProfile } from \"@aws-sdk/credential-provider-sso\";\nexport const resolveSsoCredentials = (data) => {\n    const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = validateSsoProfile(data);\n    return fromSSO({\n        ssoStartUrl: sso_start_url,\n        ssoAccountId: sso_account_id,\n        ssoSession: sso_session,\n        ssoRegion: sso_region,\n        ssoRoleName: sso_role_name,\n    })();\n};\n", "export const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1;\nexport const resolveStaticCredentials = (profile) => Promise.resolve({\n    accessKeyId: profile.aws_access_key_id,\n    secretAccessKey: profile.aws_secret_access_key,\n    sessionToken: profile.aws_session_token,\n});\n", "import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { readFileSync } from \"fs\";\nimport { fromWebToken } from \"./fromWebToken\";\nconst ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\nconst ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\nconst ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\nexport const fromTokenFile = (init = {}) => async () => {\n    return resolveTokenFile(init);\n};\nconst resolveTokenFile = (init) => {\n    const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];\n    const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];\n    const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];\n    if (!webIdentityTokenFile || !roleArn) {\n        throw new CredentialsProviderError(\"Web identity configuration not specified\");\n    }\n    return fromWebToken({\n        ...init,\n        webIdentityToken: readFileSync(webIdentityTokenFile, { encoding: \"ascii\" }),\n        roleArn,\n        roleSessionName,\n    })();\n};\n", "import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const fromWebToken = (init) => () => {\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity, } = init;\n    if (!roleAssumerWithWebIdentity) {\n        throw new CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity,` +\n            ` but no role assumption callback was provided.`, false);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\n", "import { fromTokenFile } from \"@aws-sdk/credential-provider-web-identity\";\nexport const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n})();\n", "import { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data);\n    }\n    if (isAssumeRoleProfile(data)) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return resolveSsoCredentials(data);\n    }\n    throw new CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);\n};\n", "import { getProfileName, parseKnownFiles } from \"@aws-sdk/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (init = {}) => async () => {\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName(init), profiles, init);\n};\n", "import { ENV_CMDS_FULL_URI, ENV_CMDS_RELATIVE_URI, fromContainerMetadata, fromInstanceMetadata, } from \"@aws-sdk/credential-provider-imds\";\nimport { CredentialsProviderError } from \"@aws-sdk/property-provider\";\nexport const ENV_IMDS_DISABLED = \"AWS_EC2_METADATA_DISABLED\";\nexport const remoteProvider = (init) => {\n    if (process.env[ENV_CMDS_RELATIVE_URI] || process.env[ENV_CMDS_FULL_URI]) {\n        return fromContainerMetadata(init);\n    }\n    if (process.env[ENV_IMDS_DISABLED]) {\n        return async () => {\n            throw new CredentialsProviderError(\"EC2 Instance Metadata Service access disabled\");\n        };\n    }\n    return fromInstanceMetadata(init);\n};\n", "import { fromEnv } from \"@aws-sdk/credential-provider-env\";\nimport { fromIni } from \"@aws-sdk/credential-provider-ini\";\nimport { fromProcess } from \"@aws-sdk/credential-provider-process\";\nimport { fromSSO } from \"@aws-sdk/credential-provider-sso\";\nimport { fromTokenFile } from \"@aws-sdk/credential-provider-web-identity\";\nimport { chain, CredentialsProviderError, memoize } from \"@aws-sdk/property-provider\";\nimport { ENV_PROFILE } from \"@aws-sdk/shared-ini-file-loader\";\nimport { remoteProvider } from \"./remoteProvider\";\nexport const defaultProvider = (init = {}) => memoize(chain(...(init.profile || process.env[ENV_PROFILE] ? [] : [fromEnv()]), fromSSO(init), fromIni(init), fromProcess(init), fromTokenFile(init), remoteProvider(init), async () => {\n    throw new CredentialsProviderError(\"Could not load credentials from any providers\", false);\n}), (credentials) => credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < 300000, (credentials) => credentials.expiration !== undefined);\n", "const G = \"required\", H = \"type\", I = \"fn\", J = \"argv\", K = \"ref\", L = \"properties\", M = \"headers\";\nconst a = false, b = true, c = \"PartitionResult\", d = \"tree\", e = \"booleanEquals\", f = \"stringEquals\", g = \"sigv4\", h = \"us-east-1\", i = \"sts\", j = \"endpoint\", k = \"https://sts.{Region}.{PartitionResult#dnsSuffix}\", l = \"error\", m = \"getAttr\", n = { [G]: false, [H]: \"String\" }, o = { [G]: true, \"default\": false, [H]: \"Boolean\" }, p = { [K]: \"Region\" }, q = { [K]: \"UseFIPS\" }, r = { [K]: \"UseDualStack\" }, s = { [I]: \"isSet\", [J]: [{ [K]: \"Endpoint\" }] }, t = { [K]: \"Endpoint\" }, u = { \"url\": \"https://sts.amazonaws.com\", [L]: { \"authSchemes\": [{ \"name\": g, \"signingRegion\": h, \"signingName\": i }] }, [M]: {} }, v = {}, w = { \"conditions\": [{ [I]: f, [J]: [p, \"aws-global\"] }], [j]: u, [H]: j }, x = { [I]: e, [J]: [q, true] }, y = { [I]: e, [J]: [r, true] }, z = { [I]: e, [J]: [true, { [I]: m, [J]: [{ [K]: c }, \"supportsFIPS\"] }] }, A = { [K]: c }, B = { [I]: e, [J]: [true, { [I]: m, [J]: [A, \"supportsDualStack\"] }] }, C = { \"url\": k, [L]: {}, [M]: {} }, D = [t], E = [x], F = [y];\nconst _data = { version: \"1.0\", parameters: { Region: n, UseDualStack: o, UseFIPS: o, Endpoint: n, UseGlobalEndpoint: o }, rules: [{ conditions: [{ [I]: \"aws.partition\", [J]: [p], assign: c }], [H]: d, rules: [{ conditions: [{ [I]: e, [J]: [{ [K]: \"UseGlobalEndpoint\" }, b] }, { [I]: e, [J]: [q, a] }, { [I]: e, [J]: [r, a] }, { [I]: \"not\", [J]: [s] }], [H]: d, rules: [{ conditions: [{ [I]: f, [J]: [p, \"ap-northeast-1\"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, \"ap-south-1\"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, \"ap-southeast-1\"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, \"ap-southeast-2\"] }], endpoint: u, [H]: j }, w, { conditions: [{ [I]: f, [J]: [p, \"ca-central-1\"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, \"eu-central-1\"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, \"eu-north-1\"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, \"eu-west-1\"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, \"eu-west-2\"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, \"eu-west-3\"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, \"sa-east-1\"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, h] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, \"us-east-2\"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, \"us-west-1\"] }], endpoint: u, [H]: j }, { conditions: [{ [I]: f, [J]: [p, \"us-west-2\"] }], endpoint: u, [H]: j }, { endpoint: { url: k, [L]: { authSchemes: [{ name: g, signingRegion: \"{Region}\", signingName: i }] }, [M]: v }, [H]: j }] }, { conditions: [s, { [I]: \"parseURL\", [J]: D, assign: \"url\" }], [H]: d, rules: [{ conditions: E, error: \"Invalid Configuration: FIPS and custom endpoint are not supported\", [H]: l }, { [H]: d, rules: [{ conditions: F, error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\", [H]: l }, { endpoint: { url: t, [L]: v, [M]: v }, [H]: j }] }] }, { conditions: [x, y], [H]: d, rules: [{ conditions: [z, B], [H]: d, rules: [{ endpoint: { url: \"https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\", [L]: v, [M]: v }, [H]: j }] }, { error: \"FIPS and DualStack are enabled, but this partition does not support one or both\", [H]: l }] }, { conditions: E, [H]: d, rules: [{ conditions: [z], [H]: d, rules: [{ [H]: d, rules: [{ conditions: [{ [I]: f, [J]: [\"aws-us-gov\", { [I]: m, [J]: [A, \"name\"] }] }], endpoint: C, [H]: j }, { endpoint: { url: \"https://sts-fips.{Region}.{PartitionResult#dnsSuffix}\", [L]: v, [M]: v }, [H]: j }] }] }, { error: \"FIPS is enabled but this partition does not support FIPS\", [H]: l }] }, { conditions: F, [H]: d, rules: [{ conditions: [B], [H]: d, rules: [{ endpoint: { url: \"https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}\", [L]: v, [M]: v }, [H]: j }] }, { error: \"DualStack is enabled but this partition does not support DualStack\", [H]: l }] }, { [H]: d, rules: [w, { endpoint: C, [H]: j }] }] }] };\nexport const ruleSet = _data;\n", "import { resolveEndpoint } from \"@aws-sdk/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n    return resolveEndpoint(ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    });\n};\n", "import { NoOpLogger } from \"@aws-sdk/smithy-client\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\nimport { fromBase64, toBase64 } from \"@aws-sdk/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@aws-sdk/util-utf8\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = (config) => ({\n    apiVersion: \"2011-06-15\",\n    base64Decoder: config?.base64Decoder ?? fromBase64,\n    base64Encoder: config?.base64Encoder ?? toBase64,\n    disableHostPrefix: config?.disableHostPrefix ?? false,\n    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n    logger: config?.logger ?? new NoOpLogger(),\n    serviceId: config?.serviceId ?? \"STS\",\n    urlParser: config?.urlParser ?? parseUrl,\n    utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n    utf8Encoder: config?.utf8Encoder ?? toUtf8,\n});\n", "import packageInfo from \"../package.json\";\nimport { decorateDefaultCredentialProvider } from \"./defaultStsRoleAssumers\";\nimport { NODE_REGION_CONFIG_FILE_OPTIONS, NODE_REGION_CONFIG_OPTIONS, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, } from \"@aws-sdk/config-resolver\";\nimport { defaultProvider as credentialDefaultProvider } from \"@aws-sdk/credential-provider-node\";\nimport { Hash } from \"@aws-sdk/hash-node\";\nimport { NODE_MAX_ATTEMPT_CONFIG_OPTIONS, NODE_RETRY_MODE_CONFIG_OPTIONS } from \"@aws-sdk/middleware-retry\";\nimport { loadConfig as loadNodeConfig } from \"@aws-sdk/node-config-provider\";\nimport { NodeHttpHandler as RequestHandler, streamCollector } from \"@aws-sdk/node-http-handler\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-node\";\nimport { DEFAULT_RETRY_MODE } from \"@aws-sdk/util-retry\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-node\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@aws-sdk/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@aws-sdk/util-defaults-mode-node\";\nimport { emitWarningIfUnsupportedVersion } from \"@aws-sdk/smithy-client\";\nexport const getRuntimeConfig = (config) => {\n    emitWarningIfUnsupportedVersion(process.version);\n    const defaultsMode = resolveDefaultsModeConfig(config);\n    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n    const clientSharedValues = getSharedRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n        credentialDefaultProvider: config?.credentialDefaultProvider ?? decorateDefaultCredentialProvider(credentialDefaultProvider),\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }),\n        maxAttempts: config?.maxAttempts ?? loadNodeConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: config?.region ?? loadNodeConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: config?.requestHandler ?? new RequestHandler(defaultConfigProvider),\n        retryMode: config?.retryMode ??\n            loadNodeConfig({\n                ...NODE_RETRY_MODE_CONFIG_OPTIONS,\n                default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE,\n            }),\n        sha256: config?.sha256 ?? Hash.bind(null, \"sha256\"),\n        streamCollector: config?.streamCollector ?? streamCollector,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadNodeConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: config?.useFipsEndpoint ?? loadNodeConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n    };\n};\n", "import { resolveRegionConfig } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@aws-sdk/middleware-endpoint\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { resolveStsAuthConfig } from \"@aws-sdk/middleware-sdk-sts\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client, } from \"@aws-sdk/smithy-client\";\nimport { resolveClientEndpointParameters, } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nexport class STSClient extends __Client {\n    constructor(configuration) {\n        const _config_0 = __getRuntimeConfig(configuration);\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = resolveRegionConfig(_config_1);\n        const _config_3 = resolveEndpointConfig(_config_2);\n        const _config_4 = resolveRetryConfig(_config_3);\n        const _config_5 = resolveHostHeaderConfig(_config_4);\n        const _config_6 = resolveStsAuthConfig(_config_5, { stsClientCtor: STSClient });\n        const _config_7 = resolveUserAgentConfig(_config_6);\n        super(_config_7);\n        this.config = _config_7;\n        this.middlewareStack.use(getRetryPlugin(this.config));\n        this.middlewareStack.use(getContentLengthPlugin(this.config));\n        this.middlewareStack.use(getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(getLoggerPlugin(this.config));\n        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n        this.middlewareStack.use(getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n", "import { getDefaultRoleAssumer as StsGetDefaultRoleAssumer, getDefaultRoleAssumerWithWebIdentity as StsGetDefaultRoleAssumerWithWebIdentity, } from \"./defaultStsRoleAssumers\";\nimport { STSClient } from \"./STSClient\";\nconst getCustomizableStsClientCtor = (baseCtor, customizations) => {\n    if (!customizations)\n        return baseCtor;\n    else\n        return class CustomizableSTSClient extends baseCtor {\n            constructor(config) {\n                super(config);\n                for (const customization of customizations) {\n                    this.middlewareStack.use(customization);\n                }\n            }\n        };\n};\nexport const getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumer(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => StsGetDefaultRoleAssumerWithWebIdentity(stsOptions, getCustomizableStsClientCtor(STSClient, stsPlugins));\nexport const decorateDefaultCredentialProvider = (provider) => (input) => provider({\n    roleAssumer: getDefaultRoleAssumer(input),\n    roleAssumerWithWebIdentity: getDefaultRoleAssumerWithWebIdentity(input),\n    ...input,\n});\n", "const s = \"required\", t = \"fn\", u = \"argv\", v = \"ref\";\nconst a = \"isSet\", b = \"tree\", c = \"error\", d = \"endpoint\", e = \"PartitionResult\", f = \"getAttr\", g = { [s]: false, \"type\": \"String\" }, h = { [s]: true, \"default\": false, \"type\": \"Boolean\" }, i = { [v]: \"Endpoint\" }, j = { [t]: \"booleanEquals\", [u]: [{ [v]: \"UseFIPS\" }, true] }, k = { [t]: \"booleanEquals\", [u]: [{ [v]: \"UseDualStack\" }, true] }, l = {}, m = { [t]: \"booleanEquals\", [u]: [true, { [t]: f, [u]: [{ [v]: e }, \"supportsFIPS\"] }] }, n = { [v]: e }, o = { [t]: \"booleanEquals\", [u]: [true, { [t]: f, [u]: [n, \"supportsDualStack\"] }] }, p = [j], q = [k], r = [{ [v]: \"Region\" }];\nconst _data = { version: \"1.0\", parameters: { Region: g, UseDualStack: h, UseFIPS: h, Endpoint: g }, rules: [{ conditions: [{ [t]: a, [u]: [i] }], type: b, rules: [{ conditions: p, error: \"Invalid Configuration: FIPS and custom endpoint are not supported\", type: c }, { type: b, rules: [{ conditions: q, error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\", type: c }, { endpoint: { url: i, properties: l, headers: l }, type: d }] }] }, { type: b, rules: [{ conditions: [{ [t]: a, [u]: r }], type: b, rules: [{ conditions: [{ [t]: \"aws.partition\", [u]: r, assign: e }], type: b, rules: [{ conditions: [j, k], type: b, rules: [{ conditions: [m, o], type: b, rules: [{ type: b, rules: [{ endpoint: { url: \"https://ssm-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: l, headers: l }, type: d }] }] }, { error: \"FIPS and DualStack are enabled, but this partition does not support one or both\", type: c }] }, { conditions: p, type: b, rules: [{ conditions: [m], type: b, rules: [{ type: b, rules: [{ conditions: [{ [t]: \"stringEquals\", [u]: [\"aws-us-gov\", { [t]: f, [u]: [n, \"name\"] }] }], endpoint: { url: \"https://ssm.{Region}.amazonaws.com\", properties: l, headers: l }, type: d }, { endpoint: { url: \"https://ssm-fips.{Region}.{PartitionResult#dnsSuffix}\", properties: l, headers: l }, type: d }] }] }, { error: \"FIPS is enabled but this partition does not support FIPS\", type: c }] }, { conditions: q, type: b, rules: [{ conditions: [o], type: b, rules: [{ type: b, rules: [{ endpoint: { url: \"https://ssm.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: l, headers: l }, type: d }] }] }, { error: \"DualStack is enabled but this partition does not support DualStack\", type: c }] }, { type: b, rules: [{ endpoint: { url: \"https://ssm.{Region}.{PartitionResult#dnsSuffix}\", properties: l, headers: l }, type: d }] }] }] }, { error: \"Invalid Configuration: Missing Region\", type: c }] }] };\nexport const ruleSet = _data;\n", "import { resolveEndpoint } from \"@aws-sdk/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n    return resolveEndpoint(ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    });\n};\n", "import { NoOpLogger } from \"@aws-sdk/smithy-client\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\nimport { fromBase64, toBase64 } from \"@aws-sdk/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@aws-sdk/util-utf8\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = (config) => ({\n    apiVersion: \"2014-11-06\",\n    base64Decoder: config?.base64Decoder ?? fromBase64,\n    base64Encoder: config?.base64Encoder ?? toBase64,\n    disableHostPrefix: config?.disableHostPrefix ?? false,\n    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n    logger: config?.logger ?? new NoOpLogger(),\n    serviceId: config?.serviceId ?? \"SSM\",\n    urlParser: config?.urlParser ?? parseUrl,\n    utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n    utf8Encoder: config?.utf8Encoder ?? toUtf8,\n});\n", "import packageInfo from \"../package.json\";\nimport { decorateDefaultCredentialProvider } from \"@aws-sdk/client-sts\";\nimport { NODE_REGION_CONFIG_FILE_OPTIONS, NODE_REGION_CONFIG_OPTIONS, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, } from \"@aws-sdk/config-resolver\";\nimport { defaultProvider as credentialDefaultProvider } from \"@aws-sdk/credential-provider-node\";\nimport { Hash } from \"@aws-sdk/hash-node\";\nimport { NODE_MAX_ATTEMPT_CONFIG_OPTIONS, NODE_RETRY_MODE_CONFIG_OPTIONS } from \"@aws-sdk/middleware-retry\";\nimport { loadConfig as loadNodeConfig } from \"@aws-sdk/node-config-provider\";\nimport { NodeHttpHandler as RequestHandler, streamCollector } from \"@aws-sdk/node-http-handler\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-node\";\nimport { DEFAULT_RETRY_MODE } from \"@aws-sdk/util-retry\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-node\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@aws-sdk/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@aws-sdk/util-defaults-mode-node\";\nimport { emitWarningIfUnsupportedVersion } from \"@aws-sdk/smithy-client\";\nexport const getRuntimeConfig = (config) => {\n    emitWarningIfUnsupportedVersion(process.version);\n    const defaultsMode = resolveDefaultsModeConfig(config);\n    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n    const clientSharedValues = getSharedRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n        credentialDefaultProvider: config?.credentialDefaultProvider ?? decorateDefaultCredentialProvider(credentialDefaultProvider),\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }),\n        maxAttempts: config?.maxAttempts ?? loadNodeConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: config?.region ?? loadNodeConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: config?.requestHandler ?? new RequestHandler(defaultConfigProvider),\n        retryMode: config?.retryMode ??\n            loadNodeConfig({\n                ...NODE_RETRY_MODE_CONFIG_OPTIONS,\n                default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE,\n            }),\n        sha256: config?.sha256 ?? Hash.bind(null, \"sha256\"),\n        streamCollector: config?.streamCollector ?? streamCollector,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadNodeConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: config?.useFipsEndpoint ?? loadNodeConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n    };\n};\n", "import { resolveRegionConfig } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@aws-sdk/middleware-endpoint\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getAwsAuthPlugin, resolveAwsAuthConfig, } from \"@aws-sdk/middleware-signing\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client, } from \"@aws-sdk/smithy-client\";\nimport { resolveClientEndpointParameters, } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nexport class SSMClient extends __Client {\n    constructor(configuration) {\n        const _config_0 = __getRuntimeConfig(configuration);\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = resolveRegionConfig(_config_1);\n        const _config_3 = resolveEndpointConfig(_config_2);\n        const _config_4 = resolveRetryConfig(_config_3);\n        const _config_5 = resolveHostHeaderConfig(_config_4);\n        const _config_6 = resolveAwsAuthConfig(_config_5);\n        const _config_7 = resolveUserAgentConfig(_config_6);\n        super(_config_7);\n        this.config = _config_7;\n        this.middlewareStack.use(getRetryPlugin(this.config));\n        this.middlewareStack.use(getContentLengthPlugin(this.config));\n        this.middlewareStack.use(getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(getLoggerPlugin(this.config));\n        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n        this.middlewareStack.use(getAwsAuthPlugin(this.config));\n        this.middlewareStack.use(getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n", "export const resolveClientEndpointParameters = (options) => {\n    return {\n        ...options,\n        useDualstackEndpoint: options.useDualstackEndpoint ?? false,\n        useFipsEndpoint: options.useFipsEndpoint ?? false,\n        defaultSigningName: \"logs\",\n    };\n};\n", "{\n  \"name\": \"@aws-sdk/client-cloudwatch-logs\",\n  \"description\": \"AWS SDK for JavaScript Cloudwatch Logs Client for Node.js, Browser and React Native\",\n  \"version\": \"3.321.1\",\n  \"scripts\": {\n    \"build\": \"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\",\n    \"build:cjs\": \"tsc -p tsconfig.cjs.json\",\n    \"build:docs\": \"typedoc\",\n    \"build:es\": \"tsc -p tsconfig.es.json\",\n    \"build:include:deps\": \"lerna run --scope $npm_package_name --include-dependencies build\",\n    \"build:types\": \"tsc -p tsconfig.types.json\",\n    \"build:types:downlevel\": \"downlevel-dts dist-types dist-types/ts3.4\",\n    \"clean\": \"rimraf ./dist-* && rimraf *.tsbuildinfo\",\n    \"extract:docs\": \"api-extractor run --local\",\n    \"generate:client\": \"node ../../scripts/generate-clients/single-service --solo cloudwatch-logs\"\n  },\n  \"main\": \"./dist-cjs/index.js\",\n  \"types\": \"./dist-types/index.d.ts\",\n  \"module\": \"./dist-es/index.js\",\n  \"sideEffects\": false,\n  \"dependencies\": {\n    \"@aws-crypto/sha256-browser\": \"3.0.0\",\n    \"@aws-crypto/sha256-js\": \"3.0.0\",\n    \"@aws-sdk/client-sts\": \"3.321.1\",\n    \"@aws-sdk/config-resolver\": \"3.310.0\",\n    \"@aws-sdk/credential-provider-node\": \"3.321.1\",\n    \"@aws-sdk/fetch-http-handler\": \"3.310.0\",\n    \"@aws-sdk/hash-node\": \"3.310.0\",\n    \"@aws-sdk/invalid-dependency\": \"3.310.0\",\n    \"@aws-sdk/middleware-content-length\": \"3.310.0\",\n    \"@aws-sdk/middleware-endpoint\": \"3.310.0\",\n    \"@aws-sdk/middleware-host-header\": \"3.310.0\",\n    \"@aws-sdk/middleware-logger\": \"3.310.0\",\n    \"@aws-sdk/middleware-recursion-detection\": \"3.310.0\",\n    \"@aws-sdk/middleware-retry\": \"3.310.0\",\n    \"@aws-sdk/middleware-serde\": \"3.310.0\",\n    \"@aws-sdk/middleware-signing\": \"3.310.0\",\n    \"@aws-sdk/middleware-stack\": \"3.310.0\",\n    \"@aws-sdk/middleware-user-agent\": \"3.319.0\",\n    \"@aws-sdk/node-config-provider\": \"3.310.0\",\n    \"@aws-sdk/node-http-handler\": \"3.321.1\",\n    \"@aws-sdk/protocol-http\": \"3.310.0\",\n    \"@aws-sdk/smithy-client\": \"3.316.0\",\n    \"@aws-sdk/types\": \"3.310.0\",\n    \"@aws-sdk/url-parser\": \"3.310.0\",\n    \"@aws-sdk/util-base64\": \"3.310.0\",\n    \"@aws-sdk/util-body-length-browser\": \"3.310.0\",\n    \"@aws-sdk/util-body-length-node\": \"3.310.0\",\n    \"@aws-sdk/util-defaults-mode-browser\": \"3.316.0\",\n    \"@aws-sdk/util-defaults-mode-node\": \"3.316.0\",\n    \"@aws-sdk/util-endpoints\": \"3.319.0\",\n    \"@aws-sdk/util-retry\": \"3.310.0\",\n    \"@aws-sdk/util-user-agent-browser\": \"3.310.0\",\n    \"@aws-sdk/util-user-agent-node\": \"3.310.0\",\n    \"@aws-sdk/util-utf8\": \"3.310.0\",\n    \"tslib\": \"^2.5.0\"\n  },\n  \"devDependencies\": {\n    \"@aws-sdk/service-client-documentation-generator\": \"3.310.0\",\n    \"@tsconfig/node14\": \"1.0.3\",\n    \"@types/node\": \"^14.14.31\",\n    \"concurrently\": \"7.0.0\",\n    \"downlevel-dts\": \"0.10.1\",\n    \"rimraf\": \"3.0.2\",\n    \"typedoc\": \"0.23.23\",\n    \"typescript\": \"~4.9.5\"\n  },\n  \"engines\": {\n    \"node\": \">=14.0.0\"\n  },\n  \"typesVersions\": {\n    \"<4.0\": {\n      \"dist-types/*\": [\n        \"dist-types/ts3.4/*\"\n      ]\n    }\n  },\n  \"files\": [\n    \"dist-*/**\"\n  ],\n  \"author\": {\n    \"name\": \"AWS SDK for JavaScript Team\",\n    \"url\": \"https://aws.amazon.com/javascript/\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"browser\": {\n    \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.browser\"\n  },\n  \"react-native\": {\n    \"./dist-es/runtimeConfig\": \"./dist-es/runtimeConfig.native\"\n  },\n  \"homepage\": \"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cloudwatch-logs\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/aws/aws-sdk-js-v3.git\",\n    \"directory\": \"clients/client-cloudwatch-logs\"\n  }\n}\n", "const s = \"fn\", t = \"argv\", u = \"ref\";\nconst a = true, b = false, c = \"String\", d = \"PartitionResult\", e = \"tree\", f = \"error\", g = \"endpoint\", h = \"stringEquals\", i = { \"required\": true, \"default\": false, \"type\": \"Boolean\" }, j = { [u]: \"Region\" }, k = { [u]: \"Endpoint\" }, l = { [s]: \"booleanEquals\", [t]: [{ [u]: \"UseFIPS\" }, true] }, m = { [s]: \"booleanEquals\", [t]: [{ [u]: \"UseDualStack\" }, true] }, n = {}, o = { [s]: \"booleanEquals\", [t]: [true, { [s]: \"getAttr\", [t]: [{ [u]: d }, \"supportsFIPS\"] }] }, p = { [s]: \"booleanEquals\", [t]: [true, { [s]: \"getAttr\", [t]: [{ [u]: d }, \"supportsDualStack\"] }] }, q = [l], r = [m];\nconst _data = { version: \"1.0\", parameters: { Region: { required: a, type: c }, UseDualStack: i, UseFIPS: i, Endpoint: { required: b, type: c } }, rules: [{ conditions: [{ [s]: \"aws.partition\", [t]: [j], assign: d }], type: e, rules: [{ conditions: [{ [s]: \"isSet\", [t]: [k] }], type: e, rules: [{ conditions: q, error: \"Invalid Configuration: FIPS and custom endpoint are not supported\", type: f }, { type: e, rules: [{ conditions: r, error: \"Invalid Configuration: Dualstack and custom endpoint are not supported\", type: f }, { endpoint: { url: k, properties: n, headers: n }, type: g }] }] }, { conditions: [l, m], type: e, rules: [{ conditions: [o, p], type: e, rules: [{ endpoint: { url: \"https://logs-fips.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: n, headers: n }, type: g }] }, { error: \"FIPS and DualStack are enabled, but this partition does not support one or both\", type: f }] }, { conditions: q, type: e, rules: [{ conditions: [o], type: e, rules: [{ type: e, rules: [{ conditions: [{ [s]: h, [t]: [j, \"us-gov-east-1\"] }], endpoint: { url: \"https://logs.us-gov-east-1.amazonaws.com\", properties: n, headers: n }, type: g }, { conditions: [{ [s]: h, [t]: [j, \"us-gov-west-1\"] }], endpoint: { url: \"https://logs.us-gov-west-1.amazonaws.com\", properties: n, headers: n }, type: g }, { endpoint: { url: \"https://logs-fips.{Region}.{PartitionResult#dnsSuffix}\", properties: n, headers: n }, type: g }] }] }, { error: \"FIPS is enabled but this partition does not support FIPS\", type: f }] }, { conditions: r, type: e, rules: [{ conditions: [p], type: e, rules: [{ endpoint: { url: \"https://logs.{Region}.{PartitionResult#dualStackDnsSuffix}\", properties: n, headers: n }, type: g }] }, { error: \"DualStack is enabled but this partition does not support DualStack\", type: f }] }, { endpoint: { url: \"https://logs.{Region}.{PartitionResult#dnsSuffix}\", properties: n, headers: n }, type: g }] }] };\nexport const ruleSet = _data;\n", "import { resolveEndpoint } from \"@aws-sdk/util-endpoints\";\nimport { ruleSet } from \"./ruleset\";\nexport const defaultEndpointResolver = (endpointParams, context = {}) => {\n    return resolveEndpoint(ruleSet, {\n        endpointParams: endpointParams,\n        logger: context.logger,\n    });\n};\n", "import { NoOpLogger } from \"@aws-sdk/smithy-client\";\nimport { parseUrl } from \"@aws-sdk/url-parser\";\nimport { fromBase64, toBase64 } from \"@aws-sdk/util-base64\";\nimport { fromUtf8, toUtf8 } from \"@aws-sdk/util-utf8\";\nimport { defaultEndpointResolver } from \"./endpoint/endpointResolver\";\nexport const getRuntimeConfig = (config) => ({\n    apiVersion: \"2014-03-28\",\n    base64Decoder: config?.base64Decoder ?? fromBase64,\n    base64Encoder: config?.base64Encoder ?? toBase64,\n    disableHostPrefix: config?.disableHostPrefix ?? false,\n    endpointProvider: config?.endpointProvider ?? defaultEndpointResolver,\n    logger: config?.logger ?? new NoOpLogger(),\n    serviceId: config?.serviceId ?? \"CloudWatch Logs\",\n    urlParser: config?.urlParser ?? parseUrl,\n    utf8Decoder: config?.utf8Decoder ?? fromUtf8,\n    utf8Encoder: config?.utf8Encoder ?? toUtf8,\n});\n", "import packageInfo from \"../package.json\";\nimport { decorateDefaultCredentialProvider } from \"@aws-sdk/client-sts\";\nimport { NODE_REGION_CONFIG_FILE_OPTIONS, NODE_REGION_CONFIG_OPTIONS, NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS, NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS, } from \"@aws-sdk/config-resolver\";\nimport { defaultProvider as credentialDefaultProvider } from \"@aws-sdk/credential-provider-node\";\nimport { Hash } from \"@aws-sdk/hash-node\";\nimport { NODE_MAX_ATTEMPT_CONFIG_OPTIONS, NODE_RETRY_MODE_CONFIG_OPTIONS } from \"@aws-sdk/middleware-retry\";\nimport { loadConfig as loadNodeConfig } from \"@aws-sdk/node-config-provider\";\nimport { NodeHttpHandler as RequestHandler, streamCollector } from \"@aws-sdk/node-http-handler\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-node\";\nimport { DEFAULT_RETRY_MODE } from \"@aws-sdk/util-retry\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-node\";\nimport { getRuntimeConfig as getSharedRuntimeConfig } from \"./runtimeConfig.shared\";\nimport { loadConfigsForDefaultMode } from \"@aws-sdk/smithy-client\";\nimport { resolveDefaultsModeConfig } from \"@aws-sdk/util-defaults-mode-node\";\nimport { emitWarningIfUnsupportedVersion } from \"@aws-sdk/smithy-client\";\nexport const getRuntimeConfig = (config) => {\n    emitWarningIfUnsupportedVersion(process.version);\n    const defaultsMode = resolveDefaultsModeConfig(config);\n    const defaultConfigProvider = () => defaultsMode().then(loadConfigsForDefaultMode);\n    const clientSharedValues = getSharedRuntimeConfig(config);\n    return {\n        ...clientSharedValues,\n        ...config,\n        runtime: \"node\",\n        defaultsMode,\n        bodyLengthChecker: config?.bodyLengthChecker ?? calculateBodyLength,\n        credentialDefaultProvider: config?.credentialDefaultProvider ?? decorateDefaultCredentialProvider(credentialDefaultProvider),\n        defaultUserAgentProvider: config?.defaultUserAgentProvider ??\n            defaultUserAgent({ serviceId: clientSharedValues.serviceId, clientVersion: packageInfo.version }),\n        maxAttempts: config?.maxAttempts ?? loadNodeConfig(NODE_MAX_ATTEMPT_CONFIG_OPTIONS),\n        region: config?.region ?? loadNodeConfig(NODE_REGION_CONFIG_OPTIONS, NODE_REGION_CONFIG_FILE_OPTIONS),\n        requestHandler: config?.requestHandler ?? new RequestHandler(defaultConfigProvider),\n        retryMode: config?.retryMode ??\n            loadNodeConfig({\n                ...NODE_RETRY_MODE_CONFIG_OPTIONS,\n                default: async () => (await defaultConfigProvider()).retryMode || DEFAULT_RETRY_MODE,\n            }),\n        sha256: config?.sha256 ?? Hash.bind(null, \"sha256\"),\n        streamCollector: config?.streamCollector ?? streamCollector,\n        useDualstackEndpoint: config?.useDualstackEndpoint ?? loadNodeConfig(NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),\n        useFipsEndpoint: config?.useFipsEndpoint ?? loadNodeConfig(NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),\n    };\n};\n", "import { resolveRegionConfig } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { resolveEndpointConfig } from \"@aws-sdk/middleware-endpoint\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRecursionDetectionPlugin } from \"@aws-sdk/middleware-recursion-detection\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getAwsAuthPlugin, resolveAwsAuthConfig, } from \"@aws-sdk/middleware-signing\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client, } from \"@aws-sdk/smithy-client\";\nimport { resolveClientEndpointParameters, } from \"./endpoint/EndpointParameters\";\nimport { getRuntimeConfig as __getRuntimeConfig } from \"./runtimeConfig\";\nexport class CloudWatchLogsClient extends __Client {\n    constructor(configuration) {\n        const _config_0 = __getRuntimeConfig(configuration);\n        const _config_1 = resolveClientEndpointParameters(_config_0);\n        const _config_2 = resolveRegionConfig(_config_1);\n        const _config_3 = resolveEndpointConfig(_config_2);\n        const _config_4 = resolveRetryConfig(_config_3);\n        const _config_5 = resolveHostHeaderConfig(_config_4);\n        const _config_6 = resolveAwsAuthConfig(_config_5);\n        const _config_7 = resolveUserAgentConfig(_config_6);\n        super(_config_7);\n        this.config = _config_7;\n        this.middlewareStack.use(getRetryPlugin(this.config));\n        this.middlewareStack.use(getContentLengthPlugin(this.config));\n        this.middlewareStack.use(getHostHeaderPlugin(this.config));\n        this.middlewareStack.use(getLoggerPlugin(this.config));\n        this.middlewareStack.use(getRecursionDetectionPlugin(this.config));\n        this.middlewareStack.use(getAwsAuthPlugin(this.config));\n        this.middlewareStack.use(getUserAgentPlugin(this.config));\n    }\n    destroy() {\n        super.destroy();\n    }\n}\n", "import { ServiceException as __ServiceException, } from \"@aws-sdk/smithy-client\";\nexport class CloudWatchLogsServiceException extends __ServiceException {\n    constructor(options) {\n        super(options);\n        Object.setPrototypeOf(this, CloudWatchLogsServiceException.prototype);\n    }\n}\n", "import { CloudWatchLogsServiceException as __BaseException } from \"./CloudWatchLogsServiceException\";\nexport class InvalidParameterException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidParameterException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidParameterException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidParameterException.prototype);\n    }\n}\nexport class OperationAbortedException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"OperationAbortedException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"OperationAbortedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, OperationAbortedException.prototype);\n    }\n}\nexport class ResourceNotFoundException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceNotFoundException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceNotFoundException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);\n    }\n}\nexport class ServiceUnavailableException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ServiceUnavailableException\",\n            $fault: \"server\",\n            ...opts,\n        });\n        this.name = \"ServiceUnavailableException\";\n        this.$fault = \"server\";\n        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);\n    }\n}\nexport class InvalidOperationException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidOperationException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidOperationException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidOperationException.prototype);\n    }\n}\nexport class LimitExceededException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"LimitExceededException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"LimitExceededException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, LimitExceededException.prototype);\n    }\n}\nexport class ResourceAlreadyExistsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"ResourceAlreadyExistsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"ResourceAlreadyExistsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);\n    }\n}\nexport class DataAlreadyAcceptedException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"DataAlreadyAcceptedException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"DataAlreadyAcceptedException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, DataAlreadyAcceptedException.prototype);\n        this.expectedSequenceToken = opts.expectedSequenceToken;\n    }\n}\nexport const DataProtectionStatus = {\n    ACTIVATED: \"ACTIVATED\",\n    ARCHIVED: \"ARCHIVED\",\n    DELETED: \"DELETED\",\n    DISABLED: \"DISABLED\",\n};\nexport const ExportTaskStatusCode = {\n    CANCELLED: \"CANCELLED\",\n    COMPLETED: \"COMPLETED\",\n    FAILED: \"FAILED\",\n    PENDING: \"PENDING\",\n    PENDING_CANCEL: \"PENDING_CANCEL\",\n    RUNNING: \"RUNNING\",\n};\nexport const OrderBy = {\n    LastEventTime: \"LastEventTime\",\n    LogStreamName: \"LogStreamName\",\n};\nexport const StandardUnit = {\n    Bits: \"Bits\",\n    BitsSecond: \"Bits/Second\",\n    Bytes: \"Bytes\",\n    BytesSecond: \"Bytes/Second\",\n    Count: \"Count\",\n    CountSecond: \"Count/Second\",\n    Gigabits: \"Gigabits\",\n    GigabitsSecond: \"Gigabits/Second\",\n    Gigabytes: \"Gigabytes\",\n    GigabytesSecond: \"Gigabytes/Second\",\n    Kilobits: \"Kilobits\",\n    KilobitsSecond: \"Kilobits/Second\",\n    Kilobytes: \"Kilobytes\",\n    KilobytesSecond: \"Kilobytes/Second\",\n    Megabits: \"Megabits\",\n    MegabitsSecond: \"Megabits/Second\",\n    Megabytes: \"Megabytes\",\n    MegabytesSecond: \"Megabytes/Second\",\n    Microseconds: \"Microseconds\",\n    Milliseconds: \"Milliseconds\",\n    None: \"None\",\n    Percent: \"Percent\",\n    Seconds: \"Seconds\",\n    Terabits: \"Terabits\",\n    TerabitsSecond: \"Terabits/Second\",\n    Terabytes: \"Terabytes\",\n    TerabytesSecond: \"Terabytes/Second\",\n};\nexport const QueryStatus = {\n    Cancelled: \"Cancelled\",\n    Complete: \"Complete\",\n    Failed: \"Failed\",\n    Running: \"Running\",\n    Scheduled: \"Scheduled\",\n    Timeout: \"Timeout\",\n    Unknown: \"Unknown\",\n};\nexport const Distribution = {\n    ByLogStream: \"ByLogStream\",\n    Random: \"Random\",\n};\nexport class InvalidSequenceTokenException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"InvalidSequenceTokenException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"InvalidSequenceTokenException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, InvalidSequenceTokenException.prototype);\n        this.expectedSequenceToken = opts.expectedSequenceToken;\n    }\n}\nexport class UnrecognizedClientException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"UnrecognizedClientException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"UnrecognizedClientException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, UnrecognizedClientException.prototype);\n    }\n}\nexport class MalformedQueryException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"MalformedQueryException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"MalformedQueryException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, MalformedQueryException.prototype);\n        this.queryCompileError = opts.queryCompileError;\n    }\n}\nexport class TooManyTagsException extends __BaseException {\n    constructor(opts) {\n        super({\n            name: \"TooManyTagsException\",\n            $fault: \"client\",\n            ...opts,\n        });\n        this.name = \"TooManyTagsException\";\n        this.$fault = \"client\";\n        Object.setPrototypeOf(this, TooManyTagsException.prototype);\n        this.resourceName = opts.resourceName;\n    }\n}\n", "import { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { _json, decorateServiceException as __decorateServiceException, expectLong as __expectLong, expectString as __expectString, limitedParseDouble as __limitedParseDouble, serializeFloat as __serializeFloat, take, withBaseException, } from \"@aws-sdk/smithy-client\";\nimport { CloudWatchLogsServiceException as __BaseException } from \"../models/CloudWatchLogsServiceException\";\nimport { DataAlreadyAcceptedException, InvalidOperationException, InvalidParameterException, InvalidSequenceTokenException, LimitExceededException, MalformedQueryException, OperationAbortedException, ResourceAlreadyExistsException, ResourceNotFoundException, ServiceUnavailableException, TooManyTagsException, UnrecognizedClientException, } from \"../models/models_0\";\nexport const se_AssociateKmsKeyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"AssociateKmsKey\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CancelExportTaskCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CancelExportTask\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateExportTaskCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateExportTask\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateLogGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateLogGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_CreateLogStreamCommand = async (input, context) => {\n    const headers = sharedHeaders(\"CreateLogStream\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteDataProtectionPolicyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteDataProtectionPolicy\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteDestinationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteDestination\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteLogGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteLogGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteLogStreamCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteLogStream\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteMetricFilterCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteMetricFilter\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteQueryDefinitionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteQueryDefinition\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteResourcePolicyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteResourcePolicy\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteRetentionPolicyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteRetentionPolicy\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DeleteSubscriptionFilterCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DeleteSubscriptionFilter\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeDestinationsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeDestinations\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeExportTasksCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeExportTasks\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeLogGroupsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeLogGroups\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeLogStreamsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeLogStreams\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeMetricFiltersCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeMetricFilters\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeQueriesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeQueries\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeQueryDefinitionsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeQueryDefinitions\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeResourcePoliciesCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeResourcePolicies\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DescribeSubscriptionFiltersCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DescribeSubscriptionFilters\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_DisassociateKmsKeyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"DisassociateKmsKey\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_FilterLogEventsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"FilterLogEvents\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetDataProtectionPolicyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetDataProtectionPolicy\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetLogEventsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetLogEvents\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetLogGroupFieldsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetLogGroupFields\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetLogRecordCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetLogRecord\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_GetQueryResultsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"GetQueryResults\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListTagsForResourceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListTagsForResource\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_ListTagsLogGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"ListTagsLogGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutDataProtectionPolicyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutDataProtectionPolicy\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutDestinationCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutDestination\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutDestinationPolicyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutDestinationPolicy\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutLogEventsCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutLogEvents\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutMetricFilterCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutMetricFilter\");\n    let body;\n    body = JSON.stringify(se_PutMetricFilterRequest(input, context));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutQueryDefinitionCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutQueryDefinition\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutResourcePolicyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutResourcePolicy\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutRetentionPolicyCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutRetentionPolicy\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_PutSubscriptionFilterCommand = async (input, context) => {\n    const headers = sharedHeaders(\"PutSubscriptionFilter\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_StartQueryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"StartQuery\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_StopQueryCommand = async (input, context) => {\n    const headers = sharedHeaders(\"StopQuery\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_TagLogGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"TagLogGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_TagResourceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"TagResource\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_TestMetricFilterCommand = async (input, context) => {\n    const headers = sharedHeaders(\"TestMetricFilter\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UntagLogGroupCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UntagLogGroup\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const se_UntagResourceCommand = async (input, context) => {\n    const headers = sharedHeaders(\"UntagResource\");\n    let body;\n    body = JSON.stringify(_json(input));\n    return buildHttpRpcRequest(context, headers, \"/\", undefined, body);\n};\nexport const de_AssociateKmsKeyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_AssociateKmsKeyCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_AssociateKmsKeyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CancelExportTaskCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CancelExportTaskCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_CancelExportTaskCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidOperationException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidOperationException\":\n            throw await de_InvalidOperationExceptionRes(parsedOutput, context);\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateExportTaskCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateExportTaskCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_CreateExportTaskCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"LimitExceededException\":\n        case \"com.amazonaws.cloudwatchlogs#LimitExceededException\":\n            throw await de_LimitExceededExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceAlreadyExistsException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException\":\n            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateLogGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateLogGroupCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_CreateLogGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"LimitExceededException\":\n        case \"com.amazonaws.cloudwatchlogs#LimitExceededException\":\n            throw await de_LimitExceededExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceAlreadyExistsException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException\":\n            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_CreateLogStreamCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_CreateLogStreamCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_CreateLogStreamCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceAlreadyExistsException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceAlreadyExistsException\":\n            throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteDataProtectionPolicyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteDataProtectionPolicyCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_DeleteDataProtectionPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteDestinationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteDestinationCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_DeleteDestinationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteLogGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteLogGroupCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_DeleteLogGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteLogStreamCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteLogStreamCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_DeleteLogStreamCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteMetricFilterCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteMetricFilterCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_DeleteMetricFilterCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteQueryDefinitionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteQueryDefinitionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DeleteQueryDefinitionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteResourcePolicyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteResourcePolicyCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_DeleteResourcePolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteRetentionPolicyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteRetentionPolicyCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_DeleteRetentionPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DeleteSubscriptionFilterCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DeleteSubscriptionFilterCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_DeleteSubscriptionFilterCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeDestinationsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeDestinationsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeDestinationsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeExportTasksCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeExportTasksCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeExportTasksCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeLogGroupsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeLogGroupsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeLogGroupsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeLogStreamsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeLogStreamsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeLogStreamsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeMetricFiltersCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeMetricFiltersCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_DescribeMetricFiltersResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeMetricFiltersCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeQueriesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeQueriesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeQueriesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeQueryDefinitionsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeQueryDefinitionsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeQueryDefinitionsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeResourcePoliciesCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeResourcePoliciesCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeResourcePoliciesCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DescribeSubscriptionFiltersCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DescribeSubscriptionFiltersCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_DescribeSubscriptionFiltersCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_DisassociateKmsKeyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_DisassociateKmsKeyCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_DisassociateKmsKeyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_FilterLogEventsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_FilterLogEventsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_FilterLogEventsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetDataProtectionPolicyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetDataProtectionPolicyCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetDataProtectionPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetLogEventsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetLogEventsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetLogEventsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetLogGroupFieldsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetLogGroupFieldsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetLogGroupFieldsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"LimitExceededException\":\n        case \"com.amazonaws.cloudwatchlogs#LimitExceededException\":\n            throw await de_LimitExceededExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetLogRecordCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetLogRecordCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetLogRecordCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"LimitExceededException\":\n        case \"com.amazonaws.cloudwatchlogs#LimitExceededException\":\n            throw await de_LimitExceededExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_GetQueryResultsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_GetQueryResultsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = de_GetQueryResultsResponse(data, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_GetQueryResultsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListTagsForResourceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListTagsForResourceCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListTagsForResourceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_ListTagsLogGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_ListTagsLogGroupCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_ListTagsLogGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutDataProtectionPolicyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutDataProtectionPolicyCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutDataProtectionPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"LimitExceededException\":\n        case \"com.amazonaws.cloudwatchlogs#LimitExceededException\":\n            throw await de_LimitExceededExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutDestinationCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutDestinationCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutDestinationCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutDestinationPolicyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutDestinationPolicyCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_PutDestinationPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutLogEventsCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutLogEventsCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutLogEventsCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"DataAlreadyAcceptedException\":\n        case \"com.amazonaws.cloudwatchlogs#DataAlreadyAcceptedException\":\n            throw await de_DataAlreadyAcceptedExceptionRes(parsedOutput, context);\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"InvalidSequenceTokenException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidSequenceTokenException\":\n            throw await de_InvalidSequenceTokenExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        case \"UnrecognizedClientException\":\n        case \"com.amazonaws.cloudwatchlogs#UnrecognizedClientException\":\n            throw await de_UnrecognizedClientExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutMetricFilterCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutMetricFilterCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_PutMetricFilterCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"LimitExceededException\":\n        case \"com.amazonaws.cloudwatchlogs#LimitExceededException\":\n            throw await de_LimitExceededExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutQueryDefinitionCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutQueryDefinitionCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutQueryDefinitionCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"LimitExceededException\":\n        case \"com.amazonaws.cloudwatchlogs#LimitExceededException\":\n            throw await de_LimitExceededExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutResourcePolicyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutResourcePolicyCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_PutResourcePolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"LimitExceededException\":\n        case \"com.amazonaws.cloudwatchlogs#LimitExceededException\":\n            throw await de_LimitExceededExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutRetentionPolicyCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutRetentionPolicyCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_PutRetentionPolicyCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_PutSubscriptionFilterCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_PutSubscriptionFilterCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_PutSubscriptionFilterCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"LimitExceededException\":\n        case \"com.amazonaws.cloudwatchlogs#LimitExceededException\":\n            throw await de_LimitExceededExceptionRes(parsedOutput, context);\n        case \"OperationAbortedException\":\n        case \"com.amazonaws.cloudwatchlogs#OperationAbortedException\":\n            throw await de_OperationAbortedExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StartQueryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_StartQueryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_StartQueryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"LimitExceededException\":\n        case \"com.amazonaws.cloudwatchlogs#LimitExceededException\":\n            throw await de_LimitExceededExceptionRes(parsedOutput, context);\n        case \"MalformedQueryException\":\n        case \"com.amazonaws.cloudwatchlogs#MalformedQueryException\":\n            throw await de_MalformedQueryExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_StopQueryCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_StopQueryCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_StopQueryCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_TagLogGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_TagLogGroupCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_TagLogGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_TagResourceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_TagResourceCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_TagResourceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        case \"TooManyTagsException\":\n        case \"com.amazonaws.cloudwatchlogs#TooManyTagsException\":\n            throw await de_TooManyTagsExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_TestMetricFilterCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_TestMetricFilterCommandError(output, context);\n    }\n    const data = await parseBody(output.body, context);\n    let contents = {};\n    contents = _json(data);\n    const response = {\n        $metadata: deserializeMetadata(output),\n        ...contents,\n    };\n    return response;\n};\nconst de_TestMetricFilterCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UntagLogGroupCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UntagLogGroupCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_UntagLogGroupCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nexport const de_UntagResourceCommand = async (output, context) => {\n    if (output.statusCode >= 300) {\n        return de_UntagResourceCommandError(output, context);\n    }\n    await collectBody(output.body, context);\n    const response = {\n        $metadata: deserializeMetadata(output),\n    };\n    return response;\n};\nconst de_UntagResourceCommandError = async (output, context) => {\n    const parsedOutput = {\n        ...output,\n        body: await parseErrorBody(output.body, context),\n    };\n    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n    switch (errorCode) {\n        case \"InvalidParameterException\":\n        case \"com.amazonaws.cloudwatchlogs#InvalidParameterException\":\n            throw await de_InvalidParameterExceptionRes(parsedOutput, context);\n        case \"ResourceNotFoundException\":\n        case \"com.amazonaws.cloudwatchlogs#ResourceNotFoundException\":\n            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);\n        case \"ServiceUnavailableException\":\n        case \"com.amazonaws.cloudwatchlogs#ServiceUnavailableException\":\n            throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);\n        default:\n            const parsedBody = parsedOutput.body;\n            return throwDefaultError({\n                output,\n                parsedBody,\n                errorCode,\n            });\n    }\n};\nconst de_DataAlreadyAcceptedExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new DataAlreadyAcceptedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidOperationExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidOperationException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidParameterExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidParameterException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_InvalidSequenceTokenExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new InvalidSequenceTokenException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_LimitExceededExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new LimitExceededException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_MalformedQueryExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new MalformedQueryException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_OperationAbortedExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new OperationAbortedException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceAlreadyExistsExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceAlreadyExistsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ResourceNotFoundException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_ServiceUnavailableExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new ServiceUnavailableException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_TooManyTagsExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new TooManyTagsException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst de_UnrecognizedClientExceptionRes = async (parsedOutput, context) => {\n    const body = parsedOutput.body;\n    const deserialized = _json(body);\n    const exception = new UnrecognizedClientException({\n        $metadata: deserializeMetadata(parsedOutput),\n        ...deserialized,\n    });\n    return __decorateServiceException(exception, body);\n};\nconst se_MetricTransformation = (input, context) => {\n    return take(input, {\n        defaultValue: __serializeFloat,\n        dimensions: _json,\n        metricName: [],\n        metricNamespace: [],\n        metricValue: [],\n        unit: [],\n    });\n};\nconst se_MetricTransformations = (input, context) => {\n    return input\n        .filter((e) => e != null)\n        .map((entry) => {\n        return se_MetricTransformation(entry, context);\n    });\n};\nconst se_PutMetricFilterRequest = (input, context) => {\n    return take(input, {\n        filterName: [],\n        filterPattern: [],\n        logGroupName: [],\n        metricTransformations: (_) => se_MetricTransformations(_, context),\n    });\n};\nconst de_DescribeMetricFiltersResponse = (output, context) => {\n    return take(output, {\n        metricFilters: (_) => de_MetricFilters(_, context),\n        nextToken: __expectString,\n    });\n};\nconst de_GetQueryResultsResponse = (output, context) => {\n    return take(output, {\n        results: _json,\n        statistics: (_) => de_QueryStatistics(_, context),\n        status: __expectString,\n    });\n};\nconst de_MetricFilter = (output, context) => {\n    return take(output, {\n        creationTime: __expectLong,\n        filterName: __expectString,\n        filterPattern: __expectString,\n        logGroupName: __expectString,\n        metricTransformations: (_) => de_MetricTransformations(_, context),\n    });\n};\nconst de_MetricFilters = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MetricFilter(entry, context);\n    });\n    return retVal;\n};\nconst de_MetricTransformation = (output, context) => {\n    return take(output, {\n        defaultValue: __limitedParseDouble,\n        dimensions: _json,\n        metricName: __expectString,\n        metricNamespace: __expectString,\n        metricValue: __expectString,\n        unit: __expectString,\n    });\n};\nconst de_MetricTransformations = (output, context) => {\n    const retVal = (output || [])\n        .filter((e) => e != null)\n        .map((entry) => {\n        return de_MetricTransformation(entry, context);\n    });\n    return retVal;\n};\nconst de_QueryStatistics = (output, context) => {\n    return take(output, {\n        bytesScanned: __limitedParseDouble,\n        recordsMatched: __limitedParseDouble,\n        recordsScanned: __limitedParseDouble,\n    });\n};\nconst deserializeMetadata = (output) => ({\n    httpStatusCode: output.statusCode,\n    requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"] ?? output.headers[\"x-amz-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"],\n});\nconst collectBody = (streamBody = new Uint8Array(), context) => {\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\nconst collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\nconst throwDefaultError = withBaseException(__BaseException);\nconst buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {\n    const { hostname, protocol = \"https\", port, path: basePath } = await context.endpoint();\n    const contents = {\n        protocol,\n        hostname,\n        port,\n        method: \"POST\",\n        path: basePath.endsWith(\"/\") ? basePath.slice(0, -1) + path : basePath + path,\n        headers,\n    };\n    if (resolvedHostname !== undefined) {\n        contents.hostname = resolvedHostname;\n    }\n    if (body !== undefined) {\n        contents.body = body;\n    }\n    return new __HttpRequest(contents);\n};\nfunction sharedHeaders(operation) {\n    return {\n        \"content-type\": \"application/x-amz-json-1.1\",\n        \"x-amz-target\": `Logs_20140328.${operation}`,\n    };\n}\nconst parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n        return JSON.parse(encoded);\n    }\n    return {};\n});\nconst parseErrorBody = async (errorBody, context) => {\n    const value = await parseBody(errorBody, context);\n    value.message = value.message ?? value.Message;\n    return value;\n};\nconst loadRestJsonErrorCode = (output, data) => {\n    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n    const sanitizeErrorCode = (rawValue) => {\n        let cleanValue = rawValue;\n        if (typeof cleanValue === \"number\") {\n            cleanValue = cleanValue.toString();\n        }\n        if (cleanValue.indexOf(\",\") >= 0) {\n            cleanValue = cleanValue.split(\",\")[0];\n        }\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data.code !== undefined) {\n        return sanitizeErrorCode(data.code);\n    }\n    if (data[\"__type\"] !== undefined) {\n        return sanitizeErrorCode(data[\"__type\"]);\n    }\n};\n", "import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { de_GetLogEventsCommand, se_GetLogEventsCommand } from \"../protocols/Aws_json1_1\";\nexport class GetLogEventsCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, GetLogEventsCommand.getEndpointParameterInstructions()));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"CloudWatchLogsClient\";\n        const commandName = \"GetLogEventsCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: (_) => _,\n            outputFilterSensitiveLog: (_) => _,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_GetLogEventsCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_GetLogEventsCommand(output, context);\n    }\n}\n", "const ANSI_BACKGROUND_OFFSET = 10;\n\nconst wrapAnsi16 = (offset = 0) => code => `\\u001B[${code + offset}m`;\n\nconst wrapAnsi256 = (offset = 0) => code => `\\u001B[${38 + offset};5;${code}m`;\n\nconst wrapAnsi16m = (offset = 0) => (red, green, blue) => `\\u001B[${38 + offset};2;${red};${green};${blue}m`;\n\nconst styles = {\n\tmodifier: {\n\t\treset: [0, 0],\n\t\t// 21 isn't widely supported and 22 does the same thing\n\t\tbold: [1, 22],\n\t\tdim: [2, 22],\n\t\titalic: [3, 23],\n\t\tunderline: [4, 24],\n\t\toverline: [53, 55],\n\t\tinverse: [7, 27],\n\t\thidden: [8, 28],\n\t\tstrikethrough: [9, 29],\n\t},\n\tcolor: {\n\t\tblack: [30, 39],\n\t\tred: [31, 39],\n\t\tgreen: [32, 39],\n\t\tyellow: [33, 39],\n\t\tblue: [34, 39],\n\t\tmagenta: [35, 39],\n\t\tcyan: [36, 39],\n\t\twhite: [37, 39],\n\n\t\t// Bright color\n\t\tblackBright: [90, 39],\n\t\tgray: [90, 39], // Alias of `blackBright`\n\t\tgrey: [90, 39], // Alias of `blackBright`\n\t\tredBright: [91, 39],\n\t\tgreenBright: [92, 39],\n\t\tyellowBright: [93, 39],\n\t\tblueBright: [94, 39],\n\t\tmagentaBright: [95, 39],\n\t\tcyanBright: [96, 39],\n\t\twhiteBright: [97, 39],\n\t},\n\tbgColor: {\n\t\tbgBlack: [40, 49],\n\t\tbgRed: [41, 49],\n\t\tbgGreen: [42, 49],\n\t\tbgYellow: [43, 49],\n\t\tbgBlue: [44, 49],\n\t\tbgMagenta: [45, 49],\n\t\tbgCyan: [46, 49],\n\t\tbgWhite: [47, 49],\n\n\t\t// Bright color\n\t\tbgBlackBright: [100, 49],\n\t\tbgGray: [100, 49], // Alias of `bgBlackBright`\n\t\tbgGrey: [100, 49], // Alias of `bgBlackBright`\n\t\tbgRedBright: [101, 49],\n\t\tbgGreenBright: [102, 49],\n\t\tbgYellowBright: [103, 49],\n\t\tbgBlueBright: [104, 49],\n\t\tbgMagentaBright: [105, 49],\n\t\tbgCyanBright: [106, 49],\n\t\tbgWhiteBright: [107, 49],\n\t},\n};\n\nexport const modifierNames = Object.keys(styles.modifier);\nexport const foregroundColorNames = Object.keys(styles.color);\nexport const backgroundColorNames = Object.keys(styles.bgColor);\nexport const colorNames = [...foregroundColorNames, ...backgroundColorNames];\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\n\tfor (const [groupName, group] of Object.entries(styles)) {\n\t\tfor (const [styleName, style] of Object.entries(group)) {\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`,\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false,\n\t\t});\n\t}\n\n\tObject.defineProperty(styles, 'codes', {\n\t\tvalue: codes,\n\t\tenumerable: false,\n\t});\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi = wrapAnsi16();\n\tstyles.color.ansi256 = wrapAnsi256();\n\tstyles.color.ansi16m = wrapAnsi16m();\n\tstyles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);\n\n\t// From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n\tObject.defineProperties(styles, {\n\t\trgbToAnsi256: {\n\t\t\tvalue: (red, green, blue) => {\n\t\t\t\t// We use the extended greyscale palette here, with the exception of\n\t\t\t\t// black and white. normal palette only has 4 greyscale shades.\n\t\t\t\tif (red === green && green === blue) {\n\t\t\t\t\tif (red < 8) {\n\t\t\t\t\t\treturn 16;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (red > 248) {\n\t\t\t\t\t\treturn 231;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Math.round(((red - 8) / 247) * 24) + 232;\n\t\t\t\t}\n\n\t\t\t\treturn 16\n\t\t\t\t\t+ (36 * Math.round(red / 255 * 5))\n\t\t\t\t\t+ (6 * Math.round(green / 255 * 5))\n\t\t\t\t\t+ Math.round(blue / 255 * 5);\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToRgb: {\n\t\t\tvalue: hex => {\n\t\t\t\tconst matches = /[a-f\\d]{6}|[a-f\\d]{3}/i.exec(hex.toString(16));\n\t\t\t\tif (!matches) {\n\t\t\t\t\treturn [0, 0, 0];\n\t\t\t\t}\n\n\t\t\t\tlet [colorString] = matches;\n\n\t\t\t\tif (colorString.length === 3) {\n\t\t\t\t\tcolorString = [...colorString].map(character => character + character).join('');\n\t\t\t\t}\n\n\t\t\t\tconst integer = Number.parseInt(colorString, 16);\n\n\t\t\t\treturn [\n\t\t\t\t\t/* eslint-disable no-bitwise */\n\t\t\t\t\t(integer >> 16) & 0xFF,\n\t\t\t\t\t(integer >> 8) & 0xFF,\n\t\t\t\t\tinteger & 0xFF,\n\t\t\t\t\t/* eslint-enable no-bitwise */\n\t\t\t\t];\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToAnsi256: {\n\t\t\tvalue: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n\t\t\tenumerable: false,\n\t\t},\n\t\tansi256ToAnsi: {\n\t\t\tvalue: code => {\n\t\t\t\tif (code < 8) {\n\t\t\t\t\treturn 30 + code;\n\t\t\t\t}\n\n\t\t\t\tif (code < 16) {\n\t\t\t\t\treturn 90 + (code - 8);\n\t\t\t\t}\n\n\t\t\t\tlet red;\n\t\t\t\tlet green;\n\t\t\t\tlet blue;\n\n\t\t\t\tif (code >= 232) {\n\t\t\t\t\tred = (((code - 232) * 10) + 8) / 255;\n\t\t\t\t\tgreen = red;\n\t\t\t\t\tblue = red;\n\t\t\t\t} else {\n\t\t\t\t\tcode -= 16;\n\n\t\t\t\t\tconst remainder = code % 36;\n\n\t\t\t\t\tred = Math.floor(code / 36) / 5;\n\t\t\t\t\tgreen = Math.floor(remainder / 6) / 5;\n\t\t\t\t\tblue = (remainder % 6) / 5;\n\t\t\t\t}\n\n\t\t\t\tconst value = Math.max(red, green, blue) * 2;\n\n\t\t\t\tif (value === 0) {\n\t\t\t\t\treturn 30;\n\t\t\t\t}\n\n\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\tlet result = 30 + ((Math.round(blue) << 2) | (Math.round(green) << 1) | Math.round(red));\n\n\t\t\t\tif (value === 2) {\n\t\t\t\t\tresult += 60;\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\trgbToAnsi: {\n\t\t\tvalue: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToAnsi: {\n\t\t\tvalue: hex => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),\n\t\t\tenumerable: false,\n\t\t},\n\t});\n\n\treturn styles;\n}\n\nconst ansiStyles = assembleStyles();\n\nexport default ansiStyles;\n"],
  "mappings": "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e,CAAC,EAAIA,EAAM,eACnG,CACJ,CCLA,IAAAC,GAAA,CACI,WAAc,CAAC,CACP,GAAM,MACN,QAAW,CACP,UAAa,gBACb,mBAAsB,UACtB,KAAQ,MACR,kBAAqB,GACrB,aAAgB,EACpB,EACA,YAAe,yCACf,QAAW,CACP,aAAc,CACV,YAAe,oBACnB,EACA,YAAa,CACT,YAAe,0BACnB,EACA,iBAAkB,CACd,YAAe,sBACnB,EACA,iBAAkB,CACd,YAAe,sBACnB,EACA,iBAAkB,CACd,YAAe,sBACnB,EACA,aAAc,CACV,YAAe,uBACnB,EACA,aAAc,CACV,YAAe,0BACnB,EACA,iBAAkB,CACd,YAAe,0BACnB,EACA,iBAAkB,CACd,YAAe,uBACnB,EACA,iBAAkB,CACd,YAAe,wBACnB,EACA,iBAAkB,CACd,YAAe,0BACnB,EACA,aAAc,CACV,YAAe,4BACnB,EACA,eAAgB,CACZ,YAAe,kBACnB,EACA,eAAgB,CACZ,YAAe,oBACnB,EACA,eAAgB,CACZ,YAAe,iBACnB,EACA,aAAc,CACV,YAAe,oBACnB,EACA,aAAc,CACV,YAAe,gBACnB,EACA,aAAc,CACV,YAAe,gBACnB,EACA,YAAa,CACT,YAAe,kBACnB,EACA,YAAa,CACT,YAAe,iBACnB,EACA,YAAa,CACT,YAAe,gBACnB,EACA,eAAgB,CACZ,YAAe,mBACnB,EACA,aAAc,CACV,YAAe,uBACnB,EACA,YAAa,CACT,YAAe,2BACnB,EACA,YAAa,CACT,YAAe,uBACnB,EACA,YAAa,CACT,YAAe,gBACnB,EACA,YAAa,CACT,YAAe,yBACnB,EACA,YAAa,CACT,YAAe,kBACnB,CACJ,CACJ,EAAG,CACC,GAAM,SACN,QAAW,CACP,UAAa,mBACb,mBAAsB,+BACtB,KAAQ,SACR,kBAAqB,GACrB,aAAgB,EACpB,EACA,YAAe,qBACf,QAAW,CACP,gBAAiB,CACb,YAAe,yBACnB,EACA,aAAc,CACV,YAAe,iBACnB,EACA,iBAAkB,CACd,YAAe,iBACnB,CACJ,CACJ,EAAG,CACC,GAAM,aACN,QAAW,CACP,UAAa,gBACb,mBAAsB,UACtB,KAAQ,aACR,kBAAqB,GACrB,aAAgB,EACpB,EACA,YAAe,2BACf,QAAW,CACP,oBAAqB,CACjB,YAAe,iCACnB,EACA,gBAAiB,CACb,YAAe,wBACnB,EACA,gBAAiB,CACb,YAAe,wBACnB,CACJ,CACJ,EAAG,CACC,GAAM,UACN,QAAW,CACP,UAAa,aACb,mBAAsB,aACtB,KAAQ,UACR,kBAAqB,GACrB,aAAgB,EACpB,EACA,YAAe,2BACf,QAAW,CACP,iBAAkB,CACd,YAAe,4BACnB,EACA,gBAAiB,CACb,YAAe,aACnB,EACA,gBAAiB,CACb,YAAe,aACnB,CACJ,CACJ,EAAG,CACC,GAAM,YACN,QAAW,CACP,UAAa,gBACb,mBAAsB,gBACtB,KAAQ,YACR,kBAAqB,GACrB,aAAgB,EACpB,EACA,YAAe,4BACf,QAAW,CACP,mBAAoB,CAChB,YAAe,6BACnB,EACA,iBAAkB,CACd,YAAe,qBACnB,CACJ,CACJ,CAAC,EACL,QAAW,KACf,ECnLA,IAAIC,GAAyBC,GACzBC,GAA0B,GACjBC,GAAaC,GAAU,CAChC,GAAM,CAAE,WAAAC,CAAW,EAAIL,GACvB,QAAWG,KAAaE,EAAY,CAChC,GAAM,CAAE,QAAAC,EAAS,QAAAC,CAAQ,EAAIJ,EAC7B,OAAW,CAACK,EAAQC,CAAU,IAAK,OAAO,QAAQH,CAAO,EACrD,GAAIE,IAAWJ,EACX,MAAO,CACH,GAAGG,EACH,GAAGE,CACP,EAIZ,QAAWN,KAAaE,EAAY,CAChC,GAAM,CAAE,YAAAK,EAAa,QAAAH,CAAQ,EAAIJ,EACjC,GAAI,IAAI,OAAOO,CAAW,EAAE,KAAKN,CAAK,EAClC,MAAO,CACH,GAAGG,CACP,EAGR,IAAMI,EAAoBN,EAAW,KAAMF,GAAcA,EAAU,KAAO,KAAK,EAC/E,GAAI,CAACQ,EACD,MAAM,IAAI,MAAM,mHACyC,EAE7D,MAAO,CACH,GAAGA,EAAkB,OACzB,CACJ,EACaC,GAAmB,CAACC,EAAgBC,EAAkB,KAAO,CACtEd,GAAyBa,EACzBX,GAA0BY,CAC9B,EACaC,GAA0B,IAAM,CACzCH,GAAiBX,GAAgB,EAAE,CACvC,EACae,GAAqB,IAAMd,GCxCjC,IAAMe,GAAU,YCAhB,SAASC,GAAcC,EAAO,CACjC,OAAI,OAAOA,GAAU,UAAYA,GAAS,KAC/BA,EAEP,QAASA,EACF,IAAID,GAAcC,EAAM,GAAG,IAElC,OAAQA,EACD,GAAGA,EAAM,OAAOA,EAAM,MAAQ,CAAC,GAAG,IAAID,EAAa,EAAE,KAAK,IAAI,KAElE,KAAK,UAAUC,EAAO,KAAM,CAAC,CACxC,CCXO,IAAMC,EAAN,cAA4B,KAAM,CACrC,YAAYC,EAAS,CACjB,MAAMA,CAAO,EACb,KAAK,KAAO,eAChB,CACJ,ECLA,IAAAC,GAAA,GAAAC,GAAAD,GAAA,SAAAE,GAAA,kBAAAC,GAAA,YAAAC,GAAA,UAAAC,GAAA,qBAAAC,GAAA,QAAAC,GAAA,aAAAC,GAAA,iBAAAC,GAAA,cAAAC,GAAA,cAAAC,KCAA,IAAAC,GAAA,GAAAC,GAAAD,GAAA,wBAAAE,GAAA,8BAAAC,GAAA,aAAAC,GAAA,cAAAC,GAAA,qBAAAC,GAAA,4BAAAC,KCAA,IAAMC,GAAc,IAAI,OAAO,kGAAkG,EACpHC,GAAeC,GAAUF,GAAY,KAAKE,CAAK,GAAMA,EAAM,WAAW,GAAG,GAAKA,EAAM,SAAS,GAAG,ECD7G,IAAMC,GAAyB,IAAI,OAAO,mCAAmC,EAChEC,GAAmB,CAACC,EAAOC,EAAkB,KAAU,CAChE,GAAI,CAACA,EACD,OAAOH,GAAuB,KAAKE,CAAK,EAE5C,IAAME,EAASF,EAAM,MAAM,GAAG,EAC9B,QAAWG,KAASD,EAChB,GAAI,CAACH,GAAiBI,CAAK,EACvB,MAAO,GAGf,MAAO,EACX,ECVO,IAAMC,GAA4B,CAACC,EAAOC,EAAkB,KAAU,CACzE,GAAIA,EAAiB,CACjB,QAAWC,KAASF,EAAM,MAAM,GAAG,EAC/B,GAAI,CAACD,GAA0BG,CAAK,EAChC,MAAO,GAGf,MAAO,GAWX,MATI,GAACC,GAAiBH,CAAK,GAGvBA,EAAM,OAAS,GAAKA,EAAM,OAAS,IAGnCA,IAAUA,EAAM,YAAY,GAG5BI,GAAYJ,CAAK,EAIzB,ECxBO,IAAMK,GAAYC,GAAU,CAC/B,IAAMC,EAAWD,EAAM,MAAM,GAAG,EAChC,GAAIC,EAAS,OAAS,EAClB,OAAO,KACX,GAAM,CAACC,EAAKC,EAAWC,EAASC,EAAQC,EAAW,GAAGC,CAAU,EAAIN,EACpE,OAAIC,IAAQ,OAASC,IAAc,IAAMC,IAAY,IAAMG,EAAW,CAAC,IAAM,GAClE,KACJ,CACH,UAAAJ,EACA,QAAAC,EACA,OAAAC,EACA,UAAAC,EACA,WAAYC,EAAW,CAAC,EAAE,SAAS,GAAG,EAAIA,EAAW,CAAC,EAAE,MAAM,GAAG,EAAIA,CACzE,CACJ,ECdO,IAAMC,GAAgB,CAACC,EAAQC,IAAWD,IAAWC,ECCrD,IAAMC,GAAmBC,GAAS,CACrC,IAAMC,EAAQD,EAAK,MAAM,GAAG,EACtBE,EAAW,CAAC,EAClB,QAAWC,KAAQF,EAAO,CACtB,IAAMG,EAAqBD,EAAK,QAAQ,GAAG,EAC3C,GAAIC,IAAuB,GAAI,CAC3B,GAAID,EAAK,QAAQ,GAAG,IAAMA,EAAK,OAAS,EACpC,MAAM,IAAIE,EAAc,UAAUL,0BAA6B,EAEnE,IAAMM,EAAaH,EAAK,MAAMC,EAAqB,EAAG,EAAE,EACxD,GAAI,OAAO,MAAM,SAASE,CAAU,CAAC,EACjC,MAAM,IAAID,EAAc,yBAAyBC,gBAAyBN,IAAO,EAEjFI,IAAuB,GACvBF,EAAS,KAAKC,EAAK,MAAM,EAAGC,CAAkB,CAAC,EAEnDF,EAAS,KAAKI,CAAU,OAGxBJ,EAAS,KAAKC,CAAI,EAG1B,OAAOD,CACX,ECtBO,IAAMK,GAAU,CAACC,EAAOC,IAASC,GAAgBD,CAAI,EAAE,OAAO,CAACE,EAAKC,IAAU,CACjF,GAAI,OAAOD,GAAQ,SACf,MAAM,IAAIE,EAAc,UAAUD,UAAcH,oBAAuB,KAAK,UAAUD,CAAK,IAAI,EAE9F,OAAI,MAAM,QAAQG,CAAG,EACfA,EAAI,SAASC,CAAK,CAAC,EAEvBD,EAAIC,CAAK,CACpB,EAAGJ,CAAK,ECVD,IAAMM,GAASC,GAAUA,GAAS,KCAlC,IAAMC,GAAOC,GAAU,CAACA,ECAxB,IAAIC,IACV,SAAUA,EAAkB,CACzBA,EAAiB,OAAY,SAC7BA,EAAiB,MAAW,OAChC,GAAGA,KAAqBA,GAAmB,CAAC,EAAE,ECJvC,IAAIC,IACV,SAAUA,EAAiB,CACxBA,EAAgB,KAAU,OAC1BA,EAAgB,EAAO,GAC3B,GAAGA,KAAoBA,GAAkB,CAAC,EAAE,ECJrC,IAAIC,IACV,SAAUA,EAAmB,CAC1BA,EAAkB,KAAU,OAC5BA,EAAkB,MAAW,OACjC,GAAGA,KAAsBA,GAAoB,CAAC,EAAE,ECJzC,IAAIC,IACV,SAAUA,EAAwB,CAC/BA,EAAuB,SAAc,WACrCA,EAAuB,SAAc,WACrCA,EAAuB,QAAa,SACxC,GAAGA,KAA2BA,GAAyB,CAAC,EAAE,ECH1D,IAAMC,GAAgB,CAClB,CAACC,GAAkB,IAAI,EAAG,GAC1B,CAACA,GAAkB,KAAK,EAAG,GAC/B,EACaC,GAAYC,GAAU,CAC/B,IAAMC,GAAa,IAAM,CACrB,GAAI,CACA,GAAID,aAAiB,IACjB,OAAOA,EAEX,GAAI,OAAOA,GAAU,UAAY,aAAcA,EAAO,CAClD,GAAM,CAAE,SAAAE,EAAU,KAAAC,EAAM,SAAAC,EAAW,GAAI,KAAAC,EAAO,GAAI,MAAAC,EAAQ,CAAC,CAAE,EAAIN,EAC3DO,GAAM,IAAI,IAAI,GAAGH,MAAaF,IAAWC,EAAO,IAAIA,IAAS,KAAKE,GAAM,EAC9E,OAAAE,GAAI,OAAS,OAAO,QAAQD,CAAK,EAC5B,IAAI,CAAC,CAACE,GAAGC,EAAC,IAAM,GAAGD,MAAKC,IAAG,EAC3B,KAAK,GAAG,EACNF,GAEX,OAAO,IAAI,IAAIP,CAAK,CACxB,MACA,CACI,OAAO,IACX,CACJ,GAAG,EACH,GAAI,CAACC,EACD,eAAQ,MAAM,mBAAmB,KAAK,UAAUD,CAAK,oBAAoB,EAClE,KAEX,IAAMU,EAAYT,EAAU,KACtB,CAAE,KAAAU,EAAM,SAAAT,EAAU,SAAAU,EAAU,SAAAR,EAAU,OAAAS,CAAO,EAAIZ,EACvD,GAAIY,EACA,OAAO,KAEX,IAAMC,EAASV,EAAS,MAAM,EAAG,EAAE,EACnC,GAAI,CAAC,OAAO,OAAON,EAAiB,EAAE,SAASgB,CAAM,EACjD,OAAO,KAEX,IAAMC,EAAOC,GAAYd,CAAQ,EAC3Be,EAA2BP,EAAU,SAAS,GAAGC,KAAQd,GAAciB,CAAM,GAAG,GACjF,OAAOd,GAAU,UAAYA,EAAM,SAAS,GAAGW,KAAQd,GAAciB,CAAM,GAAG,EAC7EI,EAAY,GAAGP,IAAOM,EAA2B,IAAIpB,GAAciB,CAAM,IAAM,KACrF,MAAO,CACH,OAAAA,EACA,UAAAI,EACA,KAAMN,EACN,eAAgBA,EAAS,SAAS,GAAG,EAAIA,EAAW,GAAGA,KACvD,KAAAG,CACJ,CACJ,EClDO,IAAMI,GAAe,CAACC,EAAQC,IAAWD,IAAWC,ECApD,IAAMC,GAAY,CAACC,EAAOC,EAAOC,EAAMC,IACtCF,GAASC,GAAQF,EAAM,OAASE,EACzB,KAENC,EAGEH,EAAM,UAAUA,EAAM,OAASE,EAAMF,EAAM,OAASC,CAAK,EAFrDD,EAAM,UAAUC,EAAOC,CAAI,ECLnC,IAAME,GAAaC,GAAU,mBAAmBA,CAAK,EAAE,QAAQ,WAAaC,GAAM,IAAIA,EAAE,WAAW,CAAC,EAAE,SAAS,EAAE,EAAE,YAAY,GAAG,ECClI,IAAMC,GAAmB,CAACC,EAAUC,IAAY,CACnD,IAAMC,EAAuB,CAAC,EACxBC,EAAkB,CACpB,GAAGF,EAAQ,eACX,GAAGA,EAAQ,eACf,EACIG,EAAe,EACnB,KAAOA,EAAeJ,EAAS,QAAQ,CACnC,IAAMK,EAAoBL,EAAS,QAAQ,IAAKI,CAAY,EAC5D,GAAIC,IAAsB,GAAI,CAC1BH,EAAqB,KAAKF,EAAS,MAAMI,CAAY,CAAC,EACtD,MAEJF,EAAqB,KAAKF,EAAS,MAAMI,EAAcC,CAAiB,CAAC,EACzE,IAAMC,EAAoBN,EAAS,QAAQ,IAAKK,CAAiB,EACjE,GAAIC,IAAsB,GAAI,CAC1BJ,EAAqB,KAAKF,EAAS,MAAMK,CAAiB,CAAC,EAC3D,MAEAL,EAASK,EAAoB,CAAC,IAAM,KAAOL,EAASM,EAAoB,CAAC,IAAM,MAC/EJ,EAAqB,KAAKF,EAAS,MAAMK,EAAoB,EAAGC,CAAiB,CAAC,EAClFF,EAAeE,EAAoB,GAEvC,IAAMC,EAAgBP,EAAS,UAAUK,EAAoB,EAAGC,CAAiB,EACjF,GAAIC,EAAc,SAAS,GAAG,EAAG,CAC7B,GAAM,CAACC,EAASC,CAAQ,EAAIF,EAAc,MAAM,GAAG,EACnDL,EAAqB,KAAKQ,GAAQP,EAAgBK,CAAO,EAAGC,CAAQ,CAAC,OAGrEP,EAAqB,KAAKC,EAAgBI,CAAa,CAAC,EAE5DH,EAAeE,EAAoB,EAEvC,OAAOJ,EAAqB,KAAK,EAAE,CACvC,ECnCO,IAAMS,GAAoB,CAAC,CAAE,IAAAC,CAAI,EAAGC,KACf,CACpB,GAAGA,EAAQ,eACX,GAAGA,EAAQ,eACf,GACuBD,CAAG,ECDvB,IAAME,GAAqB,CAACC,EAAKC,EAASC,IAAY,CACzD,GAAI,OAAOF,GAAQ,SACf,OAAOG,GAAiBH,EAAKE,CAAO,EAEnC,GAAIF,EAAI,GACT,OAAOI,GAAaJ,EAAKE,CAAO,EAE/B,GAAIF,EAAI,IACT,OAAOK,GAAkBL,EAAKE,CAAO,EAEzC,MAAM,IAAII,EAAc,IAAIL,OAAa,OAAOD,CAAG,2CAA2C,CAClG,ECbO,IAAMO,GAAe,CAAC,CAAE,GAAAC,EAAI,KAAAC,CAAK,EAAGC,IAAY,CACnD,IAAMC,EAAgBF,EAAK,IAAKG,GAAQ,CAAC,UAAW,QAAQ,EAAE,SAAS,OAAOA,CAAG,EAAIA,EAAMC,GAAmBD,EAAK,MAAOF,CAAO,CAAC,EAClI,OAAOF,EAAG,MAAM,GAAG,EAAE,OAAO,CAACM,EAAKC,IAAQD,EAAIC,CAAG,EAAGC,EAAG,EAAE,GAAGL,CAAa,CAC7E,ECFO,IAAMM,GAAoB,CAAC,CAAE,OAAAC,EAAQ,GAAGC,CAAO,EAAGC,IAAY,CAHrE,IAAAC,EAAAC,EAII,GAAIJ,GAAUA,KAAUE,EAAQ,gBAC5B,MAAM,IAAIG,EAAc,IAAIL,4CAAiD,EAEjF,IAAMM,EAAQC,GAAaN,EAAQC,CAAO,EAC1C,OAAAE,GAAAD,EAAAD,EAAQ,SAAR,YAAAC,EAAgB,QAAhB,MAAAC,EAAA,KAAAD,EAAwBK,GAAS,sBAAsBC,GAAcR,CAAM,OAAOQ,GAAcH,CAAK,KAC9F,CACH,OAAQA,IAAU,GAAK,GAAO,CAAC,CAACA,EAChC,GAAIN,GAAU,MAAQ,CAAE,SAAU,CAAE,KAAMA,EAAQ,MAAAM,CAAM,CAAE,CAC9D,CACJ,ECXO,IAAMI,GAAqB,CAACC,EAAa,CAAC,EAAGC,IAAY,CAFhE,IAAAC,EAAAC,EAGI,IAAMC,EAA4B,CAAC,EACnC,QAAWC,KAAaL,EAAY,CAChC,GAAM,CAAE,OAAAM,EAAQ,SAAAC,CAAS,EAAIC,GAAkBH,EAAW,CACtD,GAAGJ,EACH,gBAAiB,CACb,GAAGA,EAAQ,gBACX,GAAGG,CACP,CACJ,CAAC,EACD,GAAI,CAACE,EACD,MAAO,CAAE,OAAAA,CAAO,EAEhBC,IACAH,EAA0BG,EAAS,IAAI,EAAIA,EAAS,OACpDJ,GAAAD,EAAAD,EAAQ,SAAR,YAAAC,EAAgB,QAAhB,MAAAC,EAAA,KAAAD,EAAwBO,GAAS,WAAWF,EAAS,WAAWG,GAAcH,EAAS,KAAK,MAGpG,MAAO,CAAE,OAAQ,GAAM,gBAAiBH,CAA0B,CACtE,ECnBO,IAAMO,GAAqB,CAACC,EAASC,IAAY,OAAO,QAAQD,CAAO,EAAE,OAAO,CAACE,EAAK,CAACC,EAAWC,CAAS,KAAO,CACrH,GAAGF,EACH,CAACC,CAAS,EAAGC,EAAU,IAAKC,GAAmB,CAC3C,IAAMC,EAAgBC,GAAmBF,EAAgB,qBAAsBJ,CAAO,EACtF,GAAI,OAAOK,GAAkB,SACzB,MAAM,IAAIE,EAAc,WAAWL,aAAqBG,oBAAgC,EAE5F,OAAOA,CACX,CAAC,CACL,GAAI,CAAC,CAAC,ECRC,IAAMG,GAAsB,CAACC,EAAUC,IAAY,CACtD,GAAI,MAAM,QAAQD,CAAQ,EACtB,OAAOA,EAAS,IAAKE,GAAkBH,GAAoBG,EAAeD,CAAO,CAAC,EAEtF,OAAQ,OAAOD,EAAU,CACrB,IAAK,SACD,OAAOG,GAAiBH,EAAUC,CAAO,EAC7C,IAAK,SACD,GAAID,IAAa,KACb,MAAM,IAAII,EAAc,iCAAiCJ,GAAU,EAEvE,OAAOK,GAAsBL,EAAUC,CAAO,EAClD,IAAK,UACD,OAAOD,EACX,QACI,MAAM,IAAII,EAAc,sCAAsC,OAAOJ,GAAU,CACvF,CACJ,ECnBO,IAAMM,GAAwB,CAACC,EAAYC,IAAY,OAAO,QAAQD,CAAU,EAAE,OAAO,CAACE,EAAK,CAACC,EAAaC,CAAW,KAAO,CAClI,GAAGF,EACH,CAACC,CAAW,EAAGE,GAAoBD,EAAaH,CAAO,CAC3D,GAAI,CAAC,CAAC,ECFC,IAAMK,GAAiB,CAACC,EAAaC,IAAY,CACpD,IAAMC,EAAaC,GAAmBH,EAAa,eAAgBC,CAAO,EAC1E,GAAI,OAAOC,GAAe,SACtB,GAAI,CACA,OAAO,IAAI,IAAIA,CAAU,CAC7B,OACOE,EAAP,CACI,cAAQ,MAAM,gCAAgCF,IAAcE,CAAK,EAC3DA,CACV,CAEJ,MAAM,IAAIC,EAAc,sCAAsC,OAAOH,GAAY,CACrF,ECTO,IAAMI,GAAuB,CAACC,EAAcC,IAAY,CAL/D,IAAAC,EAAAC,EAMI,GAAM,CAAE,WAAAC,EAAY,SAAAC,CAAS,EAAIL,EAC3B,CAAE,OAAAM,EAAQ,gBAAAC,CAAgB,EAAIC,GAAmBJ,EAAYH,CAAO,EAC1E,GAAI,CAACK,EACD,OAEJ,IAAMG,EAAsB,CACxB,GAAGR,EACH,gBAAiB,CAAE,GAAGA,EAAQ,gBAAiB,GAAGM,CAAgB,CACtE,EACM,CAAE,IAAAG,EAAK,WAAAC,EAAY,QAAAC,CAAQ,EAAIP,EACrC,OAAAF,GAAAD,EAAAD,EAAQ,SAAR,YAAAC,EAAgB,QAAhB,MAAAC,EAAA,KAAAD,EAAwBW,GAAS,qCAAqCC,GAAcT,CAAQ,KACrF,CACH,GAAIO,GAAW,MAAa,CACxB,QAASG,GAAmBH,EAASH,CAAmB,CAC5D,EACA,GAAIE,GAAc,MAAa,CAC3B,WAAYK,GAAsBL,EAAYF,CAAmB,CACrE,EACA,IAAKQ,GAAeP,EAAKD,CAAmB,CAChD,CACJ,ECvBO,IAAMS,GAAoB,CAACC,EAAWC,IAAY,CACrD,GAAM,CAAE,WAAAC,EAAY,MAAAC,CAAM,EAAIH,EACxB,CAAE,OAAAI,EAAQ,gBAAAC,CAAgB,EAAIC,GAAmBJ,EAAYD,CAAO,EAC1E,GAAKG,EAGL,MAAM,IAAIG,EAAcC,GAAmBL,EAAO,QAAS,CACvD,GAAGF,EACH,gBAAiB,CAAE,GAAGA,EAAQ,gBAAiB,GAAGI,CAAgB,CACtE,CAAC,CAAC,CACN,ECXO,IAAMI,GAAmB,CAACC,EAAUC,IAAY,CACnD,GAAM,CAAE,WAAAC,EAAY,MAAAC,CAAM,EAAIH,EACxB,CAAE,OAAAI,EAAQ,gBAAAC,CAAgB,EAAIC,GAAmBJ,EAAYD,CAAO,EAC1E,GAAKG,EAGL,OAAOG,GAAcJ,EAAO,CACxB,GAAGF,EACH,gBAAiB,CAAE,GAAGA,EAAQ,gBAAiB,GAAGI,CAAgB,CACtE,CAAC,CACL,ECRO,IAAMG,GAAgB,CAACC,EAAOC,IAAY,CAC7C,QAAWC,KAAQF,EACf,GAAIE,EAAK,OAAS,WAAY,CAC1B,IAAMC,EAAsBC,GAAqBF,EAAMD,CAAO,EAC9D,GAAIE,EACA,OAAOA,UAGND,EAAK,OAAS,QACnBG,GAAkBH,EAAMD,CAAO,UAE1BC,EAAK,OAAS,OAAQ,CAC3B,IAAMC,EAAsBG,GAAiBJ,EAAMD,CAAO,EAC1D,GAAIE,EACA,OAAOA,MAIX,OAAM,IAAII,EAAc,0BAA0BL,GAAM,EAGhE,MAAM,IAAIK,EAAc,yBAAyB,CACrD,ECvBO,IAAMC,GAAkB,CAACC,EAAeC,IAAY,CAH3D,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAII,GAAM,CAAE,eAAAC,EAAgB,OAAAC,CAAO,EAAIP,EAC7B,CAAE,WAAAQ,EAAY,MAAAC,CAAM,EAAIV,GAC9BG,GAAAD,EAAAD,EAAQ,SAAR,YAAAC,EAAgB,QAAhB,MAAAC,EAAA,KAAAD,EAAwBS,GAAS,2BAA2BC,GAAcL,CAAc,KACxF,IAAMM,EAAoB,OAAO,QAAQJ,CAAU,EAC9C,OAAO,CAAC,CAAC,CAAEK,CAAC,IAAMA,EAAE,SAAW,IAAI,EACnC,IAAI,CAAC,CAACC,EAAGD,CAAC,IAAM,CAACC,EAAGD,EAAE,OAAO,CAAC,EACnC,GAAID,EAAkB,OAAS,EAC3B,OAAW,CAACG,EAAUC,CAAiB,IAAKJ,EACxCN,EAAeS,CAAQ,EAAIT,EAAeS,CAAQ,GAAKC,EAG/D,IAAMC,EAAiB,OAAO,QAAQT,CAAU,EAC3C,OAAO,CAAC,CAAC,CAAEK,CAAC,IAAMA,EAAE,QAAQ,EAC5B,IAAI,CAAC,CAACC,CAAC,IAAMA,CAAC,EACnB,QAAWI,KAAiBD,EACxB,GAAIX,EAAeY,CAAa,GAAK,KACjC,MAAM,IAAIC,EAAc,gCAAgCD,IAAgB,EAGhF,IAAME,EAAWC,GAAcZ,EAAO,CAAE,eAAAH,EAAgB,OAAAC,EAAQ,gBAAiB,CAAC,CAAE,CAAC,EACrF,IAAIJ,EAAAH,EAAQ,iBAAR,MAAAG,EAAwB,SACxB,GAAI,CACA,IAAMmB,EAAgB,IAAI,IAAItB,EAAQ,eAAe,QAAQ,EACvD,CAAE,SAAAuB,EAAU,KAAAC,CAAK,EAAIF,EAC3BF,EAAS,IAAI,SAAWG,EACxBH,EAAS,IAAI,KAAOI,CACxB,MACA,CACA,CAEJ,OAAAnB,GAAAD,EAAAJ,EAAQ,SAAR,YAAAI,EAAgB,QAAhB,MAAAC,EAAA,KAAAD,EAAwBM,GAAS,sBAAsBC,GAAcS,CAAQ,KACtEA,CACX,ECpCO,IAAMK,GAAa,aACbC,GAAmB,mBACnBC,GAAQ,IACRC,GAAkB,yCCAxB,IAAMC,GAAuBC,GAAY,CAACC,EAAMC,IAAY,MAAOC,GAAS,CAHnF,IAAAC,EAAAC,EAII,GAAM,CAAE,QAAAC,CAAQ,EAAIH,EACpB,GAAI,CAACI,EAAY,WAAWD,CAAO,EAC/B,OAAOL,EAAKE,CAAI,EACpB,GAAM,CAAE,QAAAK,CAAQ,EAAIF,EACdG,IAAYL,EAAAF,GAAA,YAAAA,EAAS,YAAT,YAAAE,EAAoB,IAAIM,MAAoB,CAAC,EACzDC,GAAoB,MAAMX,EAAQ,yBAAyB,GAAG,IAAIU,EAAe,EACjFE,IAAkBP,EAAAL,GAAA,YAAAA,EAAS,kBAAT,YAAAK,EAA0B,IAAIK,MAAoB,CAAC,EACrEG,EAASC,GAAmB,EAC5BC,GAAqBF,EAAS,CAACA,CAAM,EAAI,CAAC,GAC3C,OAAO,CAAC,GAAGF,EAAkB,GAAGF,EAAW,GAAGG,CAAe,CAAC,EAC9D,KAAKI,EAAK,EACTC,EAAgB,CAClB,GAAGN,EAAiB,OAAQO,GAAYA,EAAQ,WAAW,UAAU,CAAC,EACtE,GAAGN,CACP,EAAE,KAAKI,EAAK,EACZ,OAAIhB,EAAQ,UAAY,WAChBiB,IACAT,EAAQW,EAAgB,EAAIX,EAAQW,EAAgB,EAC9C,GAAGX,EAAQY,EAAU,KAAKH,IAC1BA,GAEVT,EAAQY,EAAU,EAAIL,GAGtBP,EAAQW,EAAgB,EAAIJ,EAEzBd,EAAK,CACR,GAAGE,EACH,QAAAG,CACJ,CAAC,CACL,EACMI,GAAkB,CAAC,CAACW,EAAMC,CAAO,IAAM,CACzC,IAAMC,EAAuBF,EAAK,QAAQ,GAAG,EACvCR,EAASQ,EAAK,UAAU,EAAGE,CAAoB,EACjDC,EAASH,EAAK,UAAUE,EAAuB,CAAC,EACpD,OAAIV,IAAW,QACXW,EAASA,EAAO,YAAY,GAEzB,CAACX,EAAQW,EAAQF,CAAO,EAC1B,OAAQG,GAASA,GAAQA,EAAK,OAAS,CAAC,EACxC,IAAKA,GAASA,GAAA,YAAAA,EAAM,QAAQC,GAAiB,IAAI,EACjD,KAAK,GAAG,CACjB,EACaC,GAAgC,CACzC,KAAM,yBACN,KAAM,QACN,SAAU,MACV,KAAM,CAAC,iBAAkB,YAAY,EACrC,SAAU,EACd,EACaC,GAAsBC,IAAY,CAC3C,aAAeC,GAAgB,CAC3BA,EAAY,IAAI/B,GAAoB8B,CAAM,EAAGF,EAA6B,CAC9E,CACJ,GC1DO,IAAMI,GAAmCC,IACrC,CACH,GAAGA,EACH,qBAAsBA,EAAQ,sBAAwB,GACtD,gBAAiBA,EAAQ,iBAAmB,GAC5C,mBAAoB,KACxB,GCNJ,IAAAC,GAAA,CACE,KAAQ,sBACR,YAAe,0EACf,QAAW,UACX,QAAW,CACT,MAAS,mEACT,YAAa,2BACb,aAAc,UACd,WAAY,0BACZ,qBAAsB,mEACtB,cAAe,6BACf,wBAAyB,4CACzB,MAAS,0CACT,eAAgB,4BAChB,kBAAmB,+DACrB,EACA,KAAQ,sBACR,MAAS,0BACT,OAAU,qBACV,YAAe,GACf,aAAgB,CACd,6BAA8B,QAC9B,wBAAyB,QACzB,sBAAuB,UACvB,2BAA4B,UAC5B,oCAAqC,UACrC,8BAA+B,UAC/B,qBAAsB,UACtB,8BAA+B,UAC/B,qCAAsC,UACtC,+BAAgC,UAChC,kCAAmC,UACnC,6BAA8B,UAC9B,0CAA2C,UAC3C,4BAA6B,UAC7B,4BAA6B,UAC7B,8BAA+B,UAC/B,4BAA6B,UAC7B,iCAAkC,UAClC,gCAAiC,UACjC,6BAA8B,UAC9B,yBAA0B,UAC1B,yBAA0B,UAC1B,iBAAkB,UAClB,sBAAuB,UACvB,uBAAwB,UACxB,oCAAqC,UACrC,iCAAkC,UAClC,sCAAuC,UACvC,mCAAoC,UACpC,0BAA2B,UAC3B,sBAAuB,UACvB,mCAAoC,UACpC,gCAAiC,UACjC,qBAAsB,UACtB,uBAAwB,UACxB,MAAS,SACT,KAAQ,QACV,EACA,gBAAmB,CACjB,kDAAmD,UACnD,mBAAoB,QACpB,cAAe,YACf,cAAe,SACf,aAAgB,QAChB,gBAAiB,SACjB,OAAU,QACV,QAAW,UACX,WAAc,QAChB,EACA,QAAW,CACT,KAAQ,UACV,EACA,cAAiB,CACf,OAAQ,CACN,eAAgB,CACd,oBACF,CACF,CACF,EACA,MAAS,CACP,WACF,EACA,OAAU,CACR,KAAQ,8BACR,IAAO,oCACT,EACA,QAAW,aACX,QAAW,CACT,0BAA2B,iCAC7B,EACA,eAAgB,CACd,0BAA2B,gCAC7B,EACA,SAAY,oEACZ,WAAc,CACZ,KAAQ,MACR,IAAO,2CACP,UAAa,oBACf,CACF,EClGA,IAAAC,GAA0B,SCDnB,IAAMC,GAAN,cAAkCC,EAAmB,CACxD,YAAYC,EAAS,CACjB,MAAMA,CAAO,EACb,OAAO,eAAe,KAAMF,GAAoB,SAAS,CAC7D,CACJ,ECLO,IAAMG,GAAN,cAAoCC,EAAgB,CACvD,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,wBACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,wBACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMF,GAAsB,SAAS,CAC/D,CACJ,EACaG,GAAN,cAA+CF,EAAgB,CAClE,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,mCACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,mCACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMC,GAAiC,SAAS,CAC1E,CACJ,EACaC,GAAN,cAA4CH,EAAgB,CAC/D,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,gCACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,gCACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAME,GAA8B,SAAS,CACvE,CACJ,EACaC,GAAN,cAAsCJ,EAAgB,CACzD,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,0BACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,0BACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMG,GAAwB,SAAS,CACjE,CACJ,EACaC,GAAN,cAAwCL,EAAgB,CAC3D,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,4BACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,4BACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMI,GAA0B,SAAS,CACnE,CACJ,EACaC,GAAN,cAA4CN,EAAgB,CAC/D,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,gCACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,gCACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMK,GAA8B,SAAS,CACvE,CACJ,EACaC,GAAN,cAA6CP,EAAgB,CAChE,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,iCACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,iCACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMM,GAA+B,SAAS,CACxE,CACJ,EF/EO,IAAMC,GAAuB,MAAOC,EAAOC,IAAY,CAC1D,IAAMC,EAAUC,GACZC,EACJ,OAAAA,EAAOC,GAA0B,CAC7B,GAAGC,GAAqBN,EAAOC,CAAO,EACtC,OAAQ,aACR,QAAS,YACb,CAAC,EACMM,GAAoBN,EAASC,EAAS,IAAK,OAAWE,CAAI,CACrE,EAWO,IAAMI,GAAsC,MAAOC,EAAOC,IAAY,CACzE,IAAMC,EAAUC,GACZC,EACJ,OAAAA,EAAOC,GAA0B,CAC7B,GAAGC,GAAoCN,EAAOC,CAAO,EACrD,OAAQ,4BACR,QAAS,YACb,CAAC,EACMM,GAAoBN,EAASC,EAAS,IAAK,OAAWE,CAAI,CACrE,EAmDO,IAAMI,GAAuB,MAAOC,EAAQC,IAAY,CAC3D,GAAID,EAAO,YAAc,IACrB,OAAOE,GAA0BF,EAAQC,CAAO,EAEpD,IAAME,EAAO,MAAMC,GAAUJ,EAAO,KAAMC,CAAO,EAC7CI,EAAW,CAAC,EAChB,OAAAA,EAAWC,GAAsBH,EAAK,iBAAkBF,CAAO,EAC9C,CACb,UAAWM,GAAoBP,CAAM,EACrC,GAAGK,CACP,CAEJ,EACMH,GAA4B,MAAOF,EAAQC,IAAY,CACzD,IAAMO,EAAe,CACjB,GAAGR,EACH,KAAM,MAAMS,GAAeT,EAAO,KAAMC,CAAO,CACnD,EACMS,EAAYC,GAAmBX,EAAQQ,EAAa,IAAI,EAC9D,OAAQE,EAAW,CACf,IAAK,wBACL,IAAK,0CACD,MAAM,MAAME,GAA4BJ,EAAcP,CAAO,EACjE,IAAK,0BACL,IAAK,qDACD,MAAM,MAAMY,GAAuCL,EAAcP,CAAO,EAC5E,IAAK,uBACL,IAAK,kDACD,MAAM,MAAMa,GAAoCN,EAAcP,CAAO,EACzE,IAAK,0BACL,IAAK,4CACD,MAAM,MAAMc,GAA8BP,EAAcP,CAAO,EACnE,QACI,IAAMe,EAAaR,EAAa,KAChC,OAAOS,GAAkB,CACrB,OAAAjB,EACA,WAAYgB,EAAW,MACvB,UAAAN,CACJ,CAAC,CACT,CACJ,EAgDO,IAAMQ,GAAsC,MAAOC,EAAQC,IAAY,CAC1E,GAAID,EAAO,YAAc,IACrB,OAAOE,GAAyCF,EAAQC,CAAO,EAEnE,IAAME,EAAO,MAAMC,GAAUJ,EAAO,KAAMC,CAAO,EAC7CI,EAAW,CAAC,EAChB,OAAAA,EAAWC,GAAqCH,EAAK,gCAAiCF,CAAO,EAC5E,CACb,UAAWM,GAAoBP,CAAM,EACrC,GAAGK,CACP,CAEJ,EACMH,GAA2C,MAAOF,EAAQC,IAAY,CACxE,IAAMO,EAAe,CACjB,GAAGR,EACH,KAAM,MAAMS,GAAeT,EAAO,KAAMC,CAAO,CACnD,EACMS,EAAYC,GAAmBX,EAAQQ,EAAa,IAAI,EAC9D,OAAQE,EAAW,CACf,IAAK,wBACL,IAAK,0CACD,MAAM,MAAME,GAA4BJ,EAAcP,CAAO,EACjE,IAAK,wBACL,IAAK,mDACD,MAAM,MAAMY,GAAqCL,EAAcP,CAAO,EAC1E,IAAK,mBACL,IAAK,8CACD,MAAM,MAAMa,GAAgCN,EAAcP,CAAO,EACrE,IAAK,uBACL,IAAK,kDACD,MAAM,MAAMc,GAAoCP,EAAcP,CAAO,EACzE,IAAK,0BACL,IAAK,qDACD,MAAM,MAAMe,GAAuCR,EAAcP,CAAO,EAC5E,IAAK,uBACL,IAAK,kDACD,MAAM,MAAMgB,GAAoCT,EAAcP,CAAO,EACzE,IAAK,0BACL,IAAK,4CACD,MAAM,MAAMiB,GAA8BV,EAAcP,CAAO,EACnE,QACI,IAAMkB,EAAaX,EAAa,KAChC,OAAOY,GAAkB,CACrB,OAAApB,EACA,WAAYmB,EAAW,MACvB,UAAAT,CACJ,CAAC,CACT,CACJ,EA2JA,IAAMW,GAA8B,MAAOC,EAAcC,IAAY,CACjE,IAAMC,EAAOF,EAAa,KACpBG,EAAeC,GAAyBF,EAAK,MAAOD,CAAO,EAC3DI,EAAY,IAAIC,GAAsB,CACxC,UAAWC,GAAoBP,CAAY,EAC3C,GAAGG,CACP,CAAC,EACD,OAAOK,EAA2BH,EAAWH,CAAI,CACrD,EACMO,GAAuC,MAAOT,EAAcC,IAAY,CAC1E,IAAMC,EAAOF,EAAa,KACpBG,EAAeO,GAAkCR,EAAK,MAAOD,CAAO,EACpEI,EAAY,IAAIM,GAA+B,CACjD,UAAWJ,GAAoBP,CAAY,EAC3C,GAAGG,CACP,CAAC,EACD,OAAOK,EAA2BH,EAAWH,CAAI,CACrD,EACMU,GAAkC,MAAOZ,EAAcC,IAAY,CACrE,IAAMC,EAAOF,EAAa,KACpBG,EAAeU,GAA6BX,EAAK,MAAOD,CAAO,EAC/DI,EAAY,IAAIS,GAA0B,CAC5C,UAAWP,GAAoBP,CAAY,EAC3C,GAAGG,CACP,CAAC,EACD,OAAOK,EAA2BH,EAAWH,CAAI,CACrD,EAUA,IAAMa,GAAsC,MAAOC,EAAcC,IAAY,CACzE,IAAMC,EAAOF,EAAa,KACpBG,EAAeC,GAAiCF,EAAK,MAAOD,CAAO,EACnEI,EAAY,IAAIC,GAA8B,CAChD,UAAWC,GAAoBP,CAAY,EAC3C,GAAGG,CACP,CAAC,EACD,OAAOK,EAA2BH,EAAWH,CAAI,CACrD,EACMO,GAAyC,MAAOT,EAAcC,IAAY,CAC5E,IAAMC,EAAOF,EAAa,KACpBG,EAAeO,GAAoCR,EAAK,MAAOD,CAAO,EACtEI,EAAY,IAAIM,GAAiC,CACnD,UAAWJ,GAAoBP,CAAY,EAC3C,GAAGG,CACP,CAAC,EACD,OAAOK,EAA2BH,EAAWH,CAAI,CACrD,EACMU,GAAsC,MAAOZ,EAAcC,IAAY,CACzE,IAAMC,EAAOF,EAAa,KACpBG,EAAeU,GAAiCX,EAAK,MAAOD,CAAO,EACnEI,EAAY,IAAIS,GAA8B,CAChD,UAAWP,GAAoBP,CAAY,EAC3C,GAAGG,CACP,CAAC,EACD,OAAOK,EAA2BH,EAAWH,CAAI,CACrD,EACMa,GAAgC,MAAOf,EAAcC,IAAY,CACnE,IAAMC,EAAOF,EAAa,KACpBG,EAAea,GAA2Bd,EAAK,MAAOD,CAAO,EAC7DI,EAAY,IAAIY,GAAwB,CAC1C,UAAWV,GAAoBP,CAAY,EAC3C,GAAGG,CACP,CAAC,EACD,OAAOK,EAA2BH,EAAWH,CAAI,CACrD,EACMgB,GAAuB,CAACC,EAAOlB,IAAY,CAjcjD,IAAAmB,EAAAC,EAAAC,EAkcI,IAAMC,EAAU,CAAC,EAOjB,GANIJ,EAAM,SAAW,OACjBI,EAAQ,QAAaJ,EAAM,SAE3BA,EAAM,iBAAmB,OACzBI,EAAQ,gBAAqBJ,EAAM,iBAEnCA,EAAM,YAAc,KAAM,CAC1B,IAAMK,EAAgBC,GAA4BN,EAAM,WAAYlB,CAAO,IACvEmB,EAAAD,EAAM,aAAN,YAAAC,EAAkB,UAAW,IAC7BG,EAAQ,WAAa,CAAC,GAE1B,OAAO,QAAQC,CAAa,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CACpD,IAAMC,EAAM,cAAcF,IAC1BH,EAAQK,CAAG,EAAID,CACnB,CAAC,EAQL,GANIR,EAAM,QAAU,OAChBI,EAAQ,OAAYJ,EAAM,QAE1BA,EAAM,iBAAmB,OACzBI,EAAQ,gBAAqBJ,EAAM,iBAEnCA,EAAM,MAAQ,KAAM,CACpB,IAAMK,EAAgBK,GAAeV,EAAM,KAAMlB,CAAO,IACpDoB,EAAAF,EAAM,OAAN,YAAAE,EAAY,UAAW,IACvBE,EAAQ,KAAO,CAAC,GAEpB,OAAO,QAAQC,CAAa,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CACpD,IAAMC,EAAM,QAAQF,IACpBH,EAAQK,CAAG,EAAID,CACnB,CAAC,EAEL,GAAIR,EAAM,mBAAqB,KAAM,CACjC,IAAMK,EAAgBM,GAAkBX,EAAM,kBAAmBlB,CAAO,IACpEqB,EAAAH,EAAM,oBAAN,YAAAG,EAAyB,UAAW,IACpCC,EAAQ,kBAAoB,CAAC,GAEjC,OAAO,QAAQC,CAAa,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CACpD,IAAMC,EAAM,qBAAqBF,IACjCH,EAAQK,CAAG,EAAID,CACnB,CAAC,EAEL,OAAIR,EAAM,YAAc,OACpBI,EAAQ,WAAgBJ,EAAM,YAE9BA,EAAM,cAAgB,OACtBI,EAAQ,aAAkBJ,EAAM,cAEhCA,EAAM,WAAa,OACnBI,EAAQ,UAAeJ,EAAM,WAE7BA,EAAM,gBAAkB,OACxBI,EAAQ,eAAoBJ,EAAM,gBAE/BI,CACX,EA8BA,IAAMQ,GAAsC,CAACC,EAAOC,IAAY,CAxhBhE,IAAAC,EAyhBI,IAAMC,EAAU,CAAC,EAajB,GAZIH,EAAM,SAAW,OACjBG,EAAQ,QAAaH,EAAM,SAE3BA,EAAM,iBAAmB,OACzBG,EAAQ,gBAAqBH,EAAM,iBAEnCA,EAAM,kBAAoB,OAC1BG,EAAQ,iBAAsBH,EAAM,kBAEpCA,EAAM,YAAc,OACpBG,EAAQ,WAAgBH,EAAM,YAE9BA,EAAM,YAAc,KAAM,CAC1B,IAAMI,EAAgBC,GAA4BL,EAAM,WAAYC,CAAO,IACvEC,EAAAF,EAAM,aAAN,YAAAE,EAAkB,UAAW,IAC7BC,EAAQ,WAAa,CAAC,GAE1B,OAAO,QAAQC,CAAa,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CACpD,IAAMC,EAAM,cAAcF,IAC1BH,EAAQK,CAAG,EAAID,CACnB,CAAC,EAEL,OAAIP,EAAM,QAAU,OAChBG,EAAQ,OAAYH,EAAM,QAE1BA,EAAM,iBAAmB,OACzBG,EAAQ,gBAAqBH,EAAM,iBAEhCG,CACX,EAiEA,IAAMM,GAA8B,CAACC,EAAOC,IAAY,CACpD,IAAMC,EAAU,CAAC,EACbC,EAAU,EACd,QAAWC,KAASJ,EAAO,CACvB,GAAII,IAAU,KACV,SAEJ,IAAMC,EAAgBC,GAAwBF,EAAOH,CAAO,EAC5D,OAAO,QAAQI,CAAa,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CACpDN,EAAQ,UAAUC,KAAWI,GAAK,EAAIC,CAC1C,CAAC,EACDL,IAEJ,OAAOD,CACX,EACMI,GAA0B,CAACN,EAAOC,IAAY,CAChD,IAAMC,EAAU,CAAC,EACjB,OAAIF,EAAM,KAAO,OACbE,EAAQ,IAASF,EAAM,KAEpBE,CACX,EACMO,GAAS,CAACT,EAAOC,IAAY,CAC/B,IAAMC,EAAU,CAAC,EACjB,OAAIF,EAAM,KAAO,OACbE,EAAQ,IAASF,EAAM,KAEvBA,EAAM,OAAS,OACfE,EAAQ,MAAWF,EAAM,OAEtBE,CACX,EACMQ,GAAoB,CAACV,EAAOC,IAAY,CAC1C,IAAMC,EAAU,CAAC,EACbC,EAAU,EACd,QAAWC,KAASJ,EACZI,IAAU,OAGdF,EAAQ,UAAUC,GAAS,EAAIC,EAC/BD,KAEJ,OAAOD,CACX,EACMS,GAAiB,CAACX,EAAOC,IAAY,CACvC,IAAMC,EAAU,CAAC,EACbC,EAAU,EACd,QAAWC,KAASJ,EAAO,CACvB,GAAII,IAAU,KACV,SAEJ,IAAMC,EAAgBI,GAAOL,EAAOH,CAAO,EAC3C,OAAO,QAAQI,CAAa,EAAE,QAAQ,CAAC,CAACE,EAAKC,CAAK,IAAM,CACpDN,EAAQ,UAAUC,KAAWI,GAAK,EAAIC,CAC1C,CAAC,EACDL,IAEJ,OAAOD,CACX,EACMU,GAAqB,CAACC,EAAQZ,IAAY,CAC5C,IAAMa,EAAW,CAAC,EAClB,OAAID,EAAO,gBAAqB,SAC5BC,EAAS,cAAgBC,EAAeF,EAAO,aAAgB,GAE/DA,EAAO,MAAW,SAClBC,EAAS,IAAMC,EAAeF,EAAO,GAAM,GAExCC,CACX,EACME,GAAwB,CAACH,EAAQZ,IAAY,CAC/C,IAAMa,EAAW,CAAC,EAClB,OAAID,EAAO,cAAmB,SAC1BC,EAAS,YAAcG,GAAeJ,EAAO,YAAgBZ,CAAO,GAEpEY,EAAO,kBAAuB,SAC9BC,EAAS,gBAAkBF,GAAmBC,EAAO,gBAAoBZ,CAAO,GAEhFY,EAAO,mBAAwB,SAC/BC,EAAS,iBAAmBI,GAAmBL,EAAO,gBAAmB,GAEzEA,EAAO,iBAAsB,SAC7BC,EAAS,eAAiBC,EAAeF,EAAO,cAAiB,GAE9DC,CACX,EAgCA,IAAMK,GAAuC,CAACC,EAAQC,IAAY,CAC9D,IAAMC,EAAW,CAAC,EAClB,OAAIF,EAAO,cAAmB,SAC1BE,EAAS,YAAcC,GAAeH,EAAO,YAAgBC,CAAO,GAEpED,EAAO,8BAAmC,SAC1CE,EAAS,4BAA8BE,EAAeJ,EAAO,2BAA8B,GAE3FA,EAAO,kBAAuB,SAC9BE,EAAS,gBAAkBG,GAAmBL,EAAO,gBAAoBC,CAAO,GAEhFD,EAAO,mBAAwB,SAC/BE,EAAS,iBAAmBI,GAAmBN,EAAO,gBAAmB,GAEzEA,EAAO,WAAgB,SACvBE,EAAS,SAAWE,EAAeJ,EAAO,QAAW,GAErDA,EAAO,WAAgB,SACvBE,EAAS,SAAWE,EAAeJ,EAAO,QAAW,GAErDA,EAAO,iBAAsB,SAC7BE,EAAS,eAAiBE,EAAeJ,EAAO,cAAiB,GAE9DE,CACX,EACMC,GAAiB,CAACH,EAAQC,IAAY,CACxC,IAAMC,EAAW,CAAC,EAClB,OAAIF,EAAO,cAAmB,SAC1BE,EAAS,YAAcE,EAAeJ,EAAO,WAAc,GAE3DA,EAAO,kBAAuB,SAC9BE,EAAS,gBAAkBE,EAAeJ,EAAO,eAAkB,GAEnEA,EAAO,eAAoB,SAC3BE,EAAS,aAAeE,EAAeJ,EAAO,YAAe,GAE7DA,EAAO,aAAkB,SACzBE,EAAS,WAAaK,EAAgBC,GAAiCR,EAAO,UAAa,CAAC,GAEzFE,CACX,EAQA,IAAMO,GAA2B,CAACC,EAAQC,IAAY,CAClD,IAAMC,EAAW,CAAC,EAClB,OAAIF,EAAO,UAAe,SACtBE,EAAS,QAAUC,EAAeH,EAAO,OAAU,GAEhDE,CACX,EAmDA,IAAME,GAAoC,CAACC,EAAQC,IAAY,CAC3D,IAAMC,EAAW,CAAC,EAClB,OAAIF,EAAO,UAAe,SACtBE,EAAS,QAAUC,EAAeH,EAAO,OAAU,GAEhDE,CACX,EACME,GAA+B,CAACJ,EAAQC,IAAY,CACtD,IAAMC,EAAW,CAAC,EAClB,OAAIF,EAAO,UAAe,SACtBE,EAAS,QAAUC,EAAeH,EAAO,OAAU,GAEhDE,CACX,EAQA,IAAMG,GAAmC,CAACC,EAAQC,IAAY,CAC1D,IAAMC,EAAW,CAAC,EAClB,OAAIF,EAAO,UAAe,SACtBE,EAAS,QAAUC,EAAeH,EAAO,OAAU,GAEhDE,CACX,EACME,GAAsC,CAACJ,EAAQC,IAAY,CAC7D,IAAMC,EAAW,CAAC,EAClB,OAAIF,EAAO,UAAe,SACtBE,EAAS,QAAUC,EAAeH,EAAO,OAAU,GAEhDE,CACX,EACMG,GAAmC,CAACL,EAAQC,IAAY,CAC1D,IAAMC,EAAW,CAAC,EAClB,OAAIF,EAAO,UAAe,SACtBE,EAAS,QAAUC,EAAeH,EAAO,OAAU,GAEhDE,CACX,EACMI,GAA6B,CAACN,EAAQC,IAAY,CACpD,IAAMC,EAAW,CAAC,EAClB,OAAIF,EAAO,UAAe,SACtBE,EAAS,QAAUC,EAAeH,EAAO,OAAU,GAEhDE,CACX,EACMK,GAAuBP,IAAY,CACrC,eAAgBA,EAAO,WACvB,UAAWA,EAAO,QAAQ,kBAAkB,GAAKA,EAAO,QAAQ,mBAAmB,GAAKA,EAAO,QAAQ,kBAAkB,EACzH,kBAAmBA,EAAO,QAAQ,YAAY,EAC9C,KAAMA,EAAO,QAAQ,aAAa,CACtC,GACMQ,GAAc,CAACC,EAAa,IAAI,WAAcR,IAC5CQ,aAAsB,WACf,QAAQ,QAAQA,CAAU,EAE9BR,EAAQ,gBAAgBQ,CAAU,GAAK,QAAQ,QAAQ,IAAI,UAAY,EAE5EC,GAAoB,CAACD,EAAYR,IAAYO,GAAYC,EAAYR,CAAO,EAAE,KAAMU,GAASV,EAAQ,YAAYU,CAAI,CAAC,EACtHC,GAAoBC,GAAkBC,EAAe,EACrDC,GAAsB,MAAOd,EAASe,EAASC,EAAMC,EAAkBP,IAAS,CAClF,GAAM,CAAE,SAAAQ,EAAU,SAAAC,EAAW,QAAS,KAAAC,EAAM,KAAMC,CAAS,EAAI,MAAMrB,EAAQ,SAAS,EAChFC,EAAW,CACb,SAAAkB,EACA,SAAAD,EACA,KAAAE,EACA,OAAQ,OACR,KAAMC,EAAS,SAAS,GAAG,EAAIA,EAAS,MAAM,EAAG,EAAE,EAAIL,EAAOK,EAAWL,EACzE,QAAAD,CACJ,EACA,OAAIE,IAAqB,SACrBhB,EAAS,SAAWgB,GAEpBP,IAAS,SACTT,EAAS,KAAOS,GAEb,IAAIY,EAAcrB,CAAQ,CACrC,EACMsB,GAAiB,CACnB,eAAgB,mCACpB,EACMC,GAAY,CAAChB,EAAYR,IAAYS,GAAkBD,EAAYR,CAAO,EAAE,KAAMyB,GAAY,CAChG,GAAIA,EAAQ,OAAQ,CAChB,IAAMC,EAAS,IAAI,aAAU,CACzB,oBAAqB,GACrB,aAAc,GACd,iBAAkB,GAClB,kBAAmB,GACnB,cAAe,GACf,WAAY,GACZ,kBAAmB,CAACC,EAAGC,IAASA,EAAI,KAAK,IAAM,IAAMA,EAAI,SAAS;AAAA,CAAI,EAAI,GAAK,MACnF,CAAC,EACDF,EAAO,UAAU,MAAO,IAAI,EAC5BA,EAAO,UAAU,MAAO;AAAA,CAAI,EAC5B,IAAMG,EAAYH,EAAO,MAAMD,CAAO,EAChCK,EAAe,QACfC,EAAM,OAAO,KAAKF,CAAS,EAAE,CAAC,EAC9BG,EAAoBH,EAAUE,CAAG,EACvC,OAAIC,EAAkBF,CAAY,IAC9BE,EAAkBD,CAAG,EAAIC,EAAkBF,CAAY,EACvD,OAAOE,EAAkBF,CAAY,GAElCG,GAAuBD,CAAiB,EAEnD,MAAO,CAAC,CACZ,CAAC,EACKE,GAAiB,MAAOC,EAAWnC,IAAY,CACjD,IAAMoC,EAAQ,MAAMZ,GAAUW,EAAWnC,CAAO,EAChD,OAAIoC,EAAM,QACNA,EAAM,MAAM,QAAUA,EAAM,MAAM,SAAWA,EAAM,MAAM,SAEtDA,CACX,EACMC,GAA6BC,GAAgB,OAAO,QAAQA,CAAW,EACxE,IAAI,CAAC,CAACP,EAAKK,CAAK,IAAMG,GAA6BR,CAAG,EAAI,IAAMQ,GAA6BH,CAAK,CAAC,EACnG,KAAK,GAAG,EACPI,GAAqB,CAACzC,EAAQ0C,IAAS,CA58B7C,IAAAC,EA68BI,KAAIA,EAAAD,EAAK,QAAL,YAAAC,EAAY,QAAS,OACrB,OAAOD,EAAK,MAAM,KAEtB,GAAI1C,EAAO,YAAc,IACrB,MAAO,UAEf,EG98BO,IAAM4C,GAAN,cAAgCC,CAAS,CAC5C,OAAO,kCAAmC,CACtC,MAAO,CACH,kBAAmB,CAAE,KAAM,gBAAiB,KAAM,mBAAoB,EACtE,QAAS,CAAE,KAAM,gBAAiB,KAAM,iBAAkB,EAC1D,SAAU,CAAE,KAAM,gBAAiB,KAAM,UAAW,EACpD,OAAQ,CAAE,KAAM,gBAAiB,KAAM,QAAS,EAChD,aAAc,CAAE,KAAM,gBAAiB,KAAM,sBAAuB,CACxE,CACJ,CACA,YAAYC,EAAO,CACf,MAAM,EACN,KAAK,MAAQA,CACjB,CACA,kBAAkBC,EAAaC,EAAeC,EAAS,CACnD,KAAK,gBAAgB,IAAIC,EAAeF,EAAe,KAAK,UAAW,KAAK,WAAW,CAAC,EACxF,KAAK,gBAAgB,IAAIG,EAAkBH,EAAeJ,GAAkB,iCAAiC,CAAC,CAAC,EAC/G,KAAK,gBAAgB,IAAIQ,GAAiBJ,CAAa,CAAC,EACxD,IAAMK,EAAQN,EAAY,OAAO,KAAK,eAAe,EAC/C,CAAE,OAAAO,CAAO,EAAIN,EAGbO,EAA0B,CAC5B,OAAAD,EACA,WAJe,YAKf,YAJgB,oBAKhB,wBAA0BE,GAAMA,EAChC,yBAA2BA,GAAMA,CACrC,EACM,CAAE,eAAAC,CAAe,EAAIT,EAC3B,OAAOK,EAAM,QAASK,GAAYD,EAAe,OAAOC,EAAQ,QAAST,GAAW,CAAC,CAAC,EAAGM,CAAuB,CACpH,CACA,UAAUT,EAAOa,EAAS,CACtB,OAAOC,GAAqBd,EAAOa,CAAO,CAC9C,CACA,YAAYE,EAAQF,EAAS,CACzB,OAAOG,GAAqBD,EAAQF,CAAO,CAC/C,CACJ,ECvCO,IAAMI,GAAN,cAA+CC,CAAS,CAC3D,OAAO,kCAAmC,CACtC,MAAO,CACH,kBAAmB,CAAE,KAAM,gBAAiB,KAAM,mBAAoB,EACtE,QAAS,CAAE,KAAM,gBAAiB,KAAM,iBAAkB,EAC1D,SAAU,CAAE,KAAM,gBAAiB,KAAM,UAAW,EACpD,OAAQ,CAAE,KAAM,gBAAiB,KAAM,QAAS,EAChD,aAAc,CAAE,KAAM,gBAAiB,KAAM,sBAAuB,CACxE,CACJ,CACA,YAAYC,EAAO,CACf,MAAM,EACN,KAAK,MAAQA,CACjB,CACA,kBAAkBC,EAAaC,EAAeC,EAAS,CACnD,KAAK,gBAAgB,IAAIC,EAAeF,EAAe,KAAK,UAAW,KAAK,WAAW,CAAC,EACxF,KAAK,gBAAgB,IAAIG,EAAkBH,EAAeJ,GAAiC,iCAAiC,CAAC,CAAC,EAC9H,IAAMQ,EAAQL,EAAY,OAAO,KAAK,eAAe,EAC/C,CAAE,OAAAM,CAAO,EAAIL,EAGbM,EAA0B,CAC5B,OAAAD,EACA,WAJe,YAKf,YAJgB,mCAKhB,wBAA0BE,GAAMA,EAChC,yBAA2BA,GAAMA,CACrC,EACM,CAAE,eAAAC,CAAe,EAAIR,EAC3B,OAAOI,EAAM,QAASK,GAAYD,EAAe,OAAOC,EAAQ,QAASR,GAAW,CAAC,CAAC,EAAGK,CAAuB,CACpH,CACA,UAAUR,EAAOY,EAAS,CACtB,OAAOC,GAAoCb,EAAOY,CAAO,CAC7D,CACA,YAAYE,EAAQF,EAAS,CACzB,OAAOG,GAAoCD,EAAQF,CAAO,CAC9D,CACJ,ECxCO,IAAMI,GAAuB,CAACC,EAAO,CAAE,cAAAC,CAAc,IAAMC,GAAqB,CACnF,GAAGF,EACH,cAAAC,CACJ,CAAC,ECJM,IAAME,GAAmCC,IACrC,CACH,GAAGA,EACH,qBAAsBA,EAAQ,sBAAwB,GACtD,gBAAiBA,EAAQ,iBAAmB,GAC5C,kBAAmBA,EAAQ,mBAAqB,GAChD,mBAAoB,KACxB,GCPJ,IAAAC,GAAA,CACE,KAAQ,sBACR,YAAe,0EACf,QAAW,UACX,QAAW,CACT,MAAS,mEACT,YAAa,2BACb,aAAc,UACd,WAAY,0BACZ,qBAAsB,mEACtB,cAAe,6BACf,wBAAyB,4CACzB,MAAS,0CACT,eAAgB,4BAChB,kBAAmB,gEACnB,KAAQ,iBACR,YAAa,MACf,EACA,KAAQ,sBACR,MAAS,0BACT,OAAU,qBACV,YAAe,GACf,aAAgB,CACd,6BAA8B,QAC9B,wBAAyB,QACzB,2BAA4B,UAC5B,oCAAqC,UACrC,8BAA+B,UAC/B,qBAAsB,UACtB,8BAA+B,UAC/B,qCAAsC,UACtC,+BAAgC,UAChC,kCAAmC,UACnC,6BAA8B,UAC9B,0CAA2C,UAC3C,4BAA6B,UAC7B,8BAA+B,UAC/B,4BAA6B,UAC7B,8BAA+B,UAC/B,4BAA6B,UAC7B,iCAAkC,UAClC,gCAAiC,UACjC,6BAA8B,UAC9B,yBAA0B,UAC1B,yBAA0B,UAC1B,iBAAkB,UAClB,sBAAuB,UACvB,uBAAwB,UACxB,oCAAqC,UACrC,iCAAkC,UAClC,sCAAuC,UACvC,mCAAoC,UACpC,0BAA2B,UAC3B,sBAAuB,UACvB,mCAAoC,UACpC,gCAAiC,UACjC,qBAAsB,UACtB,kBAAmB,QACnB,MAAS,QACX,EACA,gBAAmB,CACjB,kDAAmD,UACnD,mBAAoB,QACpB,cAAe,YACf,aAAgB,QAChB,gBAAiB,SACjB,OAAU,QACV,QAAW,UACX,WAAc,QAChB,EACA,QAAW,CACT,KAAQ,UACV,EACA,cAAiB,CACf,OAAQ,CACN,eAAgB,CACd,oBACF,CACF,CACF,EACA,MAAS,CACP,WACF,EACA,OAAU,CACR,KAAQ,8BACR,IAAO,oCACT,EACA,QAAW,aACX,QAAW,CACT,0BAA2B,iCAC7B,EACA,eAAgB,CACd,0BAA2B,gCAC7B,EACA,SAAY,oEACZ,WAAc,CACZ,KAAQ,MACR,IAAO,2CACP,UAAa,oBACf,CACF,EClGA,IAAMC,GAA6B,YAC7BC,GAAyBC,GACvB,OAAOA,GAAW,WACXA,IAAW,OAAYF,GAA6BE,EAExD,SAAY,CACf,GAAI,CACA,OAAO,MAAMA,EAAO,CACxB,MACA,CACI,OAAOF,EACX,CACJ,EAESG,GAAwB,CAACC,EAAYC,IAAkB,CAChE,IAAIC,EACAC,EACJ,MAAO,OAAOC,EAAaC,IAAW,CAElC,GADAF,EAAqBC,EACjB,CAACF,EAAW,CACZ,GAAM,CAAE,OAAAI,EAAQ,OAAAR,EAAQ,eAAAS,CAAe,EAAIP,EAC3CE,EAAY,IAAID,EAAc,CAC1B,OAAAK,EACA,0BAA2B,IAAM,SAAYH,EAC7C,OAAQN,GAAsBC,GAAUE,EAAW,MAAM,EACzD,GAAIO,EAAiB,CAAE,eAAAA,CAAe,EAAI,CAAC,CAC/C,CAAC,EAEL,GAAM,CAAE,YAAAC,CAAY,EAAI,MAAMN,EAAU,KAAK,IAAIO,GAAkBJ,CAAM,CAAC,EAC1E,GAAI,CAACG,GAAe,CAACA,EAAY,aAAe,CAACA,EAAY,gBACzD,MAAM,IAAI,MAAM,uDAAuDH,EAAO,SAAS,EAE3F,MAAO,CACH,YAAaG,EAAY,YACzB,gBAAiBA,EAAY,gBAC7B,aAAcA,EAAY,aAC1B,WAAYA,EAAY,UAC5B,CACJ,CACJ,EACaE,GAAuC,CAACV,EAAYC,IAAkB,CAC/E,IAAIC,EACJ,MAAO,OAAOG,GAAW,CACrB,GAAI,CAACH,EAAW,CACZ,GAAM,CAAE,OAAAI,EAAQ,OAAAR,EAAQ,eAAAS,CAAe,EAAIP,EAC3CE,EAAY,IAAID,EAAc,CAC1B,OAAAK,EACA,OAAQT,GAAsBC,GAAUE,EAAW,MAAM,EACzD,GAAIO,EAAiB,CAAE,eAAAA,CAAe,EAAI,CAAC,CAC/C,CAAC,EAEL,GAAM,CAAE,YAAAC,CAAY,EAAI,MAAMN,EAAU,KAAK,IAAIS,GAAiCN,CAAM,CAAC,EACzF,GAAI,CAACG,GAAe,CAACA,EAAY,aAAe,CAACA,EAAY,gBACzD,MAAM,IAAI,MAAM,sEAAsEH,EAAO,SAAS,EAE1G,MAAO,CACH,YAAaG,EAAY,YACzB,gBAAiBA,EAAY,gBAC7B,aAAcA,EAAY,aAC1B,WAAYA,EAAY,UAC5B,CACJ,CACJ,EACaI,GAAqCC,GAAcC,GAAUD,EAAS,CAC/E,YAAad,GAAsBe,EAAOA,EAAM,aAAa,EAC7D,2BAA4BJ,GAAqCI,EAAOA,EAAM,aAAa,EAC3F,GAAGA,CACP,CAAC,ECpEM,IAAMC,GAAU,oBACVC,GAAa,wBACbC,GAAc,oBACdC,GAAiB,4BACjBC,GAAU,IAAM,SAAY,CACrC,IAAMC,EAAc,QAAQ,IAAIL,EAAO,EACjCM,EAAkB,QAAQ,IAAIL,EAAU,EACxCM,EAAe,QAAQ,IAAIL,EAAW,EACtCM,EAAS,QAAQ,IAAIL,EAAc,EACzC,GAAIE,GAAeC,EACf,MAAO,CACH,YAAAD,EACA,gBAAAC,EACA,GAAIC,GAAgB,CAAE,aAAAA,CAAa,EACnC,GAAIC,GAAU,CAAE,WAAY,IAAI,KAAKA,CAAM,CAAE,CACjD,EAEJ,MAAM,IAAIC,EAAyB,kDAAkD,CACzF,ECnBA,OAAS,WAAAC,OAAe,KACxB,OAAS,OAAAC,OAAW,OACb,IAAMC,GAAa,IAAM,CAC5B,GAAM,CAAE,KAAAC,EAAM,YAAAC,EAAa,SAAAC,EAAU,UAAAC,EAAY,KAAKL,IAAM,EAAI,QAAQ,IACxE,OAAIE,GAEAC,IAEAC,EACO,GAAGC,IAAYD,IACnBL,GAAQ,EACnB,ECXO,IAAMO,GAAc,cACdC,GAAkB,UAClBC,GAAkBC,GAASA,EAAK,SAAW,QAAQ,IAAIH,EAAW,GAAKC,GCFpF,OAAS,cAAAG,OAAkB,SAC3B,OAAS,QAAAC,OAAY,OAEd,IAAMC,GAAuBC,GAAO,CAEvC,IAAMC,EADSC,GAAW,MAAM,EACP,OAAOF,CAAE,EAAE,OAAO,KAAK,EAChD,OAAOG,GAAKC,GAAW,EAAG,OAAQ,MAAO,QAAS,GAAGH,QAAgB,CACzE,ECPA,OAAS,YAAYI,OAAkB,KAEvC,GAAM,CAAE,SAAAC,EAAS,EAAIC,GACRC,GAAsB,MAAOC,GAAO,CAC7C,IAAMC,EAAmBC,GAAoBF,CAAE,EACzCG,EAAe,MAAMN,GAASI,EAAkB,MAAM,EAC5D,OAAO,KAAK,MAAME,CAAY,CAClC,ECPA,OAAS,QAAAC,OAAY,OAEd,IAAMC,GAAkB,kBAClBC,GAAoB,IAAM,QAAQ,IAAID,EAAe,GAAKE,GAAKC,GAAW,EAAG,OAAQ,QAAQ,ECH1G,OAAS,QAAAC,OAAY,OAEd,IAAMC,GAAuB,8BACvBC,GAAyB,IAAM,QAAQ,IAAID,EAAoB,GAAKE,GAAKC,GAAW,EAAG,OAAQ,aAAa,ECHzH,IAAMC,GAAkB,+BACXC,GAAkBC,GAAS,OAAO,QAAQA,CAAI,EACtD,OAAO,CAAC,CAACC,CAAG,IAAMH,GAAgB,KAAKG,CAAG,CAAC,EAC3C,OAAO,CAACC,EAAK,CAACD,EAAKE,CAAK,KAAO,CAAE,GAAGD,EAAK,CAACJ,GAAgB,KAAKG,CAAG,EAAE,CAAC,CAAC,EAAGE,CAAM,GAAI,CACpF,GAAIH,EAAK,SAAW,CAAE,QAASA,EAAK,OAAQ,CAChD,CAAC,ECLD,IAAMI,GAAuB,CAAC,YAAa,mBAAmB,EACjDC,GAAYC,GAAY,CACjC,IAAMC,EAAM,CAAC,EACTC,EACJ,QAASC,KAAQH,EAAQ,MAAM,OAAO,EAGlC,GAFAG,EAAOA,EAAK,MAAM,YAAY,EAAE,CAAC,EAAE,KAAK,EACtBA,EAAK,CAAC,IAAM,KAAOA,EAAKA,EAAK,OAAS,CAAC,IAAM,KAG3D,GADAD,EAAiBC,EAAK,UAAU,EAAGA,EAAK,OAAS,CAAC,EAC9CL,GAAqB,SAASI,CAAc,EAC5C,MAAM,IAAI,MAAM,+BAA+BA,IAAiB,UAG/DA,EAAgB,CACrB,IAAME,EAAoBD,EAAK,QAAQ,GAAG,EACpCE,EAAQ,EACRC,EAAMH,EAAK,OAAS,EAE1B,GADqBC,IAAsB,IAAMA,IAAsBC,GAASD,IAAsBE,EACpF,CACd,GAAM,CAACC,EAAMC,CAAK,EAAI,CAClBL,EAAK,UAAU,EAAGC,CAAiB,EAAE,KAAK,EAC1CD,EAAK,UAAUC,EAAoB,CAAC,EAAE,KAAK,CAC/C,EACAH,EAAIC,CAAc,EAAID,EAAIC,CAAc,GAAK,CAAC,EAC9CD,EAAIC,CAAc,EAAEK,CAAI,EAAIC,GAIxC,OAAOP,CACX,EC7BA,OAAS,YAAYQ,OAAkB,KACvC,GAAM,CAAE,SAAAC,EAAS,EAAID,GACfE,GAAmB,CAAC,EACbC,GAAY,CAACC,EAAMC,MACxB,CAACH,GAAiBE,CAAI,GAAKC,GAAA,MAAAA,EAAS,eACpCH,GAAiBE,CAAI,EAAIH,GAASG,EAAM,MAAM,GAE3CF,GAAiBE,CAAI,GCFhC,IAAME,GAAe,KAAO,CAAC,GAChBC,GAAwB,MAAOC,EAAO,CAAC,IAAM,CACtD,GAAM,CAAE,SAAAC,EAAWC,GAAuB,EAAG,eAAAC,EAAiBC,GAAkB,CAAE,EAAIJ,EAChFK,EAAc,MAAM,QAAQ,IAAI,CAClCC,GAAUH,EAAgB,CACtB,YAAaH,EAAK,WACtB,CAAC,EACI,KAAKO,EAAQ,EACb,KAAKC,EAAc,EACnB,MAAMV,EAAY,EACvBQ,GAAUL,EAAU,CAChB,YAAaD,EAAK,WACtB,CAAC,EACI,KAAKO,EAAQ,EACb,MAAMT,EAAY,CAC3B,CAAC,EACD,MAAO,CACH,WAAYO,EAAY,CAAC,EACzB,gBAAiBA,EAAY,CAAC,CAClC,CACJ,ECzBA,IAAMI,GAAqB,mCACdC,GAAqBC,GAAS,OAAO,QAAQA,CAAI,EACzD,OAAO,CAAC,CAACC,CAAG,IAAMH,GAAmB,KAAKG,CAAG,CAAC,EAC9C,OAAO,CAACC,EAAK,CAACD,EAAKE,CAAK,KAAO,CAAE,GAAGD,EAAK,CAACJ,GAAmB,KAAKG,CAAG,EAAE,CAAC,CAAC,EAAGE,CAAM,GAAI,CAAC,CAAC,ECC7F,IAAMC,GAAe,KAAO,CAAC,GAChBC,GAAqB,MAAOC,EAAO,CAAC,IAAMC,GAAUD,EAAK,gBAAkBE,GAAkB,CAAC,EACtG,KAAKC,EAAQ,EACb,KAAKC,EAAiB,EACtB,MAAMN,EAAY,ECRhB,IAAMO,GAAmB,IAAIC,IAAU,CAC1C,IAAMC,EAAS,CAAC,EAChB,QAAWC,KAAQF,EACf,OAAW,CAACG,EAAKC,CAAM,IAAK,OAAO,QAAQF,CAAI,EACvCD,EAAOE,CAAG,IAAM,OAChB,OAAO,OAAOF,EAAOE,CAAG,EAAGC,CAAM,EAGjCH,EAAOE,CAAG,EAAIC,EAI1B,OAAOH,CACX,ECXO,IAAMI,GAAkB,MAAOC,GAAS,CAC3C,IAAMC,EAAc,MAAMC,GAAsBF,CAAI,EACpD,OAAOG,GAAiBF,EAAY,WAAYA,EAAY,eAAe,CAC/E,ECJA,OAAS,SAAAG,OAAa,MCAtB,OAAS,UAAAC,OAAc,SACvB,OAAS,WAAAC,OAAe,OACjB,SAASC,GAAYC,EAAS,CACjC,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CAJ5C,IAAAC,EAKQ,IAAMC,EAAMN,GAAQ,CAChB,OAAQ,MACR,GAAGE,EACH,UAAUG,EAAAH,EAAQ,WAAR,YAAAG,EAAkB,QAAQ,aAAc,KACtD,CAAC,EACDC,EAAI,GAAG,QAAUC,GAAQ,CACrBH,EAAO,OAAO,OAAO,IAAII,GAAc,gDAAgD,EAAGD,CAAG,CAAC,EAC9FD,EAAI,QAAQ,CAChB,CAAC,EACDA,EAAI,GAAG,UAAW,IAAM,CACpBF,EAAO,IAAII,GAAc,6CAA6C,CAAC,EACvEF,EAAI,QAAQ,CAChB,CAAC,EACDA,EAAI,GAAG,WAAaG,GAAQ,CACxB,GAAM,CAAE,WAAAC,EAAa,GAAI,EAAID,GACzBC,EAAa,KAAO,KAAOA,KAC3BN,EAAO,OAAO,OAAO,IAAII,GAAc,wDAAwD,EAAG,CAAE,WAAAE,CAAW,CAAC,CAAC,EACjHJ,EAAI,QAAQ,GAEhB,IAAMK,EAAS,CAAC,EAChBF,EAAI,GAAG,OAASG,GAAU,CACtBD,EAAO,KAAKC,CAAK,CACrB,CAAC,EACDH,EAAI,GAAG,MAAO,IAAM,CAChBN,EAAQJ,GAAO,OAAOY,CAAM,CAAC,EAC7BL,EAAI,QAAQ,CAChB,CAAC,CACL,CAAC,EACDA,EAAI,IAAI,CACZ,CAAC,CACL,CCnCO,IAAMO,GAAqBC,GAAQ,EAAQA,GAC9C,OAAOA,GAAQ,UACf,OAAOA,EAAI,aAAgB,UAC3B,OAAOA,EAAI,iBAAoB,UAC/B,OAAOA,EAAI,OAAU,UACrB,OAAOA,EAAI,YAAe,SACjBC,GAAuBC,IAAW,CAC3C,YAAaA,EAAM,YACnB,gBAAiBA,EAAM,gBACvB,aAAcA,EAAM,MACpB,WAAY,IAAI,KAAKA,EAAM,UAAU,CACzC,GCTO,IAAMC,GAAyB,CAAC,CAAE,WAAAC,EAAa,EAAqB,QAAAC,EAAU,GAAiB,KAAO,CAAE,WAAAD,EAAY,QAAAC,CAAQ,GCF5H,IAAMC,GAAQ,CAACC,EAASC,IAAe,CAC1C,IAAIC,EAAUF,EAAQ,EACtB,QAASG,EAAI,EAAGA,EAAIF,EAAYE,IAC5BD,EAAUA,EAAQ,MAAMF,CAAO,EAEnC,OAAOE,CACX,EJAO,IAAME,GAAoB,qCACpBC,GAAwB,yCACxBC,GAAsB,oCACtBC,GAAwB,CAACC,EAAO,CAAC,IAAM,CAChD,GAAM,CAAE,QAAAC,EAAS,WAAAC,CAAW,EAAIC,GAAuBH,CAAI,EAC3D,MAAO,IAAMI,GAAM,SAAY,CAC3B,IAAMC,EAAiB,MAAMC,GAAW,EAClCC,EAAgB,KAAK,MAAM,MAAMC,GAAmBP,EAASI,CAAc,CAAC,EAClF,GAAI,CAACI,GAAkBF,CAAa,EAChC,MAAM,IAAIG,EAAyB,2DAA2D,EAElG,OAAOC,GAAoBJ,CAAa,CAC5C,EAAGL,CAAU,CACjB,EACMM,GAAqB,MAAOP,EAASW,KACnC,QAAQ,IAAId,EAAmB,IAC/Bc,EAAQ,QAAU,CACd,GAAGA,EAAQ,QACX,cAAe,QAAQ,IAAId,EAAmB,CAClD,IAEW,MAAMe,GAAY,CAC7B,GAAGD,EACH,QAAAX,CACJ,CAAC,GACa,SAAS,GAErBa,GAAU,gBACVC,GAAmB,CACrB,UAAW,GACX,YAAa,EACjB,EACMC,GAAuB,CACzB,QAAS,GACT,SAAU,EACd,EACMV,GAAa,SAAY,CAC3B,GAAI,QAAQ,IAAIT,EAAqB,EACjC,MAAO,CACH,SAAUiB,GACV,KAAM,QAAQ,IAAIjB,EAAqB,CAC3C,EAEJ,GAAI,QAAQ,IAAID,EAAiB,EAAG,CAChC,IAAMqB,EAASC,GAAM,QAAQ,IAAItB,EAAiB,CAAC,EACnD,GAAI,CAACqB,EAAO,UAAY,EAAEA,EAAO,YAAYF,IACzC,MAAM,IAAIL,EAAyB,GAAGO,EAAO,8DAA+D,EAAK,EAErH,GAAI,CAACA,EAAO,UAAY,EAAEA,EAAO,YAAYD,IACzC,MAAM,IAAIN,EAAyB,GAAGO,EAAO,8DAA+D,EAAK,EAErH,MAAO,CACH,GAAGA,EACH,KAAMA,EAAO,KAAO,SAASA,EAAO,KAAM,EAAE,EAAI,MACpD,EAEJ,MAAM,IAAIP,EAAyB,wEACvBb,SAA4BD,iCAChB,EAAK,CACjC,EKhEO,IAAMuB,GAAWC,GAAmB,SAAY,CACnD,GAAI,CACA,IAAMC,EAASD,EAAe,QAAQ,GAAG,EACzC,GAAIC,IAAW,OACX,MAAM,IAAI,MAEd,OAAOA,CACX,OACOC,EAAP,CACI,MAAM,IAAIC,EAAyBD,EAAE,SAAW,8DAA8DF,GAAgB,CAClI,CACJ,ECVO,IAAMI,GAAwB,CAACC,EAAgB,CAAE,cAAAC,EAAgB,SAAU,GAAGC,CAAK,EAAI,CAAC,IAAM,SAAY,CAC7G,IAAMC,EAAUC,GAAeF,CAAI,EAC7B,CAAE,WAAAG,EAAY,gBAAAC,CAAgB,EAAI,MAAMC,GAAsBL,CAAI,EAClEM,EAAyBF,EAAgBH,CAAO,GAAK,CAAC,EACtDM,EAAoBJ,EAAWF,CAAO,GAAK,CAAC,EAC5CO,EAAgBT,IAAkB,SAClC,CAAE,GAAGO,EAAwB,GAAGC,CAAkB,EAClD,CAAE,GAAGA,EAAmB,GAAGD,CAAuB,EACxD,GAAI,CACA,IAAMG,EAAcX,EAAeU,CAAa,EAChD,GAAIC,IAAgB,OAChB,MAAM,IAAI,MAEd,OAAOA,CACX,OACOC,EAAP,CACI,MAAM,IAAIC,EAAyBD,EAAE,SACjC,kCAAkCT,6CAAmDH,GAAgB,CAC7G,CACJ,ECpBA,IAAMc,GAAcC,GAAS,OAAOA,GAAS,WAChCC,GAAcC,GAAiBH,GAAWG,CAAY,EAAI,SAAY,MAAMA,EAAa,EAAID,GAAkBC,CAAY,ECEjI,IAAMC,EAAa,CAAC,CAAE,4BAAAC,EAA6B,mBAAAC,EAAoB,QAASC,CAAa,EAAGC,EAAgB,CAAC,IAAMC,GAAQC,GAAMC,GAAQN,CAA2B,EAAGO,GAAsBN,EAAoBE,CAAa,EAAGK,GAAWN,CAAY,CAAC,CAAC,ECJ9P,IAAIO,IACV,SAAUA,EAAU,CACjBA,EAAS,KAAU,yBACnBA,EAAS,KAAU,wBACvB,GAAGA,KAAaA,GAAW,CAAC,EAAE,ECJvB,IAAMC,GAAoB,oCACpBC,GAAuB,gCACvBC,GAA0B,CACnC,4BAA8BC,GAAQA,EAAIH,EAAiB,EAC3D,mBAAqBI,GAAYA,EAAQH,EAAoB,EAC7D,QAAS,MACb,ECNO,IAAII,IACV,SAAUA,EAAc,CACrBA,EAAa,KAAU,OACvBA,EAAa,KAAU,MAC3B,GAAGA,KAAiBA,GAAe,CAAC,EAAE,ECH/B,IAAMC,GAAyB,yCACzBC,GAA4B,qCAC5BC,GAA+B,CACxC,4BAA8BC,GAAQA,EAAIH,EAAsB,EAChE,mBAAqBI,GAAYA,EAAQH,EAAyB,EAClE,QAASI,GAAa,IAC1B,ECDO,IAAMC,GAA8B,SAAYC,EAAU,MAAMC,GAAsB,GAAO,MAAMC,GAA0B,CAAE,EAChID,GAAwB,SAAYE,EAAWC,EAAuB,EAAE,EACxEF,GAA4B,SAAY,CAC1C,IAAMG,EAAe,MAAMF,EAAWG,EAA4B,EAAE,EACpE,OAAQD,EAAc,CAClB,KAAKE,GAAa,KACd,OAAOC,GAAyB,KACpC,KAAKD,GAAa,KACd,OAAOC,GAAyB,KACpC,QACI,MAAM,IAAI,MAAM,8BAA8BH,kBAAkC,OAAO,OAAOE,EAAY,GAAG,CACrH,CACJ,EChBA,IAAME,GAA2B,kFACpBC,GAAyC,CAACC,EAAaC,IAAW,CAC3E,IAAMC,EAAkB,IACpB,KAAK,MAAM,KAAK,OAAO,EAAI,GAAuD,EAChFC,EAAgB,IAAI,KAAK,KAAK,IAAI,EAAID,EAAkB,GAAI,EAClED,EAAO,KAAK,sNAERH,EAAwB,EAC5B,IAAMM,EAAqBJ,EAAY,oBAAsBA,EAAY,WACzE,MAAO,CACH,GAAGA,EACH,GAAII,EAAqB,CAAE,mBAAAA,CAAmB,EAAI,CAAC,EACnD,WAAYD,CAChB,CACJ,ECfO,IAAME,GAA0B,CAACC,EAAUC,EAAU,CAAC,IAAM,CAC/D,IAAMC,GAASD,GAAA,YAAAA,EAAS,SAAU,QAC9BE,EACJ,MAAO,UAAY,CACf,IAAIC,EACJ,GAAI,CACAA,EAAc,MAAMJ,EAAS,EACzBI,EAAY,YAAcA,EAAY,WAAW,QAAQ,EAAI,KAAK,IAAI,IACtEA,EAAcC,GAAuCD,EAAaF,CAAM,EAEhF,OACOI,EAAP,CACI,GAAIH,EACAD,EAAO,KAAK,4BAA6BI,CAAC,EAC1CF,EAAcC,GAAuCF,EAAiBD,CAAM,MAG5E,OAAMI,CAEd,CACA,OAAAH,EAAkBC,EACXA,CACX,CACJ,ECjBA,IAAMG,GAAY,8CACZC,GAAkB,oBACXC,GAAuB,CAACC,EAAO,CAAC,IAAMC,GAAwBC,GAAwBF,CAAI,EAAG,CAAE,OAAQA,EAAK,MAAO,CAAC,EAC3HE,GAA2BF,GAAS,CACtC,IAAIG,EAAoB,GAClB,CAAE,QAAAC,EAAS,WAAAC,CAAW,EAAIC,GAAuBN,CAAI,EACrDO,EAAiB,MAAOF,EAAYG,IAAY,CAClD,IAAMC,GAAW,MAAMC,GAAM,SAAY,CACrC,IAAID,EACJ,GAAI,CACAA,EAAU,MAAME,GAAWH,CAAO,CACtC,OACOI,EAAP,CACI,MAAIA,EAAI,aAAe,MACnBT,EAAoB,IAElBS,CACV,CACA,OAAOH,CACX,EAAGJ,CAAU,GAAG,KAAK,EACrB,OAAOK,GAAM,SAAY,CACrB,IAAIG,EACJ,GAAI,CACAA,EAAQ,MAAMC,GAA0BL,EAASD,CAAO,CAC5D,OACOI,EAAP,CACI,MAAIA,EAAI,aAAe,MACnBT,EAAoB,IAElBS,CACV,CACA,OAAOC,CACX,EAAGR,CAAU,CACjB,EACA,MAAO,UAAY,CACf,IAAMU,EAAW,MAAMC,GAA4B,EACnD,GAAIb,EACA,OAAOI,EAAeF,EAAY,CAAE,GAAGU,EAAU,QAAAX,CAAQ,CAAC,EAEzD,CACD,IAAIa,EACJ,GAAI,CACAA,GAAS,MAAMC,GAAiB,CAAE,GAAGH,EAAU,QAAAX,CAAQ,CAAC,GAAG,SAAS,CACxE,OACOe,EAAP,CACI,IAAIA,GAAA,YAAAA,EAAO,cAAe,IACtB,MAAM,OAAO,OAAOA,EAAO,CACvB,QAAS,2CACb,CAAC,EAEA,OAAIA,EAAM,UAAY,gBAAkB,CAAC,IAAK,IAAK,GAAG,EAAE,SAASA,EAAM,UAAU,KAClFhB,EAAoB,IAEjBI,EAAeF,EAAY,CAAE,GAAGU,EAAU,QAAAX,CAAQ,CAAC,CAC9D,CACA,OAAOG,EAAeF,EAAY,CAC9B,GAAGU,EACH,QAAS,CACL,2BAA4BE,CAChC,EACA,QAAAb,CACJ,CAAC,EAET,CACJ,EACMc,GAAmB,MAAOV,GAAYY,GAAY,CACpD,GAAGZ,EACH,KAAMV,GACN,OAAQ,MACR,QAAS,CACL,uCAAwC,OAC5C,CACJ,CAAC,EACKa,GAAa,MAAOH,IAAa,MAAMY,GAAY,CAAE,GAAGZ,EAAS,KAAMX,EAAU,CAAC,GAAG,SAAS,EAC9FiB,GAA4B,MAAOL,EAASD,IAAY,CAC1D,IAAMa,EAAgB,KAAK,OAAO,MAAMD,GAAY,CAChD,GAAGZ,EACH,KAAMX,GAAYY,CACtB,CAAC,GAAG,SAAS,CAAC,EACd,GAAI,CAACa,GAAkBD,CAAa,EAChC,MAAM,IAAIE,EAAyB,2DAA2D,EAElG,OAAOC,GAAoBH,CAAa,CAC5C,ECvFO,IAAMI,GAA0B,CAACC,EAAkBC,IAAgB,CACtE,IAAMC,EAAqB,CACvB,aAAcC,GACd,oBAAqBC,GACrB,YAAaC,EACjB,EACA,GAAIL,KAAoBE,EACpB,OAAOA,EAAmBF,CAAgB,EAAE,EAG5C,MAAM,IAAIM,EAAyB,4CAA4CL,UAAoBD,iEACjC,CAE1E,ECZO,IAAMO,GAAuBC,GAAQ,EAAQA,GAChD,OAAOA,GAAQ,UACf,OAAOA,EAAI,UAAa,UACxB,CAAC,YAAa,QAAQ,EAAE,QAAQ,OAAOA,EAAI,iBAAiB,EAAI,IAChE,CAAC,YAAa,QAAQ,EAAE,QAAQ,OAAOA,EAAI,WAAW,EAAI,IAC1D,CAAC,YAAa,QAAQ,EAAE,QAAQ,OAAOA,EAAI,UAAU,EAAI,KACxDC,GAA8BD,CAAG,GAAKE,GAAgCF,CAAG,GACxEC,GAAiCD,GAAQ,OAAOA,EAAI,gBAAmB,UAAY,OAAOA,EAAI,kBAAsB,IACpHE,GAAmCF,GAAQ,OAAOA,EAAI,mBAAsB,UAAY,OAAOA,EAAI,eAAmB,IAC/GG,GAA+B,MAAOC,EAAaC,EAAUC,EAASC,EAAkB,CAAC,IAAM,CACxG,IAAMC,EAAOH,EAASD,CAAW,EACjC,GAAI,CAACE,EAAQ,YACT,MAAM,IAAIG,EAAyB,WAAWL,iFAA4F,EAAK,EAEnJ,GAAM,CAAE,eAAAM,CAAe,EAAIF,EAC3B,GAAIE,GAAkBA,KAAkBH,EACpC,MAAM,IAAIE,EAAyB,kEAC3BE,GAAeL,CAAO,wBAC1B,OAAO,KAAKC,CAAe,EAAE,KAAK,IAAI,EAAG,EAAK,EAEtD,IAAMK,EAAsBF,EACtBG,GAAmBH,EAAgBL,EAAUC,EAAS,CACpD,GAAGC,EACH,CAACG,CAAc,EAAG,EACtB,CAAC,EACCI,GAAwBN,EAAK,kBAAmBJ,CAAW,EAAE,EAC7DW,EAAS,CACX,QAASP,EAAK,SACd,gBAAiBA,EAAK,mBAAqB,cAAc,KAAK,IAAI,IAClE,WAAYA,EAAK,WACrB,EACM,CAAE,WAAAQ,CAAW,EAAIR,EACvB,GAAIQ,EAAY,CACZ,GAAI,CAACV,EAAQ,gBACT,MAAM,IAAIG,EAAyB,WAAWL,iFAA4F,EAAK,EAEnJW,EAAO,aAAeC,EACtBD,EAAO,UAAY,MAAMT,EAAQ,gBAAgBU,CAAU,EAE/D,IAAMC,EAAc,MAAML,EAC1B,OAAON,EAAQ,YAAYW,EAAaF,CAAM,CAClD,EC5CA,OAAS,QAAAG,OAAY,gBACrB,OAAS,aAAAC,OAAiB,OCFnB,IAAMC,GAAiC,CAACC,EAAaC,IAAS,CACjE,GAAIA,EAAK,UAAY,EACjB,MAAM,MAAM,WAAWD,gDAA0D,EAErF,GAAIC,EAAK,cAAgB,QAAaA,EAAK,kBAAoB,OAC3D,MAAM,MAAM,WAAWD,oDAA8D,EAEzF,GAAIC,EAAK,WAAY,CACjB,IAAMC,EAAc,IAAI,KAExB,GADmB,IAAI,KAAKD,EAAK,UAAU,EAC1BC,EACb,MAAM,MAAM,WAAWF,oDAA8D,EAG7F,MAAO,CACH,YAAaC,EAAK,YAClB,gBAAiBA,EAAK,gBACtB,GAAIA,EAAK,cAAgB,CAAE,aAAcA,EAAK,YAAa,EAC3D,GAAIA,EAAK,YAAc,CAAE,WAAY,IAAI,KAAKA,EAAK,UAAU,CAAE,CACnE,CACJ,EDhBO,IAAME,GAA4B,MAAOC,EAAaC,IAAa,CACtE,IAAMC,EAAUD,EAASD,CAAW,EACpC,GAAIC,EAASD,CAAW,EAAG,CACvB,IAAMG,EAAoBD,EAAQ,mBAClC,GAAIC,IAAsB,OAAW,CACjC,IAAMC,EAAcC,GAAUC,EAAI,EAClC,GAAI,CACA,GAAM,CAAE,OAAAC,CAAO,EAAI,MAAMH,EAAYD,CAAiB,EAClDK,EACJ,GAAI,CACAA,EAAO,KAAK,MAAMD,EAAO,KAAK,CAAC,CACnC,MACA,CACI,MAAM,MAAM,WAAWP,6CAAuD,CAClF,CACA,OAAOS,GAA+BT,EAAaQ,CAAI,CAC3D,OACOE,EAAP,CACI,MAAM,IAAIC,EAAyBD,EAAM,OAAO,CACpD,MAGA,OAAM,IAAIC,EAAyB,WAAWX,uCAAiD,MAInG,OAAM,IAAIW,EAAyB,WAAWX,kDAA4D,CAElH,EE9BO,IAAMY,GAAc,CAACC,EAAO,CAAC,IAAM,SAAY,CAClD,IAAMC,EAAW,MAAMC,GAAgBF,CAAI,EAC3C,OAAOG,GAA0BC,GAAeJ,CAAI,EAAGC,CAAQ,CACnE,ECJO,IAAMI,GAAoBC,GAAQ,EAAQA,GAAQ,OAAOA,GAAQ,UAAY,OAAOA,EAAI,oBAAuB,SACzGC,GAA4B,MAAOC,EAASC,IAAYC,GAAY,CAC7E,GAAGF,EACH,QAAAC,CACJ,CAAC,EAAE,ECLI,IAAME,GAAgBC,GAAQA,IAChC,OAAOA,EAAI,eAAkB,UAC1B,OAAOA,EAAI,gBAAmB,UAC9B,OAAOA,EAAI,aAAgB,UAC3B,OAAOA,EAAI,YAAe,UAC1B,OAAOA,EAAI,eAAkB,UCJ9B,IAAMC,GAAN,cAAkCC,EAAmB,CACxD,YAAYC,EAAS,CACjB,MAAMA,CAAO,EACb,OAAO,eAAe,KAAMF,GAAoB,SAAS,CAC7D,CACJ,ECJO,IAAMG,GAAN,cAAsCC,EAAgB,CACzD,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,0BACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,0BACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMF,GAAwB,SAAS,CACjE,CACJ,EACaG,GAAN,cAAwCF,EAAgB,CAC3D,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,4BACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,4BACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMC,GAA0B,SAAS,CACnE,CACJ,EACaC,GAAN,cAAuCH,EAAgB,CAC1D,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,2BACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,2BACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAME,GAAyB,SAAS,CAClE,CACJ,EACaC,GAAN,cAAoCJ,EAAgB,CACvD,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,wBACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,wBACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMG,GAAsB,SAAS,CAC/D,CACJ,EACaC,GAA+CC,IAAS,CACjE,GAAGA,EACH,GAAIA,EAAI,aAAe,CAAE,YAAaC,EAAiB,CAC3D,GACaC,GAAqCF,IAAS,CACvD,GAAGA,EACH,GAAIA,EAAI,iBAAmB,CAAE,gBAAiBC,EAAiB,EAC/D,GAAID,EAAI,cAAgB,CAAE,aAAcC,EAAiB,CAC7D,GACaE,GAAgDH,IAAS,CAClE,GAAGA,EACH,GAAIA,EAAI,iBAAmB,CAAE,gBAAiBE,GAAkCF,EAAI,eAAe,CAAE,CACzG,GC1DO,IAAMI,GAA+B,MAAOC,EAAOC,IAAY,CAClE,GAAM,CAAE,SAAAC,EAAU,SAAAC,EAAW,QAAS,KAAAC,EAAM,KAAMC,CAAS,EAAI,MAAMJ,EAAQ,SAAS,EAChFK,EAAUC,EAAI,CAAC,EAAGC,GAA2B,CAC/C,yBAA0BR,EAAM,WACpC,CAAC,EACKS,EAAe,GAAGJ,GAAA,MAAAA,EAAU,SAAS,KAAOA,EAAS,MAAM,EAAG,EAAE,EAAIA,GAAY,4BAChFK,EAAQH,EAAI,CACd,UAAW,CAAC,CAAEI,EAAgBX,EAAM,SAAU,UAAU,CAAC,EACzD,WAAY,CAAC,CAAEW,EAAgBX,EAAM,UAAW,WAAW,CAAC,CAChE,CAAC,EACGY,EACJ,OAAO,IAAIC,EAAc,CACrB,SAAAV,EACA,SAAAD,EACA,KAAAE,EACA,OAAQ,MACR,QAAAE,EACA,KAAMG,EACN,MAAAC,EACA,KAAAE,CACJ,CAAC,CACL,EA+DO,IAAME,GAA+B,MAAOC,EAAQC,IAAY,CACnE,GAAID,EAAO,aAAe,KAAOA,EAAO,YAAc,IAClD,OAAOE,GAAkCF,EAAQC,CAAO,EAE5D,IAAME,EAAWC,EAAI,CACjB,UAAWC,GAAoBL,CAAM,CACzC,CAAC,EACKM,EAAOC,EAAgBC,GAAe,MAAMC,GAAUT,EAAO,KAAMC,CAAO,CAAC,EAAG,MAAM,EACpFS,EAAMC,EAAKL,EAAM,CACnB,gBAAiBM,CACrB,CAAC,EACD,cAAO,OAAOT,EAAUO,CAAG,EACpBP,CACX,EACMD,GAAoC,MAAOF,EAAQC,IAAY,CACjE,IAAMY,EAAe,CACjB,GAAGb,EACH,KAAM,MAAMc,GAAed,EAAO,KAAMC,CAAO,CACnD,EACMc,EAAYC,GAAsBhB,EAAQa,EAAa,IAAI,EACjE,OAAQE,EAAW,CACf,IAAK,0BACL,IAAK,4CACD,MAAM,MAAME,GAA8BJ,EAAcZ,CAAO,EACnE,IAAK,4BACL,IAAK,8CACD,MAAM,MAAMiB,GAAgCL,EAAcZ,CAAO,EACrE,IAAK,2BACL,IAAK,6CACD,MAAM,MAAMkB,GAA+BN,EAAcZ,CAAO,EACpE,IAAK,wBACL,IAAK,0CACD,MAAM,MAAMmB,GAA4BP,EAAcZ,CAAO,EACjE,QACI,IAAMoB,EAAaR,EAAa,KAChC,OAAOS,GAAkB,CACrB,OAAAtB,EACA,WAAAqB,EACA,UAAAN,CACJ,CAAC,CACT,CACJ,EA0HA,IAAMQ,GAAoBC,GAAkBC,EAAe,EACrDC,GAAgC,MAAOC,EAAcC,IAAY,CACnE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,QAASG,CACb,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIC,GAAwB,CAC1C,UAAWC,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMY,GAAkC,MAAOZ,EAAcC,IAAY,CACrE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,QAASG,CACb,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIK,GAA0B,CAC5C,UAAWH,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMc,GAAiC,MAAOd,EAAcC,IAAY,CACpE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,QAASG,CACb,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIO,GAAyB,CAC3C,UAAWL,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMgB,GAA8B,MAAOhB,EAAcC,IAAY,CACjE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,QAASG,CACb,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIS,GAAsB,CACxC,UAAWP,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMU,GAAuBQ,IAAY,CACrC,eAAgBA,EAAO,WACvB,UAAWA,EAAO,QAAQ,kBAAkB,GAAKA,EAAO,QAAQ,mBAAmB,GAAKA,EAAO,QAAQ,kBAAkB,EACzH,kBAAmBA,EAAO,QAAQ,YAAY,EAC9C,KAAMA,EAAO,QAAQ,aAAa,CACtC,GACMC,GAAc,CAACC,EAAa,IAAI,WAAcnB,IAC5CmB,aAAsB,WACf,QAAQ,QAAQA,CAAU,EAE9BnB,EAAQ,gBAAgBmB,CAAU,GAAK,QAAQ,QAAQ,IAAI,UAAY,EAE5EC,GAAoB,CAACD,EAAYnB,IAAYkB,GAAYC,EAAYnB,CAAO,EAAE,KAAMqB,GAASrB,EAAQ,YAAYqB,CAAI,CAAC,EACtHC,GAA6BC,GAC/BA,GAAU,MACVA,IAAU,KACT,CAAC,OAAO,oBAAoBA,CAAK,EAAE,SAAS,QAAQ,GAAKA,EAAM,QAAU,KACzE,CAAC,OAAO,oBAAoBA,CAAK,EAAE,SAAS,MAAM,GAAKA,EAAM,MAAQ,GACpEC,GAAY,CAACL,EAAYnB,IAAYoB,GAAkBD,EAAYnB,CAAO,EAAE,KAAMyB,GAChFA,EAAQ,OACD,KAAK,MAAMA,CAAO,EAEtB,CAAC,CACX,EACKC,GAAiB,MAAOC,EAAW3B,IAAY,CACjD,IAAMuB,EAAQ,MAAMC,GAAUG,EAAW3B,CAAO,EAChD,OAAAuB,EAAM,QAAUA,EAAM,SAAWA,EAAM,QAChCA,CACX,EACMK,GAAwB,CAACX,EAAQd,IAAS,CAC5C,IAAM0B,EAAU,CAACC,EAAQC,IAAQ,OAAO,KAAKD,CAAM,EAAE,KAAME,GAAMA,EAAE,YAAY,IAAMD,EAAI,YAAY,CAAC,EAChGE,EAAqBC,GAAa,CACpC,IAAIC,EAAaD,EACjB,OAAI,OAAOC,GAAe,WACtBA,EAAaA,EAAW,SAAS,GAEjCA,EAAW,QAAQ,GAAG,GAAK,IAC3BA,EAAaA,EAAW,MAAM,GAAG,EAAE,CAAC,GAEpCA,EAAW,QAAQ,GAAG,GAAK,IAC3BA,EAAaA,EAAW,MAAM,GAAG,EAAE,CAAC,GAEpCA,EAAW,QAAQ,GAAG,GAAK,IAC3BA,EAAaA,EAAW,MAAM,GAAG,EAAE,CAAC,GAEjCA,CACX,EACMC,EAAYP,EAAQZ,EAAO,QAAS,kBAAkB,EAC5D,GAAImB,IAAc,OACd,OAAOH,EAAkBhB,EAAO,QAAQmB,CAAS,CAAC,EAEtD,GAAIjC,EAAK,OAAS,OACd,OAAO8B,EAAkB9B,EAAK,IAAI,EAEtC,GAAIA,EAAK,SAAc,OACnB,OAAO8B,EAAkB9B,EAAK,MAAS,CAE/C,ECpWO,IAAMkC,GAAN,cAAwCC,CAAS,CACpD,OAAO,kCAAmC,CACtC,MAAO,CACH,QAAS,CAAE,KAAM,gBAAiB,KAAM,iBAAkB,EAC1D,SAAU,CAAE,KAAM,gBAAiB,KAAM,UAAW,EACpD,OAAQ,CAAE,KAAM,gBAAiB,KAAM,QAAS,EAChD,aAAc,CAAE,KAAM,gBAAiB,KAAM,sBAAuB,CACxE,CACJ,CACA,YAAYC,EAAO,CACf,MAAM,EACN,KAAK,MAAQA,CACjB,CACA,kBAAkBC,EAAaC,EAAeC,EAAS,CACnD,KAAK,gBAAgB,IAAIC,EAAeF,EAAe,KAAK,UAAW,KAAK,WAAW,CAAC,EACxF,KAAK,gBAAgB,IAAIG,EAAkBH,EAAeJ,GAA0B,iCAAiC,CAAC,CAAC,EACvH,IAAMQ,EAAQL,EAAY,OAAO,KAAK,eAAe,EAC/C,CAAE,OAAAM,CAAO,EAAIL,EAGbM,EAA0B,CAC5B,OAAAD,EACA,WAJe,YAKf,YAJgB,4BAKhB,wBAAyBE,GACzB,yBAA0BC,EAC9B,EACM,CAAE,eAAAC,CAAe,EAAIT,EAC3B,OAAOI,EAAM,QAASM,GAAYD,EAAe,OAAOC,EAAQ,QAAST,GAAW,CAAC,CAAC,EAAGK,CAAuB,CACpH,CACA,UAAUR,EAAOa,EAAS,CACtB,OAAOC,GAA6Bd,EAAOa,CAAO,CACtD,CACA,YAAYE,EAAQF,EAAS,CACzB,OAAOG,GAA6BD,EAAQF,CAAO,CACvD,CACJ,ECzCO,IAAMI,GAAmCC,IACrC,CACH,GAAGA,EACH,qBAAsBA,EAAQ,sBAAwB,GACtD,gBAAiBA,EAAQ,iBAAmB,GAC5C,mBAAoB,cACxB,GCNJ,IAAAC,GAAA,CACE,KAAQ,sBACR,YAAe,0EACf,QAAW,UACX,QAAW,CACT,MAAS,mEACT,YAAa,2BACb,aAAc,UACd,WAAY,0BACZ,qBAAsB,mEACtB,cAAe,6BACf,wBAAyB,4CACzB,MAAS,0CACT,eAAgB,4BAChB,kBAAmB,+DACrB,EACA,KAAQ,sBACR,MAAS,0BACT,OAAU,qBACV,YAAe,GACf,aAAgB,CACd,6BAA8B,QAC9B,wBAAyB,QACzB,2BAA4B,UAC5B,8BAA+B,UAC/B,qBAAsB,UACtB,8BAA+B,UAC/B,qCAAsC,UACtC,+BAAgC,UAChC,kCAAmC,UACnC,6BAA8B,UAC9B,0CAA2C,UAC3C,4BAA6B,UAC7B,4BAA6B,UAC7B,4BAA6B,UAC7B,iCAAkC,UAClC,gCAAiC,UACjC,6BAA8B,UAC9B,yBAA0B,UAC1B,yBAA0B,UAC1B,iBAAkB,UAClB,sBAAuB,UACvB,uBAAwB,UACxB,oCAAqC,UACrC,iCAAkC,UAClC,sCAAuC,UACvC,mCAAoC,UACpC,0BAA2B,UAC3B,sBAAuB,UACvB,mCAAoC,UACpC,gCAAiC,UACjC,qBAAsB,UACtB,MAAS,QACX,EACA,gBAAmB,CACjB,kDAAmD,UACnD,mBAAoB,QACpB,cAAe,YACf,aAAgB,QAChB,gBAAiB,SACjB,OAAU,QACV,QAAW,UACX,WAAc,QAChB,EACA,QAAW,CACT,KAAQ,UACV,EACA,cAAiB,CACf,OAAQ,CACN,eAAgB,CACd,oBACF,CACF,CACF,EACA,MAAS,CACP,WACF,EACA,OAAU,CACR,KAAQ,8BACR,IAAO,oCACT,EACA,QAAW,aACX,QAAW,CACT,0BAA2B,iCAC7B,EACA,eAAgB,CACd,0BAA2B,gCAC7B,EACA,SAAY,oEACZ,WAAc,CACZ,KAAQ,MACR,IAAO,2CACP,UAAa,oBACf,CACF,EC5FA,OAAS,UAAAC,OAAc,SACvB,OAAS,cAAAC,GAAY,cAAAC,OAAkB,SAChC,IAAMC,GAAN,KAAW,CACd,YAAYC,EAAqBC,EAAQ,CACrC,KAAK,oBAAsBD,EAC3B,KAAK,OAASC,EACd,KAAK,MAAM,CACf,CACA,OAAOC,EAAQC,EAAU,CACrB,KAAK,KAAK,OAAOC,GAAaC,GAAeH,EAAQC,CAAQ,CAAC,CAAC,CACnE,CACA,QAAS,CACL,OAAO,QAAQ,QAAQ,KAAK,KAAK,OAAO,CAAC,CAC7C,CACA,OAAQ,CACJ,KAAK,KAAO,KAAK,OACXL,GAAW,KAAK,oBAAqBO,GAAe,KAAK,MAAM,CAAC,EAChER,GAAW,KAAK,mBAAmB,CAC7C,CACJ,EACA,SAASQ,GAAeC,EAAQH,EAAU,CACtC,OAAIP,GAAO,SAASU,CAAM,EACfA,EAEP,OAAOA,GAAW,SACXC,GAAWD,EAAQH,CAAQ,EAElC,YAAY,OAAOG,CAAM,EAClBE,GAAgBF,EAAO,OAAQA,EAAO,WAAYA,EAAO,UAAU,EAEvEE,GAAgBF,CAAM,CACjC,CChCO,SAASG,GAAiBC,EAAO,CACpC,IAAMC,EAAQ,CAAC,EACf,QAASC,KAAO,OAAO,KAAKF,CAAK,EAAE,KAAK,EAAG,CACvC,IAAMG,EAAQH,EAAME,CAAG,EAEvB,GADAA,EAAME,GAAUF,CAAG,EACf,MAAM,QAAQC,CAAK,EACnB,QAASE,EAAI,EAAGC,EAAOH,EAAM,OAAQE,EAAIC,EAAMD,IAC3CJ,EAAM,KAAK,GAAGC,KAAOE,GAAUD,EAAME,CAAC,CAAC,GAAG,MAG7C,CACD,IAAIE,EAAUL,GACVC,GAAS,OAAOA,GAAU,YAC1BI,GAAW,IAAIH,GAAUD,CAAK,KAElCF,EAAM,KAAKM,CAAO,GAG1B,OAAON,EAAM,KAAK,GAAG,CACzB,CClBA,OAAS,SAASO,GAAQ,WAAWC,OAAgB,OACrD,OAAS,SAASC,GAAS,WAAWC,OAAiB,QCHhD,IAAMC,GAA6B,CAAC,aAAc,QAAS,WAAW,ECA7E,IAAMC,GAAyBC,GAAY,CACvC,IAAMC,EAAqB,CAAC,EAC5B,QAAWC,KAAQ,OAAO,KAAKF,CAAO,EAAG,CACrC,IAAMG,EAAeH,EAAQE,CAAI,EACjCD,EAAmBC,CAAI,EAAI,MAAM,QAAQC,CAAY,EAAIA,EAAa,KAAK,GAAG,EAAIA,EAEtF,OAAOF,CACX,ECPO,IAAMG,GAAuB,CAACC,EAASC,EAAQC,EAAc,IAAM,CACjEA,GAGLF,EAAQ,GAAG,SAAWG,GAAW,CAC7B,GAAIA,EAAO,WAAY,CACnB,IAAMC,EAAY,WAAW,IAAM,CAC/BJ,EAAQ,QAAQ,EAChBC,EAAO,OAAO,OAAO,IAAI,MAAM,6DAA6DC,MAAgB,EAAG,CAC3G,KAAM,cACV,CAAC,CAAC,CACN,EAAGA,CAAW,EACdC,EAAO,GAAG,UAAW,IAAM,CACvB,aAAaC,CAAS,CAC1B,CAAC,EAET,CAAC,CACL,ECjBO,IAAMC,GAAmB,CAACC,EAASC,EAAQC,EAAc,IAAM,CAClEF,EAAQ,WAAWE,EAAa,IAAM,CAClCF,EAAQ,QAAQ,EAChBC,EAAO,OAAO,OAAO,IAAI,MAAM,8BAA8BC,MAAgB,EAAG,CAAE,KAAM,cAAe,CAAC,CAAC,CAC7G,CAAC,CACL,ECLA,OAAS,YAAAC,OAAgB,SAClB,SAASC,GAAiBC,EAAaC,EAAS,EACpCA,EAAQ,QAAQ,QAAaA,EAAQ,QAAQ,UAC7C,eACXD,EAAY,GAAG,WAAY,IAAM,CAC7BE,GAAUF,EAAaC,EAAQ,IAAI,CACvC,CAAC,EAGDC,GAAUF,EAAaC,EAAQ,IAAI,CAE3C,CACA,SAASC,GAAUF,EAAaG,EAAM,CAC9BA,aAAgBL,GAChBK,EAAK,KAAKH,CAAW,EAEhBG,EACLH,EAAY,IAAI,OAAO,KAAKG,CAAI,CAAC,EAGjCH,EAAY,IAAI,CAExB,CLZO,IAAMI,GAAN,KAAsB,CACzB,YAAYC,EAAS,CACjB,KAAK,SAAW,CAAE,gBAAiB,UAAW,EAC9C,KAAK,eAAiB,IAAI,QAAQ,CAACC,EAASC,IAAW,CAC/C,OAAOF,GAAY,WACnBA,EAAQ,EACH,KAAMG,GAAa,CACpBF,EAAQ,KAAK,qBAAqBE,CAAQ,CAAC,CAC/C,CAAC,EACI,MAAMD,CAAM,EAGjBD,EAAQ,KAAK,qBAAqBD,CAAO,CAAC,CAElD,CAAC,CACL,CACA,qBAAqBA,EAAS,CAC1B,GAAM,CAAE,eAAAI,EAAgB,kBAAAC,EAAmB,cAAAC,EAAe,UAAAC,EAAW,WAAAC,CAAW,EAAIR,GAAW,CAAC,EAC1FS,EAAY,GACZC,EAAa,GACnB,MAAO,CACH,kBAAAL,EACA,eAAgBD,GAAkBE,EAClC,UAAWC,GAAa,IAAII,GAAO,CAAE,UAAAF,EAAW,WAAAC,CAAW,CAAC,EAC5D,WAAYF,GAAc,IAAII,GAAQ,CAAE,UAAAH,EAAW,WAAAC,CAAW,CAAC,CACnE,CACJ,CACA,SAAU,CArCd,IAAAG,EAAAC,EAAAC,EAAAC,GAsCQF,GAAAD,EAAA,KAAK,SAAL,YAAAA,EAAa,YAAb,MAAAC,EAAwB,WACxBE,GAAAD,EAAA,KAAK,SAAL,YAAAA,EAAa,aAAb,MAAAC,EAAyB,SAC7B,CACA,MAAM,OAAOC,EAAS,CAAE,YAAAC,CAAY,EAAI,CAAC,EAAG,CACxC,OAAK,KAAK,SACN,KAAK,OAAS,MAAM,KAAK,gBAEtB,IAAI,QAAQ,CAACjB,EAASC,IAAW,CACpC,GAAI,CAAC,KAAK,OACN,MAAM,IAAI,MAAM,kDAAkD,EAEtE,GAAIgB,GAAA,MAAAA,EAAa,QAAS,CACtB,IAAMC,EAAa,IAAI,MAAM,iBAAiB,EAC9CA,EAAW,KAAO,aAClBjB,EAAOiB,CAAU,EACjB,OAEJ,IAAMC,EAAQH,EAAQ,WAAa,SAC7BI,EAAcC,GAAiBL,EAAQ,OAAS,CAAC,CAAC,EAClDM,EAAmB,CACrB,QAASN,EAAQ,QACjB,KAAMA,EAAQ,SACd,OAAQA,EAAQ,OAChB,KAAMI,EAAc,GAAGJ,EAAQ,QAAQI,IAAgBJ,EAAQ,KAC/D,KAAMA,EAAQ,KACd,MAAOG,EAAQ,KAAK,OAAO,WAAa,KAAK,OAAO,SACxD,EAEMI,GADcJ,EAAQK,GAAYC,IAChBH,EAAmBI,GAAQ,CAC/C,IAAMC,EAAe,IAAIC,GAAa,CAClC,WAAYF,EAAI,YAAc,GAC9B,QAASG,GAAsBH,EAAI,OAAO,EAC1C,KAAMA,CACV,CAAC,EACD1B,EAAQ,CAAE,SAAU2B,CAAa,CAAC,CACtC,CAAC,EACDJ,EAAI,GAAG,QAAUO,GAAQ,CACjBC,GAA2B,SAASD,EAAI,IAAI,EAC5C7B,EAAO,OAAO,OAAO6B,EAAK,CAAE,KAAM,cAAe,CAAC,CAAC,EAGnD7B,EAAO6B,CAAG,CAElB,CAAC,EACDE,GAAqBT,EAAKtB,EAAQ,KAAK,OAAO,iBAAiB,EAC/DgC,GAAiBV,EAAKtB,EAAQ,KAAK,OAAO,cAAc,EACpDgB,IACAA,EAAY,QAAU,IAAM,CACxBM,EAAI,MAAM,EACV,IAAML,EAAa,IAAI,MAAM,iBAAiB,EAC9CA,EAAW,KAAO,aAClBjB,EAAOiB,CAAU,CACrB,GAEJgB,GAAiBX,EAAKP,CAAO,CACjC,CAAC,CACL,CACJ,EM/FO,IAAMmB,GAAN,KAA8B,CACjC,YAAYC,EAAU,CAClB,KAAK,SAAW,CAAC,EACjB,KAAK,SAAWA,GAAY,CAAC,CACjC,CACA,MAAO,CACH,GAAI,KAAK,SAAS,OAAS,EACvB,OAAO,KAAK,SAAS,MAAM,CAEnC,CACA,UAAUC,EAAS,CACf,KAAK,SAAS,KAAKA,CAAO,CAC9B,CACA,SAASA,EAAS,CACd,OAAO,KAAK,SAAS,SAASA,CAAO,CACzC,CACA,OAAOA,EAAS,CACZ,KAAK,SAAW,KAAK,SAAS,OAAQ,GAAM,IAAMA,CAAO,CAC7D,CACA,CAAC,OAAO,QAAQ,GAAI,CAChB,OAAO,KAAK,SAAS,OAAO,QAAQ,EAAE,CAC1C,CACA,QAAQC,EAAY,CAChB,QAAWD,KAAW,KAAK,SACnBA,IAAYC,IACPD,EAAQ,WACTA,EAAQ,QAAQ,EAIhC,CACJ,EC/BA,OAAS,YAAAE,OAAgB,SAClB,IAAMC,GAAN,cAAwBD,EAAS,CACpC,aAAc,CACV,MAAM,GAAG,SAAS,EAClB,KAAK,cAAgB,CAAC,CAC1B,CACA,OAAOE,EAAOC,EAAUC,EAAU,CAC9B,KAAK,cAAc,KAAKF,CAAK,EAC7BE,EAAS,CACb,CACJ,ECTO,IAAMC,GAAmBC,GAAW,IAAI,QAAQ,CAACC,EAASC,IAAW,CACxE,IAAMC,EAAY,IAAIC,GACtBJ,EAAO,KAAKG,CAAS,EACrBH,EAAO,GAAG,QAAUK,GAAQ,CACxBF,EAAU,IAAI,EACdD,EAAOG,CAAG,CACd,CAAC,EACDF,EAAU,GAAG,QAASD,CAAM,EAC5BC,EAAU,GAAG,SAAU,UAAY,CAC/B,IAAMG,EAAQ,IAAI,WAAW,OAAO,OAAO,KAAK,aAAa,CAAC,EAC9DL,EAAQK,CAAK,CACjB,CAAC,CACL,CAAC,ECbD,OAAS,aAAAC,GAAW,aAAAC,OAAiB,KAC9B,IAAMC,GAAuBC,GAAS,CACzC,GAAI,CAACA,EACD,MAAO,GAEX,GAAI,OAAOA,GAAS,SAChB,OAAO,OAAO,KAAKA,CAAI,EAAE,OAExB,GAAI,OAAOA,EAAK,YAAe,SAChC,OAAOA,EAAK,WAEX,GAAI,OAAOA,EAAK,MAAS,SAC1B,OAAOA,EAAK,KAEX,GAAI,OAAOA,EAAK,MAAS,UAAY,OAAO,SAASA,EAAK,IAAI,EAC/D,OAAOF,GAAUE,EAAK,IAAI,EAAE,KAE3B,GAAI,OAAOA,EAAK,IAAO,SACxB,OAAOH,GAAUG,EAAK,EAAE,EAAE,KAE9B,MAAM,IAAI,MAAM,sCAAsCA,GAAM,CAChE,ECpBA,OAAS,YAAAC,GAAU,WAAAC,OAAe,KAClC,OAAS,OAAAC,GAAK,YAAAC,OAAgB,UCFvB,IAAMC,GAAiB,IAAM,CAChC,GAAI,CACA,OAAI,OAAOC,GAAY,YAAc,OAAO,OAAW,KAAe,EAAQ,SAAS,EAC5E,CAAC,cAAc,EAEnB,IACX,MACA,CACI,OAAO,IACX,CACJ,EDNO,IAAMC,GAAqB,oBACrBC,GAAqB,gBACrBC,GAAmB,CAAC,CAAE,UAAAC,EAAW,cAAAC,CAAc,IAAM,CAC9D,IAAMC,EAAW,CACb,CAAC,aAAcD,CAAa,EAC5B,CAAC,MAAME,GAAS,IAAKC,GAAQ,CAAC,EAC9B,CAAC,SAAS,EACV,CAAC,YAAa,GAAGC,GAAS,MAAM,CACpC,EACMC,EAAeC,GAAe,EAChCD,GACAJ,EAAS,KAAKI,CAAY,EAE1BN,GACAE,EAAS,KAAK,CAAC,OAAOF,IAAaC,CAAa,CAAC,EAEjDO,GAAI,mBACJN,EAAS,KAAK,CAAC,YAAYM,GAAI,mBAAmB,CAAC,EAEvD,IAAMC,EAAeC,EAAW,CAC5B,4BAA8BF,GAAQA,EAAIX,EAAkB,EAC5D,mBAAqBc,GAAYA,EAAQb,EAAkB,EAC3D,QAAS,MACb,CAAC,EAAE,EACCc,EACJ,MAAO,UAAY,CACf,GAAI,CAACA,EAAmB,CACpB,IAAMC,EAAQ,MAAMJ,EACpBG,EAAoBC,EAAQ,CAAC,GAAGX,EAAU,CAAC,OAAOW,GAAO,CAAC,EAAI,CAAC,GAAGX,CAAQ,EAE9E,OAAOU,CACX,CACJ,EEnCA,IAAME,GAAe,yBACRC,GAAcC,GAAU,CACjC,GAAKA,EAAM,OAAS,EAAK,IAAM,EAC3B,MAAM,IAAI,UAAU,qCAAqC,EAE7D,GAAI,CAACF,GAAa,KAAKE,CAAK,EACxB,MAAM,IAAI,UAAU,wBAAwB,EAEhD,IAAMC,EAASC,GAAWF,EAAO,QAAQ,EACzC,OAAO,IAAI,WAAWC,EAAO,OAAQA,EAAO,WAAYA,EAAO,UAAU,CAC7E,ECVO,IAAME,GAAYC,GAAUC,GAAgBD,EAAM,OAAQA,EAAM,WAAYA,EAAM,UAAU,EAAE,SAAS,QAAQ,ECDtH,IAAME,GAAI,WAAYC,GAAI,KAAMC,GAAI,OAAQC,GAAI,MAC1CC,GAAI,kBAAmBC,GAAI,OAAQC,GAAI,QAASC,GAAI,WAAYC,GAAI,CAAE,CAACR,EAAC,EAAG,GAAO,KAAQ,QAAS,EAAGS,GAAI,CAAE,CAACT,EAAC,EAAG,GAAM,QAAW,GAAO,KAAQ,SAAU,EAAGU,GAAI,CAAE,CAACP,EAAC,EAAG,UAAW,EAAGQ,GAAI,CAAE,CAACV,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAG,SAAU,EAAG,EAAI,CAAE,EAAGS,GAAI,CAAE,CAACX,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAG,cAAe,EAAG,EAAI,CAAE,EAAGU,GAAI,CAAC,EAAGC,GAAI,CAAE,CAACb,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,GAAM,CAAE,CAACD,EAAC,EAAG,UAAW,CAACC,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAGC,EAAE,EAAG,cAAc,CAAE,CAAC,CAAE,EAAGW,GAAI,CAAE,CAACd,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,GAAM,CAAE,CAACD,EAAC,EAAG,UAAW,CAACC,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAGC,EAAE,EAAG,mBAAmB,CAAE,CAAC,CAAE,EAAGY,GAAI,CAACN,EAAC,EAAGO,GAAI,CAACN,EAAC,EAAGO,GAAI,CAACN,EAAC,EACniBO,GAAQ,CAAE,QAAS,MAAO,WAAY,CAAE,OAAQX,GAAG,aAAcC,GAAG,QAASA,GAAG,SAAUD,EAAE,EAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACP,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAG,QAAS,CAAC,EAAG,OAAQC,EAAE,CAAC,EAAG,KAAMC,GAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACJ,EAAC,EAAG,QAAS,CAACC,EAAC,EAAGc,EAAE,EAAG,CAAE,CAACf,EAAC,EAAG,WAAY,CAACC,EAAC,EAAGc,GAAG,OAAQ,KAAM,CAAC,EAAG,KAAMX,GAAG,MAAO,CAAC,CAAE,WAAYY,GAAG,MAAO,oEAAqE,KAAMX,EAAE,EAAG,CAAE,KAAMD,GAAG,MAAO,CAAC,CAAE,WAAYa,GAAG,MAAO,yEAA0E,KAAMZ,EAAE,EAAG,CAAE,SAAU,CAAE,IAAKI,GAAG,WAAYG,GAAG,QAASA,EAAE,EAAG,KAAMN,EAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,WAAY,CAACI,GAAGC,EAAC,EAAG,KAAMP,GAAG,MAAO,CAAC,CAAE,WAAY,CAACS,GAAGC,EAAC,EAAG,KAAMV,GAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,wEAAyE,WAAYQ,GAAG,QAASA,EAAE,EAAG,KAAMN,EAAE,CAAC,CAAE,EAAG,CAAE,MAAO,kFAAmF,KAAMD,EAAE,CAAC,CAAE,EAAG,CAAE,WAAYW,GAAG,KAAMZ,GAAG,MAAO,CAAC,CAAE,WAAY,CAACS,EAAC,EAAG,KAAMT,GAAG,MAAO,CAAC,CAAE,KAAMA,GAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,+DAAgE,WAAYQ,GAAG,QAASA,EAAE,EAAG,KAAMN,EAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,MAAO,2DAA4D,KAAMD,EAAE,CAAC,CAAE,EAAG,CAAE,WAAYY,GAAG,KAAMb,GAAG,MAAO,CAAC,CAAE,WAAY,CAACU,EAAC,EAAG,KAAMV,GAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,mEAAoE,WAAYQ,GAAG,QAASA,EAAE,EAAG,KAAMN,EAAE,CAAC,CAAE,EAAG,CAAE,MAAO,qEAAsE,KAAMD,EAAE,CAAC,CAAE,EAAG,CAAE,SAAU,CAAE,IAAK,0DAA2D,WAAYO,GAAG,QAASA,EAAE,EAAG,KAAMN,EAAE,CAAC,CAAE,CAAC,CAAE,EAC7lDa,GAAUD,GCDhB,IAAME,GAA0B,CAACC,EAAgBC,EAAU,CAAC,IACxDC,GAAgBC,GAAS,CAC5B,eAAgBH,EAChB,OAAQC,EAAQ,MACpB,CAAC,ECDE,IAAMG,GAAoBC,IAAY,CACzC,WAAY,aACZ,eAAeA,GAAA,YAAAA,EAAQ,gBAAiBC,GACxC,eAAeD,GAAA,YAAAA,EAAQ,gBAAiBE,GACxC,mBAAmBF,GAAA,YAAAA,EAAQ,oBAAqB,GAChD,kBAAkBA,GAAA,YAAAA,EAAQ,mBAAoBG,GAC9C,QAAQH,GAAA,YAAAA,EAAQ,SAAU,IAAII,GAC9B,WAAWJ,GAAA,YAAAA,EAAQ,YAAa,MAChC,WAAWA,GAAA,YAAAA,EAAQ,YAAaK,EAChC,aAAaL,GAAA,YAAAA,EAAQ,cAAeM,GACpC,aAAaN,GAAA,YAAAA,EAAQ,cAAeO,EACxC,GChBO,IAAMC,GAAoB,oBACpBC,GAAiB,aACjBC,GAAyB,qBACzBC,GAAoB,4BACpBC,GAAwB,CAAC,YAAa,eAAgB,SAAU,WAAY,QAAQ,EACpFC,GAAmB,qCCLhC,IAAMC,GAAwB,oBACxBC,GAA2B,gBACpBC,GAAoC,CAC7C,4BAA8BC,GACnBA,EAAIH,EAAqB,EAEpC,mBAAqBI,GACVA,EAAQH,EAAwB,EAE3C,QAAS,QACb,ECJO,IAAMI,GAA4B,CAAC,CAAE,OAAAC,EAASC,EAAWC,EAA0B,EAAG,aAAAC,EAAeF,EAAWG,EAAiC,CAAG,EAAI,CAAC,IAAMC,GAAQ,SAAY,CACtL,IAAMC,EAAO,OAAOH,GAAiB,WAAa,MAAMA,EAAa,EAAIA,EACzE,OAAQG,GAAA,YAAAA,EAAM,cAAe,CACzB,IAAK,OACD,OAAOC,GAA4BP,CAAM,EAC7C,IAAK,YACL,IAAK,eACL,IAAK,SACL,IAAK,WACL,IAAK,SACD,OAAO,QAAQ,QAAQM,GAAA,YAAAA,EAAM,mBAAmB,EACpD,KAAK,OACD,OAAO,QAAQ,QAAQ,QAAQ,EACnC,QACI,MAAM,IAAI,MAAM,gDAAgDE,GAAsB,KAAK,IAAI,UAAUF,GAAM,CACvH,CACJ,CAAC,EACKC,GAA8B,MAAOE,GAAiB,CACxD,GAAIA,EAAc,CACd,IAAMC,EAAiB,OAAOD,GAAiB,WAAa,MAAMA,EAAa,EAAIA,EAC7EE,EAAiB,MAAMC,GAAoB,EACjD,OAAKD,EAGDD,IAAmBC,EACZ,YAGA,eANA,WASf,MAAO,UACX,EACMC,GAAsB,SAAY,CACpC,GAAI,QAAQ,IAAIC,EAAiB,IAAM,QAAQ,IAAIC,EAAc,GAAK,QAAQ,IAAIC,EAAsB,GACpG,OAAO,QAAQ,IAAID,EAAc,GAAK,QAAQ,IAAIC,EAAsB,EAE5E,GAAI,CAAC,QAAQ,IAAIC,EAAiB,EAC9B,GAAI,CACA,IAAMC,EAAW,MAAMC,GAA4B,EACnD,OAAQ,MAAMC,GAAY,CAAE,GAAGF,EAAU,KAAMG,EAAiB,CAAC,GAAG,SAAS,CACjF,MACA,CACA,CAER,ECtCO,IAAMC,GAAoBC,GAAW,CACxCC,GAAgC,QAAQ,OAAO,EAC/C,IAAMC,EAAeC,GAA0BH,CAAM,EAC/CI,EAAwB,IAAMF,EAAa,EAAE,KAAKG,EAAyB,EAC3EC,EAAqBP,GAAuBC,CAAM,EACxD,MAAO,CACH,GAAGM,EACH,GAAGN,EACH,QAAS,OACT,aAAAE,EACA,mBAAmBF,GAAA,YAAAA,EAAQ,oBAAqBO,GAChD,0BAA0BP,GAAA,YAAAA,EAAQ,2BAC9BQ,GAAiB,CAAE,UAAWF,EAAmB,UAAW,cAAeG,GAAY,OAAQ,CAAC,EACpG,aAAaT,GAAA,YAAAA,EAAQ,cAAeU,EAAeC,EAA+B,EAClF,QAAQX,GAAA,YAAAA,EAAQ,SAAUU,EAAeE,GAA4BC,EAA+B,EACpG,gBAAgBb,GAAA,YAAAA,EAAQ,iBAAkB,IAAIc,GAAeV,CAAqB,EAClF,WAAWJ,GAAA,YAAAA,EAAQ,YACfU,EAAe,CACX,GAAGK,GACH,QAAS,UAAa,MAAMX,EAAsB,GAAG,WAAaY,EACtE,CAAC,EACL,QAAQhB,GAAA,YAAAA,EAAQ,SAAUiB,GAAK,KAAK,KAAM,QAAQ,EAClD,iBAAiBjB,GAAA,YAAAA,EAAQ,kBAAmBkB,GAC5C,sBAAsBlB,GAAA,YAAAA,EAAQ,uBAAwBU,EAAeS,EAA0C,EAC/G,iBAAiBnB,GAAA,YAAAA,EAAQ,kBAAmBU,EAAeU,EAAqC,CACpG,CACJ,EC5BO,IAAMC,GAAN,cAAwBC,EAAS,CACpC,YAAYC,EAAe,CACvB,IAAMC,EAAYC,GAAmBF,CAAa,EAC5CG,EAAYC,GAAgCH,CAAS,EACrDI,EAAYC,GAAoBH,CAAS,EACzCI,EAAYC,GAAsBH,CAAS,EAC3CI,EAAYC,GAAmBH,CAAS,EACxCI,EAAoCF,EACpCG,EAAYC,GAAuBF,CAAS,EAClD,MAAMC,CAAS,EACf,KAAK,OAASA,EACd,KAAK,gBAAgB,IAAIE,GAAe,KAAK,MAAM,CAAC,EACpD,KAAK,gBAAgB,IAAIC,GAAuB,KAAK,MAAM,CAAC,EAC5D,KAAK,gBAAgB,IAAIC,GAAoB,KAAK,MAAM,CAAC,EACzD,KAAK,gBAAgB,IAAIC,GAAgB,KAAK,MAAM,CAAC,EACrD,KAAK,gBAAgB,IAAIC,GAA4B,KAAK,MAAM,CAAC,EACjE,KAAK,gBAAgB,IAAIC,GAAmB,KAAK,MAAM,CAAC,CAC5D,CACA,SAAU,CACN,MAAM,QAAQ,CAClB,CACJ,EC/BO,IAAMC,GAAkB,kFCAxB,IAAMC,EAAN,cAAsCC,EAAmB,CAC5D,YAAYC,EAAS,CACjB,MAAMA,CAAO,EACb,OAAO,eAAe,KAAMF,EAAwB,SAAS,CACjE,CACJ,ECLO,IAAMG,GAAN,cAAoCC,CAAgB,CACvD,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,wBACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,wBACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMF,GAAsB,SAAS,EAC3D,KAAK,MAAQE,EAAK,MAClB,KAAK,kBAAoBA,EAAK,iBAClC,CACJ,EACaC,GAAN,cAA4CF,CAAgB,CAC/D,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,gCACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,gCACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMC,GAA8B,SAAS,EACnE,KAAK,MAAQD,EAAK,MAClB,KAAK,kBAAoBA,EAAK,iBAClC,CACJ,EACaE,GAAN,cAAoCH,CAAgB,CACvD,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,wBACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,wBACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAME,GAAsB,SAAS,EAC3D,KAAK,MAAQF,EAAK,MAClB,KAAK,kBAAoBA,EAAK,iBAClC,CACJ,EACaG,GAAN,cAAsCJ,CAAgB,CACzD,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,0BACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,0BACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMG,GAAwB,SAAS,EAC7D,KAAK,MAAQH,EAAK,MAClB,KAAK,kBAAoBA,EAAK,iBAClC,CACJ,EACaI,GAAN,cAAqCL,CAAgB,CACxD,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,yBACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,yBACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMI,GAAuB,SAAS,EAC5D,KAAK,MAAQJ,EAAK,MAClB,KAAK,kBAAoBA,EAAK,iBAClC,CACJ,EACaK,GAAN,cAAoCN,CAAgB,CACvD,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,wBACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,wBACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMK,GAAsB,SAAS,EAC3D,KAAK,MAAQL,EAAK,MAClB,KAAK,kBAAoBA,EAAK,iBAClC,CACJ,EACaM,GAAN,cAAsCP,CAAgB,CACzD,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,0BACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,0BACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMM,GAAwB,SAAS,EAC7D,KAAK,MAAQN,EAAK,MAClB,KAAK,kBAAoBA,EAAK,iBAClC,CACJ,EACaO,GAAN,cAAoCR,CAAgB,CACvD,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,wBACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,wBACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMO,GAAsB,SAAS,EAC3D,KAAK,MAAQP,EAAK,MAClB,KAAK,kBAAoBA,EAAK,iBAClC,CACJ,EACaQ,GAAN,cAAgCT,CAAgB,CACnD,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,oBACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,oBACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMQ,GAAkB,SAAS,EACvD,KAAK,MAAQR,EAAK,MAClB,KAAK,kBAAoBA,EAAK,iBAClC,CACJ,EACaS,GAAN,cAA0CV,CAAgB,CAC7D,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,8BACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,8BACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMS,GAA4B,SAAS,EACjE,KAAK,MAAQT,EAAK,MAClB,KAAK,kBAAoBA,EAAK,iBAClC,CACJ,EACaU,GAAN,cAA4CX,CAAgB,CAC/D,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,gCACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,gCACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMU,GAA8B,SAAS,EACnE,KAAK,MAAQV,EAAK,MAClB,KAAK,kBAAoBA,EAAK,iBAClC,CACJ,ECtJO,IAAMW,GAAwB,MAAOC,EAAOC,IAAY,CAC3D,GAAM,CAAE,SAAAC,EAAU,SAAAC,EAAW,QAAS,KAAAC,EAAM,KAAMC,CAAS,EAAI,MAAMJ,EAAQ,SAAS,EAChFK,EAAU,CACZ,eAAgB,kBACpB,EACMC,EAAe,GAAGF,GAAA,MAAAA,EAAU,SAAS,KAAOA,EAAS,MAAM,EAAG,EAAE,EAAIA,GAAY,WAClFG,EACJ,OAAAA,EAAO,KAAK,UAAUC,EAAKT,EAAO,CAC9B,SAAU,CAAC,EACX,aAAc,CAAC,EACf,KAAM,CAAC,EACP,WAAY,CAAC,EACb,UAAW,CAAC,EACZ,YAAa,CAAC,EACd,aAAc,CAAC,EACf,MAAQU,GAAMC,EAAMD,CAAC,CACzB,CAAC,CAAC,EACK,IAAIE,EAAc,CACrB,SAAAT,EACA,SAAAD,EACA,KAAAE,EACA,OAAQ,OACR,QAAAE,EACA,KAAMC,EACN,KAAAC,CACJ,CAAC,CACL,EA6CO,IAAMK,GAAwB,MAAOC,EAAQC,IAAY,CAC5D,GAAID,EAAO,aAAe,KAAOA,EAAO,YAAc,IAClD,OAAOE,GAA2BF,EAAQC,CAAO,EAErD,IAAME,EAAWC,EAAI,CACjB,UAAWC,GAAoBL,CAAM,CACzC,CAAC,EACKM,EAAOC,EAAgBC,GAAe,MAAMC,GAAUT,EAAO,KAAMC,CAAO,CAAC,EAAG,MAAM,EACpFS,EAAMC,EAAKL,EAAM,CACnB,YAAaM,EACb,UAAWC,GACX,QAASD,EACT,aAAcA,EACd,UAAWA,CACf,CAAC,EACD,cAAO,OAAOT,EAAUO,CAAG,EACpBP,CACX,EACMD,GAA6B,MAAOF,EAAQC,IAAY,CAC1D,IAAMa,EAAe,CACjB,GAAGd,EACH,KAAM,MAAMe,GAAef,EAAO,KAAMC,CAAO,CACnD,EACMe,EAAYC,GAAsBjB,EAAQc,EAAa,IAAI,EACjE,OAAQE,EAAW,CACf,IAAK,wBACL,IAAK,8CACD,MAAM,MAAME,GAA4BJ,EAAcb,CAAO,EACjE,IAAK,gCACL,IAAK,sDACD,MAAM,MAAMkB,GAAoCL,EAAcb,CAAO,EACzE,IAAK,wBACL,IAAK,8CACD,MAAM,MAAMmB,GAA4BN,EAAcb,CAAO,EACjE,IAAK,0BACL,IAAK,gDACD,MAAM,MAAMoB,GAA8BP,EAAcb,CAAO,EACnE,IAAK,yBACL,IAAK,+CACD,MAAM,MAAMqB,GAA6BR,EAAcb,CAAO,EAClE,IAAK,wBACL,IAAK,8CACD,MAAM,MAAMsB,GAA4BT,EAAcb,CAAO,EACjE,IAAK,0BACL,IAAK,gDACD,MAAM,MAAMuB,GAA8BV,EAAcb,CAAO,EACnE,IAAK,wBACL,IAAK,8CACD,MAAM,MAAMwB,GAA4BX,EAAcb,CAAO,EACjE,IAAK,oBACL,IAAK,0CACD,MAAM,MAAMyB,GAAwBZ,EAAcb,CAAO,EAC7D,IAAK,8BACL,IAAK,oDACD,MAAM,MAAM0B,GAAkCb,EAAcb,CAAO,EACvE,IAAK,gCACL,IAAK,sDACD,MAAM,MAAM2B,GAAoCd,EAAcb,CAAO,EACzE,QACI,IAAM4B,EAAaf,EAAa,KAChC,OAAOgB,GAAkB,CACrB,OAAA9B,EACA,WAAA6B,EACA,UAAAb,CACJ,CAAC,CACT,CACJ,EAkGA,IAAMe,GAAoBC,GAAkBC,CAAe,EACrDC,GAA8B,MAAOC,EAAcC,IAAY,CACjE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,MAAOG,EACP,kBAAmBA,CACvB,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIC,GAAsB,CACxC,UAAWC,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMY,GAAsC,MAAOZ,EAAcC,IAAY,CACzE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,MAAOG,EACP,kBAAmBA,CACvB,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIK,GAA8B,CAChD,UAAWH,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMc,GAA8B,MAAOd,EAAcC,IAAY,CACjE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,MAAOG,EACP,kBAAmBA,CACvB,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIO,GAAsB,CACxC,UAAWL,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMgB,GAAgC,MAAOhB,EAAcC,IAAY,CACnE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,MAAOG,EACP,kBAAmBA,CACvB,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIS,GAAwB,CAC1C,UAAWP,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMkB,GAA+B,MAAOlB,EAAcC,IAAY,CAClE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,MAAOG,EACP,kBAAmBA,CACvB,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIW,GAAuB,CACzC,UAAWT,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EAeA,IAAMoB,GAA8B,MAAOC,EAAcC,IAAY,CACjE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,MAAOG,EACP,kBAAmBA,CACvB,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIC,GAAsB,CACxC,UAAWC,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMY,GAAgC,MAAOZ,EAAcC,IAAY,CACnE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,MAAOG,EACP,kBAAmBA,CACvB,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIK,GAAwB,CAC1C,UAAWH,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMc,GAA8B,MAAOd,EAAcC,IAAY,CACjE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,MAAOG,EACP,kBAAmBA,CACvB,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIO,GAAsB,CACxC,UAAWL,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMgB,GAA0B,MAAOhB,EAAcC,IAAY,CAC7D,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,MAAOG,EACP,kBAAmBA,CACvB,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIS,GAAkB,CACpC,UAAWP,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMkB,GAAoC,MAAOlB,EAAcC,IAAY,CACvE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,MAAOG,EACP,kBAAmBA,CACvB,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIW,GAA4B,CAC9C,UAAWT,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMoB,GAAsC,MAAOpB,EAAcC,IAAY,CACzE,IAAMC,EAAWC,EAAI,CAAC,CAAC,EACjBC,EAAOJ,EAAa,KACpBK,EAAMC,EAAKF,EAAM,CACnB,MAAOG,EACP,kBAAmBA,CACvB,CAAC,EACD,OAAO,OAAOL,EAAUG,CAAG,EAC3B,IAAMG,EAAY,IAAIa,GAA8B,CAChD,UAAWX,GAAoBV,CAAY,EAC3C,GAAGE,CACP,CAAC,EACD,OAAOS,EAA2BH,EAAWR,EAAa,IAAI,CAClE,EACMU,GAAuBY,IAAY,CACrC,eAAgBA,EAAO,WACvB,UAAWA,EAAO,QAAQ,kBAAkB,GAAKA,EAAO,QAAQ,mBAAmB,GAAKA,EAAO,QAAQ,kBAAkB,EACzH,kBAAmBA,EAAO,QAAQ,YAAY,EAC9C,KAAMA,EAAO,QAAQ,aAAa,CACtC,GACMC,GAAc,CAACC,EAAa,IAAI,WAAcvB,IAC5CuB,aAAsB,WACf,QAAQ,QAAQA,CAAU,EAE9BvB,EAAQ,gBAAgBuB,CAAU,GAAK,QAAQ,QAAQ,IAAI,UAAY,EAE5EC,GAAoB,CAACD,EAAYvB,IAAYsB,GAAYC,EAAYvB,CAAO,EAAE,KAAMyB,GAASzB,EAAQ,YAAYyB,CAAI,CAAC,EAM5H,IAAMC,GAAY,CAACC,EAAYC,IAAYC,GAAkBF,EAAYC,CAAO,EAAE,KAAME,GAChFA,EAAQ,OACD,KAAK,MAAMA,CAAO,EAEtB,CAAC,CACX,EACKC,GAAiB,MAAOC,EAAWJ,IAAY,CACjD,IAAMK,EAAQ,MAAMP,GAAUM,EAAWJ,CAAO,EAChD,OAAAK,EAAM,QAAUA,EAAM,SAAWA,EAAM,QAChCA,CACX,EACMC,GAAwB,CAACC,EAAQC,IAAS,CAC5C,IAAMC,EAAU,CAACC,EAAQC,IAAQ,OAAO,KAAKD,CAAM,EAAE,KAAME,GAAMA,EAAE,YAAY,IAAMD,EAAI,YAAY,CAAC,EAChGE,EAAqBC,GAAa,CACpC,IAAIC,EAAaD,EACjB,OAAI,OAAOC,GAAe,WACtBA,EAAaA,EAAW,SAAS,GAEjCA,EAAW,QAAQ,GAAG,GAAK,IAC3BA,EAAaA,EAAW,MAAM,GAAG,EAAE,CAAC,GAEpCA,EAAW,QAAQ,GAAG,GAAK,IAC3BA,EAAaA,EAAW,MAAM,GAAG,EAAE,CAAC,GAEpCA,EAAW,QAAQ,GAAG,GAAK,IAC3BA,EAAaA,EAAW,MAAM,GAAG,EAAE,CAAC,GAEjCA,CACX,EACMC,EAAYP,EAAQF,EAAO,QAAS,kBAAkB,EAC5D,GAAIS,IAAc,OACd,OAAOH,EAAkBN,EAAO,QAAQS,CAAS,CAAC,EAEtD,GAAIR,EAAK,OAAS,OACd,OAAOK,EAAkBL,EAAK,IAAI,EAEtC,GAAIA,EAAK,SAAc,OACnB,OAAOK,EAAkBL,EAAK,MAAS,CAE/C,EC7cO,IAAMS,GAAN,cAAiCC,CAAS,CAC7C,OAAO,kCAAmC,CACtC,MAAO,CACH,QAAS,CAAE,KAAM,gBAAiB,KAAM,iBAAkB,EAC1D,SAAU,CAAE,KAAM,gBAAiB,KAAM,UAAW,EACpD,OAAQ,CAAE,KAAM,gBAAiB,KAAM,QAAS,EAChD,aAAc,CAAE,KAAM,gBAAiB,KAAM,sBAAuB,CACxE,CACJ,CACA,YAAYC,EAAO,CACf,MAAM,EACN,KAAK,MAAQA,CACjB,CACA,kBAAkBC,EAAaC,EAAeC,EAAS,CACnD,KAAK,gBAAgB,IAAIC,EAAeF,EAAe,KAAK,UAAW,KAAK,WAAW,CAAC,EACxF,KAAK,gBAAgB,IAAIG,EAAkBH,EAAeJ,GAAmB,iCAAiC,CAAC,CAAC,EAChH,IAAMQ,EAAQL,EAAY,OAAO,KAAK,eAAe,EAC/C,CAAE,OAAAM,CAAO,EAAIL,EAGbM,EAA0B,CAC5B,OAAAD,EACA,WAJe,gBAKf,YAJgB,qBAKhB,wBAA0BE,GAAMA,EAChC,yBAA2BA,GAAMA,CACrC,EACM,CAAE,eAAAC,CAAe,EAAIR,EAC3B,OAAOI,EAAM,QAASK,GAAYD,EAAe,OAAOC,EAAQ,QAASR,GAAW,CAAC,CAAC,EAAGK,CAAuB,CACpH,CACA,UAAUR,EAAOY,EAAS,CACtB,OAAOC,GAAsBb,EAAOY,CAAO,CAC/C,CACA,YAAYE,EAAQF,EAAS,CACzB,OAAOG,GAAsBD,EAAQF,CAAO,CAChD,CACJ,ECxCO,IAAMI,GAAmCC,IACrC,CACH,GAAGA,EACH,qBAAsBA,EAAQ,sBAAwB,GACtD,gBAAiBA,EAAQ,iBAAmB,GAC5C,mBAAoB,YACxB,GCNJ,IAAAC,GAAA,CACE,KAAQ,2BACR,YAAe,+EACf,QAAW,UACX,QAAW,CACT,MAAS,mEACT,YAAa,2BACb,aAAc,UACd,WAAY,0BACZ,qBAAsB,mEACtB,cAAe,6BACf,wBAAyB,4CACzB,MAAS,0CACT,eAAgB,4BAChB,kBAAmB,oEACrB,EACA,KAAQ,sBACR,MAAS,0BACT,OAAU,qBACV,YAAe,GACf,aAAgB,CACd,6BAA8B,QAC9B,wBAAyB,QACzB,2BAA4B,UAC5B,8BAA+B,UAC/B,qBAAsB,UACtB,8BAA+B,UAC/B,qCAAsC,UACtC,+BAAgC,UAChC,kCAAmC,UACnC,6BAA8B,UAC9B,0CAA2C,UAC3C,4BAA6B,UAC7B,4BAA6B,UAC7B,4BAA6B,UAC7B,iCAAkC,UAClC,gCAAiC,UACjC,6BAA8B,UAC9B,yBAA0B,UAC1B,yBAA0B,UAC1B,iBAAkB,UAClB,sBAAuB,UACvB,uBAAwB,UACxB,oCAAqC,UACrC,iCAAkC,UAClC,sCAAuC,UACvC,mCAAoC,UACpC,0BAA2B,UAC3B,sBAAuB,UACvB,mCAAoC,UACpC,gCAAiC,UACjC,qBAAsB,UACtB,MAAS,QACX,EACA,gBAAmB,CACjB,kDAAmD,UACnD,mBAAoB,QACpB,cAAe,YACf,aAAgB,QAChB,gBAAiB,SACjB,OAAU,QACV,QAAW,UACX,WAAc,QAChB,EACA,QAAW,CACT,KAAQ,UACV,EACA,cAAiB,CACf,OAAQ,CACN,eAAgB,CACd,oBACF,CACF,CACF,EACA,MAAS,CACP,WACF,EACA,OAAU,CACR,KAAQ,8BACR,IAAO,oCACT,EACA,QAAW,aACX,QAAW,CACT,0BAA2B,iCAC7B,EACA,eAAgB,CACd,0BAA2B,gCAC7B,EACA,SAAY,yEACZ,WAAc,CACZ,KAAQ,MACR,IAAO,2CACP,UAAa,yBACf,CACF,EC9FA,IAAMC,GAAI,WAAYC,GAAI,KAAMC,GAAI,OAAQC,GAAI,MAC1CC,GAAI,kBAAmBC,GAAI,OAAQC,GAAI,QAASC,GAAI,WAAYC,GAAI,CAAE,CAACR,EAAC,EAAG,GAAO,KAAQ,QAAS,EAAGS,GAAI,CAAE,CAACT,EAAC,EAAG,GAAM,QAAW,GAAO,KAAQ,SAAU,EAAGU,GAAI,CAAE,CAACP,EAAC,EAAG,UAAW,EAAGQ,GAAI,CAAE,CAACV,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAG,SAAU,EAAG,EAAI,CAAE,EAAGS,GAAI,CAAE,CAACX,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAG,cAAe,EAAG,EAAI,CAAE,EAAGU,GAAI,CAAC,EAAGC,GAAI,CAAE,CAACb,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,GAAM,CAAE,CAACD,EAAC,EAAG,UAAW,CAACC,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAGC,EAAE,EAAG,cAAc,CAAE,CAAC,CAAE,EAAGW,GAAI,CAAE,CAACd,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,GAAM,CAAE,CAACD,EAAC,EAAG,UAAW,CAACC,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAGC,EAAE,EAAG,mBAAmB,CAAE,CAAC,CAAE,EAAGY,GAAI,CAACN,EAAC,EAAGO,GAAI,CAACN,EAAC,EAAGO,GAAI,CAACN,EAAC,EACniBO,GAAQ,CAAE,QAAS,MAAO,WAAY,CAAE,OAAQX,GAAG,aAAcC,GAAG,QAASA,GAAG,SAAUD,EAAE,EAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACP,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAG,QAAS,CAAC,EAAG,OAAQC,EAAE,CAAC,EAAG,KAAMC,GAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACJ,EAAC,EAAG,QAAS,CAACC,EAAC,EAAGc,EAAE,EAAG,CAAE,CAACf,EAAC,EAAG,WAAY,CAACC,EAAC,EAAGc,GAAG,OAAQ,KAAM,CAAC,EAAG,KAAMX,GAAG,MAAO,CAAC,CAAE,WAAYY,GAAG,MAAO,oEAAqE,KAAMX,EAAE,EAAG,CAAE,KAAMD,GAAG,MAAO,CAAC,CAAE,WAAYa,GAAG,MAAO,yEAA0E,KAAMZ,EAAE,EAAG,CAAE,SAAU,CAAE,IAAKI,GAAG,WAAYG,GAAG,QAASA,EAAE,EAAG,KAAMN,EAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,WAAY,CAACI,GAAGC,EAAC,EAAG,KAAMP,GAAG,MAAO,CAAC,CAAE,WAAY,CAACS,GAAGC,EAAC,EAAG,KAAMV,GAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,kEAAmE,WAAYQ,GAAG,QAASA,EAAE,EAAG,KAAMN,EAAE,CAAC,CAAE,EAAG,CAAE,MAAO,kFAAmF,KAAMD,EAAE,CAAC,CAAE,EAAG,CAAE,WAAYW,GAAG,KAAMZ,GAAG,MAAO,CAAC,CAAE,WAAY,CAACS,EAAC,EAAG,KAAMT,GAAG,MAAO,CAAC,CAAE,KAAMA,GAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,yDAA0D,WAAYQ,GAAG,QAASA,EAAE,EAAG,KAAMN,EAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,MAAO,2DAA4D,KAAMD,EAAE,CAAC,CAAE,EAAG,CAAE,WAAYY,GAAG,KAAMb,GAAG,MAAO,CAAC,CAAE,WAAY,CAACU,EAAC,EAAG,KAAMV,GAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,6DAA8D,WAAYQ,GAAG,QAASA,EAAE,EAAG,KAAMN,EAAE,CAAC,CAAE,EAAG,CAAE,MAAO,qEAAsE,KAAMD,EAAE,CAAC,CAAE,EAAG,CAAE,SAAU,CAAE,IAAK,oDAAqD,WAAYO,GAAG,QAASA,EAAE,EAAG,KAAMN,EAAE,CAAC,CAAE,CAAC,CAAE,EACrkDa,GAAUD,GCDhB,IAAME,GAA0B,CAACC,EAAgBC,EAAU,CAAC,IACxDC,GAAgBC,GAAS,CAC5B,eAAgBH,EAChB,OAAQC,EAAQ,MACpB,CAAC,ECDE,IAAMG,GAAoBC,IAAY,CACzC,WAAY,aACZ,eAAeA,GAAA,YAAAA,EAAQ,gBAAiBC,GACxC,eAAeD,GAAA,YAAAA,EAAQ,gBAAiBE,GACxC,mBAAmBF,GAAA,YAAAA,EAAQ,oBAAqB,GAChD,kBAAkBA,GAAA,YAAAA,EAAQ,mBAAoBG,GAC9C,QAAQH,GAAA,YAAAA,EAAQ,SAAU,IAAII,GAC9B,WAAWJ,GAAA,YAAAA,EAAQ,YAAa,WAChC,WAAWA,GAAA,YAAAA,EAAQ,YAAaK,EAChC,aAAaL,GAAA,YAAAA,EAAQ,cAAeM,GACpC,aAAaN,GAAA,YAAAA,EAAQ,cAAeO,EACxC,GCHO,IAAMC,GAAoBC,GAAW,CACxCC,GAAgC,QAAQ,OAAO,EAC/C,IAAMC,EAAeC,GAA0BH,CAAM,EAC/CI,EAAwB,IAAMF,EAAa,EAAE,KAAKG,EAAyB,EAC3EC,EAAqBP,GAAuBC,CAAM,EACxD,MAAO,CACH,GAAGM,EACH,GAAGN,EACH,QAAS,OACT,aAAAE,EACA,mBAAmBF,GAAA,YAAAA,EAAQ,oBAAqBO,GAChD,0BAA0BP,GAAA,YAAAA,EAAQ,2BAC9BQ,GAAiB,CAAE,UAAWF,EAAmB,UAAW,cAAeG,GAAY,OAAQ,CAAC,EACpG,aAAaT,GAAA,YAAAA,EAAQ,cAAeU,EAAeC,EAA+B,EAClF,QAAQX,GAAA,YAAAA,EAAQ,SAAUU,EAAeE,GAA4BC,EAA+B,EACpG,gBAAgBb,GAAA,YAAAA,EAAQ,iBAAkB,IAAIc,GAAeV,CAAqB,EAClF,WAAWJ,GAAA,YAAAA,EAAQ,YACfU,EAAe,CACX,GAAGK,GACH,QAAS,UAAa,MAAMX,EAAsB,GAAG,WAAaY,EACtE,CAAC,EACL,QAAQhB,GAAA,YAAAA,EAAQ,SAAUiB,GAAK,KAAK,KAAM,QAAQ,EAClD,iBAAiBjB,GAAA,YAAAA,EAAQ,kBAAmBkB,GAC5C,sBAAsBlB,GAAA,YAAAA,EAAQ,uBAAwBU,EAAeS,EAA0C,EAC/G,iBAAiBnB,GAAA,YAAAA,EAAQ,kBAAmBU,EAAeU,EAAqC,CACpG,CACJ,EC5BO,IAAMC,GAAN,cAA4BC,EAAS,CACxC,YAAYC,EAAe,CACvB,IAAMC,EAAYC,GAAmBF,CAAa,EAC5CG,EAAYC,GAAgCH,CAAS,EACrDI,EAAYC,GAAoBH,CAAS,EACzCI,EAAYC,GAAsBH,CAAS,EAC3CI,EAAYC,GAAmBH,CAAS,EACxCI,EAAoCF,EACpCG,EAAYC,GAAuBF,CAAS,EAClD,MAAMC,CAAS,EACf,KAAK,OAASA,EACd,KAAK,gBAAgB,IAAIE,GAAe,KAAK,MAAM,CAAC,EACpD,KAAK,gBAAgB,IAAIC,GAAuB,KAAK,MAAM,CAAC,EAC5D,KAAK,gBAAgB,IAAIC,GAAoB,KAAK,MAAM,CAAC,EACzD,KAAK,gBAAgB,IAAIC,GAAgB,KAAK,MAAM,CAAC,EACrD,KAAK,gBAAgB,IAAIC,GAA4B,KAAK,MAAM,CAAC,EACjE,KAAK,gBAAgB,IAAIC,GAAmB,KAAK,MAAM,CAAC,CAC5D,CACA,SAAU,CACN,MAAM,QAAQ,CAClB,CACJ,EC/BA,IAAMC,GAAqB,CAAC,EACfC,GAAoBC,GAAc,CAC3C,GAAIF,GAAmBE,CAAS,EAC5B,OAAOF,GAAmBE,CAAS,EAEvC,IAAMC,EAAgB,IAAIC,GAAc,CAAE,OAAQF,CAAU,CAAC,EAC7D,OAAAF,GAAmBE,CAAS,EAAIC,EACzBA,CACX,ECPO,IAAME,GAAqB,CAACC,EAAUC,IACnBC,GAAiBD,CAAS,EAC3B,KAAK,IAAIE,GAAmB,CAC7C,SAAUH,EAAS,SACnB,aAAcA,EAAS,aACvB,aAAcA,EAAS,aACvB,UAAW,eACf,CAAC,CAAC,ECPC,IAAMI,GAAuBC,GAAU,CAC1C,GAAIA,EAAM,YAAcA,EAAM,WAAW,QAAQ,EAAI,KAAK,IAAI,EAC1D,MAAM,IAAIC,GAAmB,qBAAqBC,KAAmB,EAAK,CAElF,ECJO,IAAMC,GAAmB,CAACC,EAAKC,EAAOC,EAAa,KAAU,CAChE,GAAI,OAAOD,EAAU,IACjB,MAAM,IAAIE,GAAmB,0BAA0BH,kBAAoBE,EAAa,mBAAqB,OAAOE,KAAmB,EAAK,CAEpJ,ECLA,OAAS,YAAYC,OAAkB,KACvC,GAAM,CAAE,UAAAC,EAAU,EAAID,GACTE,GAAsB,CAACC,EAAIC,IAAa,CACjD,IAAMC,EAAgBC,GAAoBH,CAAE,EACtCI,EAAc,KAAK,UAAUH,EAAU,KAAM,CAAC,EACpD,OAAOH,GAAUI,EAAeE,CAAW,CAC/C,ECAA,IAAMC,GAAyB,IAAI,KAAK,CAAC,EAC5BC,GAAU,CAACC,EAAO,CAAC,IAAM,SAAY,CAC9C,IAAMC,EAAW,MAAMC,GAAgBF,CAAI,EACrCG,EAAcC,GAAeJ,CAAI,EACjCK,EAAUJ,EAASE,CAAW,EACpC,GAAKE,GAGA,GAAI,CAACA,EAAQ,YACd,MAAM,IAAIC,GAAmB,YAAYH,gDAA0D,MAHnG,OAAM,IAAIG,GAAmB,YAAYH,oDAA+D,EAAK,EAKjH,IAAMI,EAAiBF,EAAQ,YAEzBG,GADc,MAAMC,GAAmBT,CAAI,GAClBO,CAAc,EAC7C,GAAI,CAACC,EACD,MAAM,IAAIF,GAAmB,gBAAgBC,oDAAkE,EAAK,EAExH,QAAWG,IAAyB,CAAC,gBAAiB,YAAY,EAC9D,GAAI,CAACF,EAAWE,CAAqB,EACjC,MAAM,IAAIJ,GAAmB,gBAAgBC,oCAAiDG,MAA2B,EAAK,EAGtI,IAAMC,EAAcH,EAAW,cACzBI,EAAYJ,EAAW,WACzBK,EACJ,GAAI,CACAA,EAAW,MAAMC,GAAoBP,CAAc,CACvD,MACA,CACI,MAAM,IAAID,GAAmB,iDAAiDH,kCAA4CY,KAAmB,EAAK,CACtJ,CACAC,GAAiB,cAAeH,EAAS,WAAW,EACpDG,GAAiB,YAAaH,EAAS,SAAS,EAChD,GAAM,CAAE,YAAAI,EAAa,UAAAC,CAAU,EAAIL,EAC7BM,EAAgB,CAAE,MAAOF,EAAa,WAAY,IAAI,KAAKC,CAAS,CAAE,EAC5E,GAAIC,EAAc,WAAW,QAAQ,EAAI,KAAK,IAAI,EAAI,IAClD,OAAOA,EAEX,GAAI,KAAK,IAAI,EAAIrB,GAAuB,QAAQ,EAAI,GAAK,IACrD,OAAAsB,GAAoBD,CAAa,EAC1BA,EAEXH,GAAiB,WAAYH,EAAS,SAAU,EAAI,EACpDG,GAAiB,eAAgBH,EAAS,aAAc,EAAI,EAC5DG,GAAiB,eAAgBH,EAAS,aAAc,EAAI,EAC5D,GAAI,CACAf,GAAuB,QAAQ,KAAK,IAAI,CAAC,EACzC,IAAMuB,EAAkB,MAAMC,GAAmBT,EAAUD,CAAS,EACpEI,GAAiB,cAAeK,EAAgB,WAAW,EAC3DL,GAAiB,YAAaK,EAAgB,SAAS,EACvD,IAAME,EAAqB,IAAI,KAAK,KAAK,IAAI,EAAIF,EAAgB,UAAY,GAAI,EACjF,GAAI,CACA,MAAMG,GAAoBjB,EAAgB,CACtC,GAAGM,EACH,YAAaQ,EAAgB,YAC7B,UAAWE,EAAmB,YAAY,EAC1C,aAAcF,EAAgB,YAClC,CAAC,CACL,MACA,CACA,CACA,MAAO,CACH,MAAOA,EAAgB,YACvB,WAAYE,CAChB,CACJ,MACA,CACI,OAAAH,GAAoBD,CAAa,EAC1BA,CACX,CACJ,ECzEA,IAAMM,GAAmB,GAAK,GAAK,IAC7BC,GAA+B,GACxBC,GAAwB,MAAO,CAAE,YAAAC,EAAa,WAAAC,EAAY,aAAAC,EAAc,UAAAC,EAAW,YAAAC,EAAa,UAAAC,EAAW,QAAAC,CAAS,IAAM,CACnI,IAAIC,EACEC,EAAiB,gFACvB,GAAIP,EACA,GAAI,CACA,IAAMQ,EAAS,MAAMC,GAAoB,CAAE,QAAAJ,CAAQ,CAAC,EAAE,EACtDC,EAAQ,CACJ,YAAaE,EAAO,MACpB,UAAW,IAAI,KAAKA,EAAO,UAAU,EAAE,YAAY,CACvD,CACJ,OACOE,EAAP,CACI,MAAM,IAAIC,EAAyBD,EAAE,QAASb,EAA4B,CAC9E,KAGA,IAAI,CACAS,EAAQ,MAAMM,GAAoBb,CAAW,CACjD,MACA,CACI,MAAM,IAAIY,EAAyB,4DAA4DJ,IAAkBV,EAA4B,CACjJ,CAEJ,GAAI,IAAI,KAAKS,EAAM,SAAS,EAAE,QAAQ,EAAI,KAAK,IAAI,GAAKV,GACpD,MAAM,IAAIe,EAAyB,6DAA6DJ,IAAkBV,EAA4B,EAElJ,GAAM,CAAE,YAAAgB,CAAY,EAAIP,EAClBQ,EAAMV,GAAa,IAAIW,GAAU,CAAE,OAAQb,CAAU,CAAC,EACxDc,EACJ,GAAI,CACAA,EAAU,MAAMF,EAAI,KAAK,IAAIG,GAA0B,CACnD,UAAWhB,EACX,SAAUE,EACV,YAAAU,CACJ,CAAC,CAAC,CACN,OACOH,EAAP,CACI,MAAMC,EAAyB,KAAKD,EAAGb,EAA4B,CACvE,CACA,GAAM,CAAE,gBAAiB,CAAE,YAAAqB,EAAa,gBAAAC,EAAiB,aAAAC,EAAc,WAAAC,CAAW,EAAI,CAAC,CAAE,EAAIL,EAC7F,GAAI,CAACE,GAAe,CAACC,GAAmB,CAACC,GAAgB,CAACC,EACtD,MAAM,IAAIV,EAAyB,+CAAgDd,EAA4B,EAEnH,MAAO,CAAE,YAAAqB,EAAa,gBAAAC,EAAiB,aAAAC,EAAc,WAAY,IAAI,KAAKC,CAAU,CAAE,CAC1F,ECjDO,IAAMC,GAAsBC,GAAY,CAC3C,GAAM,CAAE,cAAAC,EAAe,eAAAC,EAAgB,WAAAC,EAAY,cAAAC,CAAc,EAAIJ,EACrE,GAAI,CAACC,GAAiB,CAACC,GAAkB,CAACC,GAAc,CAACC,EACrD,MAAM,IAAIC,EAAyB,iJACwB,OAAO,KAAKL,CAAO,EAAE,KAAK,IAAI;AAAA,oFAAyF,EAAK,EAE3L,OAAOA,CACX,ECHO,IAAMM,GAAU,CAACC,EAAO,CAAC,IAAM,SAAY,CAC9C,GAAM,CAAE,YAAAC,EAAa,aAAAC,EAAc,UAAAC,EAAW,YAAAC,EAAa,UAAAC,EAAW,WAAAC,CAAW,EAAIN,EAC/EO,EAAcC,GAAeR,CAAI,EACvC,GAAI,CAACC,GAAe,CAACC,GAAgB,CAACC,GAAa,CAACC,GAAe,CAACE,EAAY,CAE5E,IAAMG,GADW,MAAMC,GAAgBV,CAAI,GAClBO,CAAW,EACpC,GAAI,CAACE,EACD,MAAM,IAAIE,EAAyB,WAAWJ,kBAA4B,EAE9E,GAAI,CAACK,GAAaH,CAAO,EACrB,MAAM,IAAIE,EAAyB,WAAWJ,2CAAqD,EAEvG,GAAIE,GAAA,MAAAA,EAAS,YAAa,CAEtB,IAAMI,GADc,MAAMC,GAAmBd,CAAI,GACrBS,EAAQ,WAAW,EACzCM,GAAc,8BAA8BR,qBAA+BE,EAAQ,cACzF,GAAIN,GAAaA,IAAcU,EAAQ,WACnC,MAAM,IAAIF,EAAyB,yBAA2BI,GAAa,EAAK,EAEpF,GAAId,GAAeA,IAAgBY,EAAQ,cACvC,MAAM,IAAIF,EAAyB,4BAA8BI,GAAa,EAAK,EAEvFN,EAAQ,WAAaI,EAAQ,WAC7BJ,EAAQ,cAAgBI,EAAQ,cAEpC,GAAM,CAAE,cAAAG,EAAe,eAAAC,EAAgB,WAAAC,EAAY,cAAAC,EAAe,YAAAC,CAAY,EAAIC,GAAmBZ,CAAO,EAC5G,OAAOa,GAAsB,CACzB,YAAaN,EACb,WAAYI,EACZ,aAAcH,EACd,UAAWC,EACX,YAAaC,EACb,UAAWd,EACX,QAASE,CACb,CAAC,MAEA,IAAI,CAACN,GAAe,CAACC,GAAgB,CAACC,GAAa,CAACC,EACrD,MAAM,IAAIO,EAAyB,8HAC4B,EAG/D,OAAOW,GAAsB,CACzB,YAAArB,EACA,WAAAK,EACA,aAAAJ,EACA,UAAAC,EACA,YAAAC,EACA,UAAAC,EACA,QAASE,CACb,CAAC,EAET,ECtDO,IAAMgB,GAAyBC,GAAS,CAC3C,GAAM,CAAE,cAAAC,EAAe,eAAAC,EAAgB,YAAAC,EAAa,WAAAC,EAAY,cAAAC,CAAc,EAAIC,GAAmBN,CAAI,EACzG,OAAOO,GAAQ,CACX,YAAaN,EACb,aAAcC,EACd,WAAYC,EACZ,UAAWC,EACX,YAAaC,CACjB,CAAC,EAAE,CACP,ECXO,IAAMG,GAAwBC,GAAQ,EAAQA,GACjD,OAAOA,GAAQ,UACf,OAAOA,EAAI,mBAAsB,UACjC,OAAOA,EAAI,uBAA0B,UACrC,CAAC,YAAa,QAAQ,EAAE,QAAQ,OAAOA,EAAI,iBAAiB,EAAI,GACvDC,GAA4BC,GAAY,QAAQ,QAAQ,CACjE,YAAaA,EAAQ,kBACrB,gBAAiBA,EAAQ,sBACzB,aAAcA,EAAQ,iBAC1B,CAAC,ECRD,OAAS,gBAAAC,OAAoB,KCAtB,IAAMC,GAAgBC,GAAS,IAAM,CACxC,GAAM,CAAE,QAAAC,EAAS,gBAAAC,EAAiB,iBAAAC,EAAkB,WAAAC,EAAY,WAAAC,EAAY,OAAAC,EAAQ,gBAAAC,EAAiB,2BAAAC,CAA4B,EAAIR,EACrI,GAAI,CAACQ,EACD,MAAM,IAAIC,EAAyB,aAAaR,0FACM,EAAK,EAE/D,OAAOO,EAA2B,CAC9B,QAASP,EACT,gBAAiBC,GAAmB,sBAAsB,KAAK,IAAI,IACnE,iBAAkBC,EAClB,WAAYC,EACZ,WAAYC,EACZ,OAAQC,EACR,gBAAiBC,CACrB,CAAC,CACL,EDbA,IAAMG,GAAiB,8BACjBC,GAAe,eACfC,GAAwB,wBACjBC,GAAgB,CAACC,EAAO,CAAC,IAAM,SACjCC,GAAiBD,CAAI,EAE1BC,GAAoBD,GAAS,CAC/B,IAAME,GAAuBF,GAAA,YAAAA,EAAM,uBAAwB,QAAQ,IAAIJ,EAAc,EAC/EO,GAAUH,GAAA,YAAAA,EAAM,UAAW,QAAQ,IAAIH,EAAY,EACnDO,GAAkBJ,GAAA,YAAAA,EAAM,kBAAmB,QAAQ,IAAIF,EAAqB,EAClF,GAAI,CAACI,GAAwB,CAACC,EAC1B,MAAM,IAAIE,EAAyB,0CAA0C,EAEjF,OAAOC,GAAa,CAChB,GAAGN,EACH,iBAAkBO,GAAaL,EAAsB,CAAE,SAAU,OAAQ,CAAC,EAC1E,QAAAC,EACA,gBAAAC,CACJ,CAAC,EAAE,CACP,EErBO,IAAMI,GAAwBC,GAAQ,EAAQA,GACjD,OAAOA,GAAQ,UACf,OAAOA,EAAI,yBAA4B,UACvC,OAAOA,EAAI,UAAa,UACxB,CAAC,YAAa,QAAQ,EAAE,QAAQ,OAAOA,EAAI,iBAAiB,EAAI,GACvDC,GAAgC,MAAOC,EAASC,IAAYC,GAAc,CACnF,qBAAsBF,EAAQ,wBAC9B,QAASA,EAAQ,SACjB,gBAAiBA,EAAQ,kBACzB,2BAA4BC,EAAQ,0BACxC,CAAC,EAAE,ECLI,IAAME,GAAqB,MAAOC,EAAaC,EAAUC,EAASC,EAAkB,CAAC,IAAM,CAC9F,IAAMC,EAAOH,EAASD,CAAW,EACjC,GAAI,OAAO,KAAKG,CAAe,EAAE,OAAS,GAAKE,GAAqBD,CAAI,EACpE,OAAOE,GAAyBF,CAAI,EAExC,GAAIG,GAAoBH,CAAI,EACxB,OAAOI,GAA6BR,EAAaC,EAAUC,EAASC,CAAe,EAEvF,GAAIE,GAAqBD,CAAI,EACzB,OAAOE,GAAyBF,CAAI,EAExC,GAAIK,GAAqBL,CAAI,EACzB,OAAOM,GAA8BN,EAAMF,CAAO,EAEtD,GAAIS,GAAiBP,CAAI,EACrB,OAAOQ,GAA0BV,EAASF,CAAW,EAEzD,GAAIa,GAAaT,CAAI,EACjB,OAAOU,GAAsBV,CAAI,EAErC,MAAM,IAAIW,EAAyB,WAAWf,4DAAsE,CACxH,ECzBO,IAAMgB,GAAU,CAACC,EAAO,CAAC,IAAM,SAAY,CAC9C,IAAMC,EAAW,MAAMC,GAAgBF,CAAI,EAC3C,OAAOG,GAAmBC,GAAeJ,CAAI,EAAGC,EAAUD,CAAI,CAClE,ECHO,IAAMK,GAAoB,4BACpBC,GAAkBC,GACvB,QAAQ,IAAIC,EAAqB,GAAK,QAAQ,IAAIC,EAAiB,EAC5DC,GAAsBH,CAAI,EAEjC,QAAQ,IAAIF,EAAiB,EACtB,SAAY,CACf,MAAM,IAAIM,EAAyB,+CAA+C,CACtF,EAEGC,GAAqBL,CAAI,ECJ7B,IAAMM,GAAkB,CAACC,EAAO,CAAC,IAAMC,GAAQC,GAAM,GAAIF,EAAK,SAAW,QAAQ,IAAIG,EAAW,EAAI,CAAC,EAAI,CAACC,GAAQ,CAAC,EAAIC,GAAQL,CAAI,EAAGM,GAAQN,CAAI,EAAGO,GAAYP,CAAI,EAAGQ,GAAcR,CAAI,EAAGS,GAAeT,CAAI,EAAG,SAAY,CAClO,MAAM,IAAIU,EAAyB,gDAAiD,EAAK,CAC7F,CAAC,EAAIC,GAAgBA,EAAY,aAAe,QAAaA,EAAY,WAAW,QAAQ,EAAI,KAAK,IAAI,EAAI,IAASA,GAAgBA,EAAY,aAAe,MAAS,ECV1K,IAAMC,GAAI,WAAYC,EAAI,OAAQC,EAAI,KAAMC,EAAI,OAAQC,GAAI,MAAOC,GAAI,aAAcC,GAAI,UACzF,IAA2BC,GAAI,kBAAmBC,GAAI,OAAQC,GAAI,gBAAiBC,EAAI,eAAgBC,GAAI,QAASC,GAAI,YAAaC,GAAI,MAAOC,EAAI,WAAYC,GAAI,mDAAoDC,GAAI,QAASC,GAAI,UAAWC,GAAI,CAAE,CAACC,EAAC,EAAG,GAAO,CAACC,CAAC,EAAG,QAAS,EAAGC,GAAI,CAAE,CAACF,EAAC,EAAG,GAAM,QAAW,GAAO,CAACC,CAAC,EAAG,SAAU,EAAGE,EAAI,CAAE,CAACC,EAAC,EAAG,QAAS,EAAGC,GAAI,CAAE,CAACD,EAAC,EAAG,SAAU,EAAGE,GAAI,CAAE,CAACF,EAAC,EAAG,cAAe,EAAGG,GAAI,CAAE,CAACC,CAAC,EAAG,QAAS,CAACC,CAAC,EAAG,CAAC,CAAE,CAACL,EAAC,EAAG,UAAW,CAAC,CAAE,EAAGM,GAAI,CAAE,CAACN,EAAC,EAAG,UAAW,EAAGO,EAAI,CAAE,IAAO,4BAA6B,CAACC,EAAC,EAAG,CAAE,YAAe,CAAC,CAAE,KAAQpB,GAAG,cAAiBC,GAAG,YAAeC,EAAE,CAAC,CAAE,EAAG,CAACmB,EAAC,EAAG,CAAC,CAAE,EAAGC,GAAI,CAAC,EAAGC,GAAI,CAAE,WAAc,CAAC,CAAE,CAACP,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,YAAY,CAAE,CAAC,EAAG,CAACR,CAAC,EAAGgB,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAGqB,GAAI,CAAE,CAACR,CAAC,EAAGlB,GAAG,CAACmB,CAAC,EAAG,CAACJ,GAAG,EAAI,CAAE,EAAGY,GAAI,CAAE,CAACT,CAAC,EAAGlB,GAAG,CAACmB,CAAC,EAAG,CAACH,GAAG,EAAI,CAAE,EAAGY,GAAI,CAAE,CAACV,CAAC,EAAGlB,GAAG,CAACmB,CAAC,EAAG,CAAC,GAAM,CAAE,CAACD,CAAC,EAAGV,GAAG,CAACW,CAAC,EAAG,CAAC,CAAE,CAACL,EAAC,EAAGhB,EAAE,EAAG,cAAc,CAAE,CAAC,CAAE,EAAG+B,GAAI,CAAE,CAACf,EAAC,EAAGhB,EAAE,EAAGgC,GAAI,CAAE,CAACZ,CAAC,EAAGlB,GAAG,CAACmB,CAAC,EAAG,CAAC,GAAM,CAAE,CAACD,CAAC,EAAGV,GAAG,CAACW,CAAC,EAAG,CAACU,GAAG,mBAAmB,CAAE,CAAC,CAAE,EAAGE,GAAI,CAAE,IAAOzB,GAAG,CAACgB,EAAC,EAAG,CAAC,EAAG,CAACC,EAAC,EAAG,CAAC,CAAE,EAAGS,GAAI,CAACZ,EAAC,EAAGa,GAAI,CAACP,EAAC,EAAGQ,GAAI,CAACP,EAAC,EACr9BQ,GAAQ,CAAE,QAAS,MAAO,WAAY,CAAE,OAAQ1B,GAAG,aAAcG,GAAG,QAASA,GAAG,SAAUH,GAAG,kBAAmBG,EAAE,EAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACM,CAAC,EAAG,gBAAiB,CAACC,CAAC,EAAG,CAACN,CAAC,EAAG,OAAQf,EAAE,CAAC,EAAG,CAACa,CAAC,EAAGZ,GAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACmB,CAAC,EAAGlB,GAAG,CAACmB,CAAC,EAAG,CAAC,CAAE,CAACL,EAAC,EAAG,mBAAoB,EAAG,EAAC,CAAE,EAAG,CAAE,CAACI,CAAC,EAAGlB,GAAG,CAACmB,CAAC,EAAG,CAACJ,GAAG,EAAC,CAAE,EAAG,CAAE,CAACG,CAAC,EAAGlB,GAAG,CAACmB,CAAC,EAAG,CAACH,GAAG,EAAC,CAAE,EAAG,CAAE,CAACE,CAAC,EAAG,MAAO,CAACC,CAAC,EAAG,CAACF,EAAC,CAAE,CAAC,EAAG,CAACN,CAAC,EAAGZ,GAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACmB,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,gBAAgB,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,YAAY,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,gBAAgB,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,gBAAgB,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAGoB,GAAG,CAAE,WAAY,CAAC,CAAE,CAACP,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,cAAc,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,cAAc,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,YAAY,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,WAAW,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,WAAW,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,WAAW,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,WAAW,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAGV,EAAC,CAAE,CAAC,EAAG,SAAUkB,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,WAAW,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,WAAW,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACa,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAACN,EAAG,WAAW,CAAE,CAAC,EAAG,SAAUQ,EAAG,CAACV,CAAC,EAAGN,CAAE,EAAG,CAAE,SAAU,CAAE,IAAKC,GAAG,CAACgB,EAAC,EAAG,CAAE,YAAa,CAAC,CAAE,KAAMpB,GAAG,cAAe,WAAY,YAAaE,EAAE,CAAC,CAAE,EAAG,CAACmB,EAAC,EAAGC,EAAE,EAAG,CAACb,CAAC,EAAGN,CAAE,CAAC,CAAE,EAAG,CAAE,WAAY,CAACY,GAAG,CAAE,CAACC,CAAC,EAAG,WAAY,CAACC,CAAC,EAAGa,GAAG,OAAQ,KAAM,CAAC,EAAG,CAACrB,CAAC,EAAGZ,GAAG,MAAO,CAAC,CAAE,WAAYkC,GAAG,MAAO,oEAAqE,CAACtB,CAAC,EAAGJ,EAAE,EAAG,CAAE,CAACI,CAAC,EAAGZ,GAAG,MAAO,CAAC,CAAE,WAAYmC,GAAG,MAAO,yEAA0E,CAACvB,CAAC,EAAGJ,EAAE,EAAG,CAAE,SAAU,CAAE,IAAKa,GAAG,CAACE,EAAC,EAAGE,GAAG,CAACD,EAAC,EAAGC,EAAE,EAAG,CAACb,CAAC,EAAGN,CAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,WAAY,CAACqB,GAAGC,EAAC,EAAG,CAAChB,CAAC,EAAGZ,GAAG,MAAO,CAAC,CAAE,WAAY,CAAC6B,GAAGE,EAAC,EAAG,CAACnB,CAAC,EAAGZ,GAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,iEAAkE,CAACuB,EAAC,EAAGE,GAAG,CAACD,EAAC,EAAGC,EAAE,EAAG,CAACb,CAAC,EAAGN,CAAE,CAAC,CAAE,EAAG,CAAE,MAAO,kFAAmF,CAACM,CAAC,EAAGJ,EAAE,CAAC,CAAE,EAAG,CAAE,WAAY0B,GAAG,CAACtB,CAAC,EAAGZ,GAAG,MAAO,CAAC,CAAE,WAAY,CAAC6B,EAAC,EAAG,CAACjB,CAAC,EAAGZ,GAAG,MAAO,CAAC,CAAE,CAACY,CAAC,EAAGZ,GAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACmB,CAAC,EAAGjB,EAAG,CAACkB,CAAC,EAAG,CAAC,aAAc,CAAE,CAACD,CAAC,EAAGV,GAAG,CAACW,CAAC,EAAG,CAACU,GAAG,MAAM,CAAE,CAAC,CAAE,CAAC,EAAG,SAAUE,GAAG,CAACpB,CAAC,EAAGN,CAAE,EAAG,CAAE,SAAU,CAAE,IAAK,wDAAyD,CAACiB,EAAC,EAAGE,GAAG,CAACD,EAAC,EAAGC,EAAE,EAAG,CAACb,CAAC,EAAGN,CAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,MAAO,2DAA4D,CAACM,CAAC,EAAGJ,EAAE,CAAC,CAAE,EAAG,CAAE,WAAY2B,GAAG,CAACvB,CAAC,EAAGZ,GAAG,MAAO,CAAC,CAAE,WAAY,CAAC+B,EAAC,EAAG,CAACnB,CAAC,EAAGZ,GAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,4DAA6D,CAACuB,EAAC,EAAGE,GAAG,CAACD,EAAC,EAAGC,EAAE,EAAG,CAACb,CAAC,EAAGN,CAAE,CAAC,CAAE,EAAG,CAAE,MAAO,qEAAsE,CAACM,CAAC,EAAGJ,EAAE,CAAC,CAAE,EAAG,CAAE,CAACI,CAAC,EAAGZ,GAAG,MAAO,CAAC0B,GAAG,CAAE,SAAUM,GAAG,CAACpB,CAAC,EAAGN,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,EAC55F+B,GAAUD,GCDhB,IAAME,GAA0B,CAACC,EAAgBC,EAAU,CAAC,IACxDC,GAAgBC,GAAS,CAC5B,eAAgBH,EAChB,OAAQC,EAAQ,MACpB,CAAC,ECDE,IAAMG,GAAoBC,IAAY,CACzC,WAAY,aACZ,eAAeA,GAAA,YAAAA,EAAQ,gBAAiBC,GACxC,eAAeD,GAAA,YAAAA,EAAQ,gBAAiBE,GACxC,mBAAmBF,GAAA,YAAAA,EAAQ,oBAAqB,GAChD,kBAAkBA,GAAA,YAAAA,EAAQ,mBAAoBG,GAC9C,QAAQH,GAAA,YAAAA,EAAQ,SAAU,IAAII,GAC9B,WAAWJ,GAAA,YAAAA,EAAQ,YAAa,MAChC,WAAWA,GAAA,YAAAA,EAAQ,YAAaK,EAChC,aAAaL,GAAA,YAAAA,EAAQ,cAAeM,GACpC,aAAaN,GAAA,YAAAA,EAAQ,cAAeO,EACxC,GCDO,IAAMC,GAAoBC,GAAW,CACxCC,GAAgC,QAAQ,OAAO,EAC/C,IAAMC,EAAeC,GAA0BH,CAAM,EAC/CI,EAAwB,IAAMF,EAAa,EAAE,KAAKG,EAAyB,EAC3EC,EAAqBP,GAAuBC,CAAM,EACxD,MAAO,CACH,GAAGM,EACH,GAAGN,EACH,QAAS,OACT,aAAAE,EACA,mBAAmBF,GAAA,YAAAA,EAAQ,oBAAqBO,GAChD,2BAA2BP,GAAA,YAAAA,EAAQ,4BAA6BQ,GAAkCC,EAAyB,EAC3H,0BAA0BT,GAAA,YAAAA,EAAQ,2BAC9BU,GAAiB,CAAE,UAAWJ,EAAmB,UAAW,cAAeK,GAAY,OAAQ,CAAC,EACpG,aAAaX,GAAA,YAAAA,EAAQ,cAAeY,EAAeC,EAA+B,EAClF,QAAQb,GAAA,YAAAA,EAAQ,SAAUY,EAAeE,GAA4BC,EAA+B,EACpG,gBAAgBf,GAAA,YAAAA,EAAQ,iBAAkB,IAAIgB,GAAeZ,CAAqB,EAClF,WAAWJ,GAAA,YAAAA,EAAQ,YACfY,EAAe,CACX,GAAGK,GACH,QAAS,UAAa,MAAMb,EAAsB,GAAG,WAAac,EACtE,CAAC,EACL,QAAQlB,GAAA,YAAAA,EAAQ,SAAUmB,GAAK,KAAK,KAAM,QAAQ,EAClD,iBAAiBnB,GAAA,YAAAA,EAAQ,kBAAmBoB,GAC5C,sBAAsBpB,GAAA,YAAAA,EAAQ,uBAAwBY,EAAeS,EAA0C,EAC/G,iBAAiBrB,GAAA,YAAAA,EAAQ,kBAAmBY,EAAeU,EAAqC,CACpG,CACJ,EC9BO,IAAMC,GAAN,cAAwBC,EAAS,CACpC,YAAYC,EAAe,CACvB,IAAMC,EAAYC,GAAmBF,CAAa,EAC5CG,EAAYC,GAAgCH,CAAS,EACrDI,EAAYC,GAAoBH,CAAS,EACzCI,EAAYC,GAAsBH,CAAS,EAC3CI,EAAYC,GAAmBH,CAAS,EACxCI,EAAoCF,EACpCG,EAAYC,GAAqBF,EAAW,CAAE,cAAeb,EAAU,CAAC,EACxEgB,EAAYC,GAAuBH,CAAS,EAClD,MAAME,CAAS,EACf,KAAK,OAASA,EACd,KAAK,gBAAgB,IAAIE,GAAe,KAAK,MAAM,CAAC,EACpD,KAAK,gBAAgB,IAAIC,GAAuB,KAAK,MAAM,CAAC,EAC5D,KAAK,gBAAgB,IAAIC,GAAoB,KAAK,MAAM,CAAC,EACzD,KAAK,gBAAgB,IAAIC,GAAgB,KAAK,MAAM,CAAC,EACrD,KAAK,gBAAgB,IAAIC,GAA4B,KAAK,MAAM,CAAC,EACjE,KAAK,gBAAgB,IAAIC,GAAmB,KAAK,MAAM,CAAC,CAC5D,CACA,SAAU,CACN,MAAM,QAAQ,CAClB,CACJ,EChCA,IAAMC,GAA+B,CAACC,EAAUC,IACvCA,EAGM,cAAoCD,CAAS,CAChD,YAAYE,EAAQ,CAChB,MAAMA,CAAM,EACZ,QAAWC,KAAiBF,EACxB,KAAK,gBAAgB,IAAIE,CAAa,CAE9C,CACJ,EATOH,EAWFI,GAAwB,CAACC,EAAa,CAAC,EAAGC,IAAeF,GAAyBC,EAAYN,GAA6BQ,GAAWD,CAAU,CAAC,EACjJE,GAAuC,CAACH,EAAa,CAAC,EAAGC,IAAeE,GAAwCH,EAAYN,GAA6BQ,GAAWD,CAAU,CAAC,EAC/KG,GAAqCC,GAAcC,GAAUD,EAAS,CAC/E,YAAaN,GAAsBO,CAAK,EACxC,2BAA4BH,GAAqCG,CAAK,EACtE,GAAGA,CACP,CAAC,ECrBD,IAAMC,GAAI,WAAYC,GAAI,KAAMC,GAAI,OAAQC,GAAI,MAC1CC,GAAI,QAASC,EAAI,OAAQC,GAAI,QAASC,GAAI,WAAYC,GAAI,kBAAmBC,GAAI,UAAWC,GAAI,CAAE,CAACV,EAAC,EAAG,GAAO,KAAQ,QAAS,EAAGW,GAAI,CAAE,CAACX,EAAC,EAAG,GAAM,QAAW,GAAO,KAAQ,SAAU,EAAGY,GAAI,CAAE,CAACT,EAAC,EAAG,UAAW,EAAGU,GAAI,CAAE,CAACZ,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAG,SAAU,EAAG,EAAI,CAAE,EAAGW,GAAI,CAAE,CAACb,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAG,cAAe,EAAG,EAAI,CAAE,EAAGY,GAAI,CAAC,EAAGC,GAAI,CAAE,CAACf,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,GAAM,CAAE,CAACD,EAAC,EAAGQ,GAAG,CAACP,EAAC,EAAG,CAAC,CAAE,CAACC,EAAC,EAAGK,EAAE,EAAG,cAAc,CAAE,CAAC,CAAE,EAAGS,GAAI,CAAE,CAACd,EAAC,EAAGK,EAAE,EAAGU,GAAI,CAAE,CAACjB,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,GAAM,CAAE,CAACD,EAAC,EAAGQ,GAAG,CAACP,EAAC,EAAG,CAACe,GAAG,mBAAmB,CAAE,CAAC,CAAE,EAAGE,GAAI,CAACN,EAAC,EAAGO,GAAI,CAACN,EAAC,EAAGO,GAAI,CAAC,CAAE,CAAClB,EAAC,EAAG,QAAS,CAAC,EACtkBmB,GAAQ,CAAE,QAAS,MAAO,WAAY,CAAE,OAAQZ,GAAG,aAAcC,GAAG,QAASA,GAAG,SAAUD,EAAE,EAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACT,EAAC,EAAGG,GAAG,CAACF,EAAC,EAAG,CAACU,EAAC,CAAE,CAAC,EAAG,KAAMP,EAAG,MAAO,CAAC,CAAE,WAAYc,GAAG,MAAO,oEAAqE,KAAMb,EAAE,EAAG,CAAE,KAAMD,EAAG,MAAO,CAAC,CAAE,WAAYe,GAAG,MAAO,yEAA0E,KAAMd,EAAE,EAAG,CAAE,SAAU,CAAE,IAAKM,GAAG,WAAYG,GAAG,QAASA,EAAE,EAAG,KAAMR,EAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,KAAMF,EAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACJ,EAAC,EAAGG,GAAG,CAACF,EAAC,EAAGmB,EAAE,CAAC,EAAG,KAAMhB,EAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACJ,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAGmB,GAAG,OAAQb,EAAE,CAAC,EAAG,KAAMH,EAAG,MAAO,CAAC,CAAE,WAAY,CAACQ,GAAGC,EAAC,EAAG,KAAMT,EAAG,MAAO,CAAC,CAAE,WAAY,CAACW,GAAGE,EAAC,EAAG,KAAMb,EAAG,MAAO,CAAC,CAAE,KAAMA,EAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,iEAAkE,WAAYU,GAAG,QAASA,EAAE,EAAG,KAAMR,EAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,MAAO,kFAAmF,KAAMD,EAAE,CAAC,CAAE,EAAG,CAAE,WAAYa,GAAG,KAAMd,EAAG,MAAO,CAAC,CAAE,WAAY,CAACW,EAAC,EAAG,KAAMX,EAAG,MAAO,CAAC,CAAE,KAAMA,EAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACJ,EAAC,EAAG,eAAgB,CAACC,EAAC,EAAG,CAAC,aAAc,CAAE,CAACD,EAAC,EAAGQ,GAAG,CAACP,EAAC,EAAG,CAACe,GAAG,MAAM,CAAE,CAAC,CAAE,CAAC,EAAG,SAAU,CAAE,IAAK,qCAAsC,WAAYF,GAAG,QAASA,EAAE,EAAG,KAAMR,EAAE,EAAG,CAAE,SAAU,CAAE,IAAK,wDAAyD,WAAYQ,GAAG,QAASA,EAAE,EAAG,KAAMR,EAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,MAAO,2DAA4D,KAAMD,EAAE,CAAC,CAAE,EAAG,CAAE,WAAYc,GAAG,KAAMf,EAAG,MAAO,CAAC,CAAE,WAAY,CAACa,EAAC,EAAG,KAAMb,EAAG,MAAO,CAAC,CAAE,KAAMA,EAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,4DAA6D,WAAYU,GAAG,QAASA,EAAE,EAAG,KAAMR,EAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,MAAO,qEAAsE,KAAMD,EAAE,CAAC,CAAE,EAAG,CAAE,KAAMD,EAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,mDAAoD,WAAYU,GAAG,QAASA,EAAE,EAAG,KAAMR,EAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,MAAO,wCAAyC,KAAMD,EAAE,CAAC,CAAE,CAAC,CAAE,EACv4DiB,GAAUD,GCDhB,IAAME,GAA0B,CAACC,EAAgBC,EAAU,CAAC,IACxDC,GAAgBC,GAAS,CAC5B,eAAgBH,EAChB,OAAQC,EAAQ,MACpB,CAAC,ECDE,IAAMG,GAAoBC,IAAY,CACzC,WAAY,aACZ,eAAeA,GAAA,YAAAA,EAAQ,gBAAiBC,GACxC,eAAeD,GAAA,YAAAA,EAAQ,gBAAiBE,GACxC,mBAAmBF,GAAA,YAAAA,EAAQ,oBAAqB,GAChD,kBAAkBA,GAAA,YAAAA,EAAQ,mBAAoBG,GAC9C,QAAQH,GAAA,YAAAA,EAAQ,SAAU,IAAII,GAC9B,WAAWJ,GAAA,YAAAA,EAAQ,YAAa,MAChC,WAAWA,GAAA,YAAAA,EAAQ,YAAaK,EAChC,aAAaL,GAAA,YAAAA,EAAQ,cAAeM,GACpC,aAAaN,GAAA,YAAAA,EAAQ,cAAeO,EACxC,GCDO,IAAMC,GAAoBC,GAAW,CACxCC,GAAgC,QAAQ,OAAO,EAC/C,IAAMC,EAAeC,GAA0BH,CAAM,EAC/CI,EAAwB,IAAMF,EAAa,EAAE,KAAKG,EAAyB,EAC3EC,EAAqBP,GAAuBC,CAAM,EACxD,MAAO,CACH,GAAGM,EACH,GAAGN,EACH,QAAS,OACT,aAAAE,EACA,mBAAmBF,GAAA,YAAAA,EAAQ,oBAAqBO,GAChD,2BAA2BP,GAAA,YAAAA,EAAQ,4BAA6BQ,GAAkCC,EAAyB,EAC3H,0BAA0BT,GAAA,YAAAA,EAAQ,2BAC9BU,GAAiB,CAAE,UAAWJ,EAAmB,UAAW,cAAeK,GAAY,OAAQ,CAAC,EACpG,aAAaX,GAAA,YAAAA,EAAQ,cAAeY,EAAeC,EAA+B,EAClF,QAAQb,GAAA,YAAAA,EAAQ,SAAUY,EAAeE,GAA4BC,EAA+B,EACpG,gBAAgBf,GAAA,YAAAA,EAAQ,iBAAkB,IAAIgB,GAAeZ,CAAqB,EAClF,WAAWJ,GAAA,YAAAA,EAAQ,YACfY,EAAe,CACX,GAAGK,GACH,QAAS,UAAa,MAAMb,EAAsB,GAAG,WAAac,EACtE,CAAC,EACL,QAAQlB,GAAA,YAAAA,EAAQ,SAAUmB,GAAK,KAAK,KAAM,QAAQ,EAClD,iBAAiBnB,GAAA,YAAAA,EAAQ,kBAAmBoB,GAC5C,sBAAsBpB,GAAA,YAAAA,EAAQ,uBAAwBY,EAAeS,EAA0C,EAC/G,iBAAiBrB,GAAA,YAAAA,EAAQ,kBAAmBY,EAAeU,EAAqC,CACpG,CACJ,EC9BO,IAAMC,GAAN,cAAwBC,EAAS,CACpC,YAAYC,EAAe,CACvB,IAAMC,EAAYC,GAAmBF,CAAa,EAC5CG,EAAYC,GAAgCH,CAAS,EACrDI,EAAYC,GAAoBH,CAAS,EACzCI,EAAYC,GAAsBH,CAAS,EAC3CI,EAAYC,GAAmBH,CAAS,EACxCI,EAAoCF,EACpCG,EAAYC,GAAqBF,CAAS,EAC1CG,EAAYC,GAAuBH,CAAS,EAClD,MAAME,CAAS,EACf,KAAK,OAASA,EACd,KAAK,gBAAgB,IAAIE,GAAe,KAAK,MAAM,CAAC,EACpD,KAAK,gBAAgB,IAAIC,GAAuB,KAAK,MAAM,CAAC,EAC5D,KAAK,gBAAgB,IAAIC,GAAoB,KAAK,MAAM,CAAC,EACzD,KAAK,gBAAgB,IAAIC,GAAgB,KAAK,MAAM,CAAC,EACrD,KAAK,gBAAgB,IAAIC,GAA4B,KAAK,MAAM,CAAC,EACjE,KAAK,gBAAgB,IAAIC,GAAiB,KAAK,MAAM,CAAC,EACtD,KAAK,gBAAgB,IAAIC,GAAmB,KAAK,MAAM,CAAC,CAC5D,CACA,SAAU,CACN,MAAM,QAAQ,CAClB,CACJ,ECnCO,IAAMC,GAAmCC,IACrC,CACH,GAAGA,EACH,qBAAsBA,EAAQ,sBAAwB,GACtD,gBAAiBA,EAAQ,iBAAmB,GAC5C,mBAAoB,MACxB,GCNJ,IAAAC,GAAA,CACE,KAAQ,kCACR,YAAe,sFACf,QAAW,UACX,QAAW,CACT,MAAS,mEACT,YAAa,2BACb,aAAc,UACd,WAAY,0BACZ,qBAAsB,mEACtB,cAAe,6BACf,wBAAyB,4CACzB,MAAS,0CACT,eAAgB,4BAChB,kBAAmB,2EACrB,EACA,KAAQ,sBACR,MAAS,0BACT,OAAU,qBACV,YAAe,GACf,aAAgB,CACd,6BAA8B,QAC9B,wBAAyB,QACzB,sBAAuB,UACvB,2BAA4B,UAC5B,oCAAqC,UACrC,8BAA+B,UAC/B,qBAAsB,UACtB,8BAA+B,UAC/B,qCAAsC,UACtC,+BAAgC,UAChC,kCAAmC,UACnC,6BAA8B,UAC9B,0CAA2C,UAC3C,4BAA6B,UAC7B,4BAA6B,UAC7B,8BAA+B,UAC/B,4BAA6B,UAC7B,iCAAkC,UAClC,gCAAiC,UACjC,6BAA8B,UAC9B,yBAA0B,UAC1B,yBAA0B,UAC1B,iBAAkB,UAClB,sBAAuB,UACvB,uBAAwB,UACxB,oCAAqC,UACrC,iCAAkC,UAClC,sCAAuC,UACvC,mCAAoC,UACpC,0BAA2B,UAC3B,sBAAuB,UACvB,mCAAoC,UACpC,gCAAiC,UACjC,qBAAsB,UACtB,MAAS,QACX,EACA,gBAAmB,CACjB,kDAAmD,UACnD,mBAAoB,QACpB,cAAe,YACf,aAAgB,QAChB,gBAAiB,SACjB,OAAU,QACV,QAAW,UACX,WAAc,QAChB,EACA,QAAW,CACT,KAAQ,UACV,EACA,cAAiB,CACf,OAAQ,CACN,eAAgB,CACd,oBACF,CACF,CACF,EACA,MAAS,CACP,WACF,EACA,OAAU,CACR,KAAQ,8BACR,IAAO,oCACT,EACA,QAAW,aACX,QAAW,CACT,0BAA2B,iCAC7B,EACA,eAAgB,CACd,0BAA2B,gCAC7B,EACA,SAAY,gFACZ,WAAc,CACZ,KAAQ,MACR,IAAO,2CACP,UAAa,gCACf,CACF,ECjGA,IAAMC,GAAI,KAAMC,GAAI,OAAQC,GAAI,MAChC,IAA2BC,GAAI,SAAUC,GAAI,kBAAmBC,GAAI,OAAQC,GAAI,QAASC,GAAI,WAAYC,GAAI,eAAgBC,GAAI,CAAE,SAAY,GAAM,QAAW,GAAO,KAAQ,SAAU,EAAGC,GAAI,CAAE,CAACC,EAAC,EAAG,QAAS,EAAGC,GAAI,CAAE,CAACD,EAAC,EAAG,UAAW,EAAGE,GAAI,CAAE,CAACC,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,CAAE,CAACJ,EAAC,EAAG,SAAU,EAAG,EAAI,CAAE,EAAGK,GAAI,CAAE,CAACF,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,CAAE,CAACJ,EAAC,EAAG,cAAe,EAAG,EAAI,CAAE,EAAGM,GAAI,CAAC,EAAGC,GAAI,CAAE,CAACJ,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,GAAM,CAAE,CAACD,EAAC,EAAG,UAAW,CAACC,EAAC,EAAG,CAAC,CAAE,CAACJ,EAAC,EAAGP,EAAE,EAAG,cAAc,CAAE,CAAC,CAAE,EAAGe,GAAI,CAAE,CAACL,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAAC,GAAM,CAAE,CAACD,EAAC,EAAG,UAAW,CAACC,EAAC,EAAG,CAAC,CAAE,CAACJ,EAAC,EAAGP,EAAE,EAAG,mBAAmB,CAAE,CAAC,CAAE,EAAGgB,GAAI,CAACP,EAAC,EAAGQ,GAAI,CAACL,EAAC,EACzkBM,GAAQ,CAAE,QAAS,MAAO,WAAY,CAAE,OAAQ,CAAE,SAAU,GAAG,KAAMnB,EAAE,EAAG,aAAcM,GAAG,QAASA,GAAG,SAAU,CAAE,SAAU,GAAG,KAAMN,EAAE,CAAE,EAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACW,EAAC,EAAG,gBAAiB,CAACC,EAAC,EAAG,CAACL,EAAC,EAAG,OAAQN,EAAE,CAAC,EAAG,KAAMC,GAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACS,EAAC,EAAG,QAAS,CAACC,EAAC,EAAG,CAACH,EAAC,CAAE,CAAC,EAAG,KAAMP,GAAG,MAAO,CAAC,CAAE,WAAYe,GAAG,MAAO,oEAAqE,KAAMd,EAAE,EAAG,CAAE,KAAMD,GAAG,MAAO,CAAC,CAAE,WAAYgB,GAAG,MAAO,yEAA0E,KAAMf,EAAE,EAAG,CAAE,SAAU,CAAE,IAAKM,GAAG,WAAYK,GAAG,QAASA,EAAE,EAAG,KAAMV,EAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,WAAY,CAACM,GAAGG,EAAC,EAAG,KAAMX,GAAG,MAAO,CAAC,CAAE,WAAY,CAACa,GAAGC,EAAC,EAAG,KAAMd,GAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,kEAAmE,WAAYY,GAAG,QAASA,EAAE,EAAG,KAAMV,EAAE,CAAC,CAAE,EAAG,CAAE,MAAO,kFAAmF,KAAMD,EAAE,CAAC,CAAE,EAAG,CAAE,WAAYc,GAAG,KAAMf,GAAG,MAAO,CAAC,CAAE,WAAY,CAACa,EAAC,EAAG,KAAMb,GAAG,MAAO,CAAC,CAAE,KAAMA,GAAG,MAAO,CAAC,CAAE,WAAY,CAAC,CAAE,CAACS,EAAC,EAAGN,GAAG,CAACO,EAAC,EAAG,CAACL,GAAG,eAAe,CAAE,CAAC,EAAG,SAAU,CAAE,IAAK,2CAA4C,WAAYO,GAAG,QAASA,EAAE,EAAG,KAAMV,EAAE,EAAG,CAAE,WAAY,CAAC,CAAE,CAACO,EAAC,EAAGN,GAAG,CAACO,EAAC,EAAG,CAACL,GAAG,eAAe,CAAE,CAAC,EAAG,SAAU,CAAE,IAAK,2CAA4C,WAAYO,GAAG,QAASA,EAAE,EAAG,KAAMV,EAAE,EAAG,CAAE,SAAU,CAAE,IAAK,yDAA0D,WAAYU,GAAG,QAASA,EAAE,EAAG,KAAMV,EAAE,CAAC,CAAE,CAAC,CAAE,EAAG,CAAE,MAAO,2DAA4D,KAAMD,EAAE,CAAC,CAAE,EAAG,CAAE,WAAYe,GAAG,KAAMhB,GAAG,MAAO,CAAC,CAAE,WAAY,CAACc,EAAC,EAAG,KAAMd,GAAG,MAAO,CAAC,CAAE,SAAU,CAAE,IAAK,6DAA8D,WAAYY,GAAG,QAASA,EAAE,EAAG,KAAMV,EAAE,CAAC,CAAE,EAAG,CAAE,MAAO,qEAAsE,KAAMD,EAAE,CAAC,CAAE,EAAG,CAAE,SAAU,CAAE,IAAK,oDAAqD,WAAYW,GAAG,QAASA,EAAE,EAAG,KAAMV,EAAE,CAAC,CAAE,CAAC,CAAE,EACj3DgB,GAAUD,GCDhB,IAAME,GAA0B,CAACC,EAAgBC,EAAU,CAAC,IACxDC,GAAgBC,GAAS,CAC5B,eAAgBH,EAChB,OAAQC,EAAQ,MACpB,CAAC,ECDE,IAAMG,GAAoBC,IAAY,CACzC,WAAY,aACZ,eAAeA,GAAA,YAAAA,EAAQ,gBAAiBC,GACxC,eAAeD,GAAA,YAAAA,EAAQ,gBAAiBE,GACxC,mBAAmBF,GAAA,YAAAA,EAAQ,oBAAqB,GAChD,kBAAkBA,GAAA,YAAAA,EAAQ,mBAAoBG,GAC9C,QAAQH,GAAA,YAAAA,EAAQ,SAAU,IAAII,GAC9B,WAAWJ,GAAA,YAAAA,EAAQ,YAAa,kBAChC,WAAWA,GAAA,YAAAA,EAAQ,YAAaK,EAChC,aAAaL,GAAA,YAAAA,EAAQ,cAAeM,GACpC,aAAaN,GAAA,YAAAA,EAAQ,cAAeO,EACxC,GCDO,IAAMC,GAAoBC,GAAW,CACxCC,GAAgC,QAAQ,OAAO,EAC/C,IAAMC,EAAeC,GAA0BH,CAAM,EAC/CI,EAAwB,IAAMF,EAAa,EAAE,KAAKG,EAAyB,EAC3EC,EAAqBP,GAAuBC,CAAM,EACxD,MAAO,CACH,GAAGM,EACH,GAAGN,EACH,QAAS,OACT,aAAAE,EACA,mBAAmBF,GAAA,YAAAA,EAAQ,oBAAqBO,GAChD,2BAA2BP,GAAA,YAAAA,EAAQ,4BAA6BQ,GAAkCC,EAAyB,EAC3H,0BAA0BT,GAAA,YAAAA,EAAQ,2BAC9BU,GAAiB,CAAE,UAAWJ,EAAmB,UAAW,cAAeK,GAAY,OAAQ,CAAC,EACpG,aAAaX,GAAA,YAAAA,EAAQ,cAAeY,EAAeC,EAA+B,EAClF,QAAQb,GAAA,YAAAA,EAAQ,SAAUY,EAAeE,GAA4BC,EAA+B,EACpG,gBAAgBf,GAAA,YAAAA,EAAQ,iBAAkB,IAAIgB,GAAeZ,CAAqB,EAClF,WAAWJ,GAAA,YAAAA,EAAQ,YACfY,EAAe,CACX,GAAGK,GACH,QAAS,UAAa,MAAMb,EAAsB,GAAG,WAAac,EACtE,CAAC,EACL,QAAQlB,GAAA,YAAAA,EAAQ,SAAUmB,GAAK,KAAK,KAAM,QAAQ,EAClD,iBAAiBnB,GAAA,YAAAA,EAAQ,kBAAmBoB,GAC5C,sBAAsBpB,GAAA,YAAAA,EAAQ,uBAAwBY,EAAeS,EAA0C,EAC/G,iBAAiBrB,GAAA,YAAAA,EAAQ,kBAAmBY,EAAeU,EAAqC,CACpG,CACJ,EC9BO,IAAMC,GAAN,cAAmCC,EAAS,CAC/C,YAAYC,EAAe,CACvB,IAAMC,EAAYC,GAAmBF,CAAa,EAC5CG,EAAYC,GAAgCH,CAAS,EACrDI,EAAYC,GAAoBH,CAAS,EACzCI,EAAYC,GAAsBH,CAAS,EAC3CI,EAAYC,GAAmBH,CAAS,EACxCI,EAAoCF,EACpCG,EAAYC,GAAqBF,CAAS,EAC1CG,EAAYC,GAAuBH,CAAS,EAClD,MAAME,CAAS,EACf,KAAK,OAASA,EACd,KAAK,gBAAgB,IAAIE,GAAe,KAAK,MAAM,CAAC,EACpD,KAAK,gBAAgB,IAAIC,GAAuB,KAAK,MAAM,CAAC,EAC5D,KAAK,gBAAgB,IAAIC,GAAoB,KAAK,MAAM,CAAC,EACzD,KAAK,gBAAgB,IAAIC,GAAgB,KAAK,MAAM,CAAC,EACrD,KAAK,gBAAgB,IAAIC,GAA4B,KAAK,MAAM,CAAC,EACjE,KAAK,gBAAgB,IAAIC,GAAiB,KAAK,MAAM,CAAC,EACtD,KAAK,gBAAgB,IAAIC,GAAmB,KAAK,MAAM,CAAC,CAC5D,CACA,SAAU,CACN,MAAM,QAAQ,CAClB,CACJ,EClCO,IAAMC,GAAN,cAA6CC,EAAmB,CACnE,YAAYC,EAAS,CACjB,MAAMA,CAAO,EACb,OAAO,eAAe,KAAMF,GAA+B,SAAS,CACxE,CACJ,ECLO,IAAMG,GAAN,cAAwCC,EAAgB,CAC3D,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,4BACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,4BACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMF,GAA0B,SAAS,CACnE,CACJ,EAaO,IAAMG,GAAN,cAAwCC,EAAgB,CAC3D,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,4BACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,4BACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMF,GAA0B,SAAS,CACnE,CACJ,EACaG,GAAN,cAA0CF,EAAgB,CAC7D,YAAYC,EAAM,CACd,MAAM,CACF,KAAM,8BACN,OAAQ,SACR,GAAGA,CACP,CAAC,EACD,KAAK,KAAO,8BACZ,KAAK,OAAS,SACd,OAAO,eAAe,KAAMC,GAA4B,SAAS,CACrE,CACJ,ECgHO,IAAMC,GAAyB,MAAOC,EAAOC,IAAY,CAC5D,IAAMC,EAAUC,GAAc,cAAc,EACxCC,EACJ,OAAAA,EAAO,KAAK,UAAUC,EAAML,CAAK,CAAC,EAC3BM,GAAoBL,EAASC,EAAS,IAAK,OAAWE,CAAI,CACrE,EAwlCO,IAAMG,GAAyB,MAAOC,EAAQC,IAAY,CAC7D,GAAID,EAAO,YAAc,IACrB,OAAOE,GAA4BF,EAAQC,CAAO,EAEtD,IAAME,EAAO,MAAMC,GAAUJ,EAAO,KAAMC,CAAO,EAC7CI,EAAW,CAAC,EAChB,OAAAA,EAAWC,EAAMH,CAAI,EACJ,CACb,UAAWI,GAAoBP,CAAM,EACrC,GAAGK,CACP,CAEJ,EACMH,GAA8B,MAAOF,EAAQC,IAAY,CAC3D,IAAMO,EAAe,CACjB,GAAGR,EACH,KAAM,MAAMS,GAAeT,EAAO,KAAMC,CAAO,CACnD,EACMS,EAAYC,GAAsBX,EAAQQ,EAAa,IAAI,EACjE,OAAQE,EAAW,CACf,IAAK,4BACL,IAAK,yDACD,MAAM,MAAME,GAAgCJ,EAAcP,CAAO,EACrE,IAAK,4BACL,IAAK,yDACD,MAAM,MAAMY,GAAgCL,EAAcP,CAAO,EACrE,IAAK,8BACL,IAAK,2DACD,MAAM,MAAMa,GAAkCN,EAAcP,CAAO,EACvE,QACI,IAAMc,EAAaP,EAAa,KAChC,OAAOQ,GAAkB,CACrB,OAAAhB,EACA,WAAAe,EACA,UAAAL,CACJ,CAAC,CACT,CACJ,EA0zBA,IAAMO,GAAkC,MAAOC,EAAcC,IAAY,CACrE,IAAMC,EAAOF,EAAa,KACpBG,EAAeC,EAAMF,CAAI,EACzBG,EAAY,IAAIC,GAA0B,CAC5C,UAAWC,GAAoBP,CAAY,EAC3C,GAAGG,CACP,CAAC,EACD,OAAOK,EAA2BH,EAAWH,CAAI,CACrD,EA8CA,IAAMO,GAAkC,MAAOC,EAAcC,IAAY,CACrE,IAAMC,EAAOF,EAAa,KACpBG,EAAeC,EAAMF,CAAI,EACzBG,EAAY,IAAIC,GAA0B,CAC5C,UAAWC,GAAoBP,CAAY,EAC3C,GAAGG,CACP,CAAC,EACD,OAAOK,EAA2BH,EAAWH,CAAI,CACrD,EACMO,GAAoC,MAAOT,EAAcC,IAAY,CACvE,IAAMC,EAAOF,EAAa,KACpBG,EAAeC,EAAMF,CAAI,EACzBG,EAAY,IAAIK,GAA4B,CAC9C,UAAWH,GAAoBP,CAAY,EAC3C,GAAGG,CACP,CAAC,EACD,OAAOK,EAA2BH,EAAWH,CAAI,CACrD,EAmGA,IAAMS,GAAuBC,IAAY,CACrC,eAAgBA,EAAO,WACvB,UAAWA,EAAO,QAAQ,kBAAkB,GAAKA,EAAO,QAAQ,mBAAmB,GAAKA,EAAO,QAAQ,kBAAkB,EACzH,kBAAmBA,EAAO,QAAQ,YAAY,EAC9C,KAAMA,EAAO,QAAQ,aAAa,CACtC,GACMC,GAAc,CAACC,EAAa,IAAI,WAAcC,IAC5CD,aAAsB,WACf,QAAQ,QAAQA,CAAU,EAE9BC,EAAQ,gBAAgBD,CAAU,GAAK,QAAQ,QAAQ,IAAI,UAAY,EAE5EE,GAAoB,CAACF,EAAYC,IAAYF,GAAYC,EAAYC,CAAO,EAAE,KAAME,GAASF,EAAQ,YAAYE,CAAI,CAAC,EACtHC,GAAoBC,GAAkBC,EAAe,EACrDC,GAAsB,MAAON,EAASO,EAASC,EAAMC,EAAkBP,IAAS,CAClF,GAAM,CAAE,SAAAQ,EAAU,SAAAC,EAAW,QAAS,KAAAC,EAAM,KAAMC,CAAS,EAAI,MAAMb,EAAQ,SAAS,EAChFc,EAAW,CACb,SAAAH,EACA,SAAAD,EACA,KAAAE,EACA,OAAQ,OACR,KAAMC,EAAS,SAAS,GAAG,EAAIA,EAAS,MAAM,EAAG,EAAE,EAAIL,EAAOK,EAAWL,EACzE,QAAAD,CACJ,EACA,OAAIE,IAAqB,SACrBK,EAAS,SAAWL,GAEpBP,IAAS,SACTY,EAAS,KAAOZ,GAEb,IAAIa,EAAcD,CAAQ,CACrC,EACA,SAASE,GAAcC,EAAW,CAC9B,MAAO,CACH,eAAgB,6BAChB,eAAgB,iBAAiBA,GACrC,CACJ,CACA,IAAMC,GAAY,CAACnB,EAAYC,IAAYC,GAAkBF,EAAYC,CAAO,EAAE,KAAMmB,GAChFA,EAAQ,OACD,KAAK,MAAMA,CAAO,EAEtB,CAAC,CACX,EACKC,GAAiB,MAAOC,EAAWrB,IAAY,CACjD,IAAMsB,EAAQ,MAAMJ,GAAUG,EAAWrB,CAAO,EAChD,OAAAsB,EAAM,QAAUA,EAAM,SAAWA,EAAM,QAChCA,CACX,EACMC,GAAwB,CAAC1B,EAAQ2B,IAAS,CAC5C,IAAMC,EAAU,CAACC,EAAQC,IAAQ,OAAO,KAAKD,CAAM,EAAE,KAAME,GAAMA,EAAE,YAAY,IAAMD,EAAI,YAAY,CAAC,EAChGE,EAAqBC,GAAa,CACpC,IAAIC,EAAaD,EACjB,OAAI,OAAOC,GAAe,WACtBA,EAAaA,EAAW,SAAS,GAEjCA,EAAW,QAAQ,GAAG,GAAK,IAC3BA,EAAaA,EAAW,MAAM,GAAG,EAAE,CAAC,GAEpCA,EAAW,QAAQ,GAAG,GAAK,IAC3BA,EAAaA,EAAW,MAAM,GAAG,EAAE,CAAC,GAEpCA,EAAW,QAAQ,GAAG,GAAK,IAC3BA,EAAaA,EAAW,MAAM,GAAG,EAAE,CAAC,GAEjCA,CACX,EACMC,EAAYP,EAAQ5B,EAAO,QAAS,kBAAkB,EAC5D,GAAImC,IAAc,OACd,OAAOH,EAAkBhC,EAAO,QAAQmC,CAAS,CAAC,EAEtD,GAAIR,EAAK,OAAS,OACd,OAAOK,EAAkBL,EAAK,IAAI,EAEtC,GAAIA,EAAK,SAAc,OACnB,OAAOK,EAAkBL,EAAK,MAAS,CAE/C,EC/0EO,IAAMS,GAAN,cAAkCC,CAAS,CAC9C,OAAO,kCAAmC,CACtC,MAAO,CACH,QAAS,CAAE,KAAM,gBAAiB,KAAM,iBAAkB,EAC1D,SAAU,CAAE,KAAM,gBAAiB,KAAM,UAAW,EACpD,OAAQ,CAAE,KAAM,gBAAiB,KAAM,QAAS,EAChD,aAAc,CAAE,KAAM,gBAAiB,KAAM,sBAAuB,CACxE,CACJ,CACA,YAAYC,EAAO,CACf,MAAM,EACN,KAAK,MAAQA,CACjB,CACA,kBAAkBC,EAAaC,EAAeC,EAAS,CACnD,KAAK,gBAAgB,IAAIC,EAAeF,EAAe,KAAK,UAAW,KAAK,WAAW,CAAC,EACxF,KAAK,gBAAgB,IAAIG,EAAkBH,EAAeJ,GAAoB,iCAAiC,CAAC,CAAC,EACjH,IAAMQ,EAAQL,EAAY,OAAO,KAAK,eAAe,EAC/C,CAAE,OAAAM,CAAO,EAAIL,EAGbM,EAA0B,CAC5B,OAAAD,EACA,WAJe,uBAKf,YAJgB,sBAKhB,wBAA0BE,GAAMA,EAChC,yBAA2BA,GAAMA,CACrC,EACM,CAAE,eAAAC,CAAe,EAAIR,EAC3B,OAAOI,EAAM,QAASK,GAAYD,EAAe,OAAOC,EAAQ,QAASR,GAAW,CAAC,CAAC,EAAGK,CAAuB,CACpH,CACA,UAAUR,EAAOY,EAAS,CACtB,OAAOC,GAAuBb,EAAOY,CAAO,CAChD,CACA,YAAYE,EAAQF,EAAS,CACzB,OAAOG,GAAuBD,EAAQF,CAAO,CACjD,CACJ,ECtCA,IAAMI,GAAa,CAACC,EAAS,IAAMC,GAAQ,QAAUA,EAAOD,KAEtDE,GAAc,CAACF,EAAS,IAAMC,GAAQ,QAAU,GAAKD,OAAYC,KAEjEE,GAAc,CAACH,EAAS,IAAM,CAACI,EAAKC,EAAOC,IAAS,QAAU,GAAKN,OAAYI,KAAOC,KAASC,KAE/FC,EAAS,CACd,SAAU,CACT,MAAO,CAAC,EAAG,CAAC,EAEZ,KAAM,CAAC,EAAG,EAAE,EACZ,IAAK,CAAC,EAAG,EAAE,EACX,OAAQ,CAAC,EAAG,EAAE,EACd,UAAW,CAAC,EAAG,EAAE,EACjB,SAAU,CAAC,GAAI,EAAE,EACjB,QAAS,CAAC,EAAG,EAAE,EACf,OAAQ,CAAC,EAAG,EAAE,EACd,cAAe,CAAC,EAAG,EAAE,CACtB,EACA,MAAO,CACN,MAAO,CAAC,GAAI,EAAE,EACd,IAAK,CAAC,GAAI,EAAE,EACZ,MAAO,CAAC,GAAI,EAAE,EACd,OAAQ,CAAC,GAAI,EAAE,EACf,KAAM,CAAC,GAAI,EAAE,EACb,QAAS,CAAC,GAAI,EAAE,EAChB,KAAM,CAAC,GAAI,EAAE,EACb,MAAO,CAAC,GAAI,EAAE,EAGd,YAAa,CAAC,GAAI,EAAE,EACpB,KAAM,CAAC,GAAI,EAAE,EACb,KAAM,CAAC,GAAI,EAAE,EACb,UAAW,CAAC,GAAI,EAAE,EAClB,YAAa,CAAC,GAAI,EAAE,EACpB,aAAc,CAAC,GAAI,EAAE,EACrB,WAAY,CAAC,GAAI,EAAE,EACnB,cAAe,CAAC,GAAI,EAAE,EACtB,WAAY,CAAC,GAAI,EAAE,EACnB,YAAa,CAAC,GAAI,EAAE,CACrB,EACA,QAAS,CACR,QAAS,CAAC,GAAI,EAAE,EAChB,MAAO,CAAC,GAAI,EAAE,EACd,QAAS,CAAC,GAAI,EAAE,EAChB,SAAU,CAAC,GAAI,EAAE,EACjB,OAAQ,CAAC,GAAI,EAAE,EACf,UAAW,CAAC,GAAI,EAAE,EAClB,OAAQ,CAAC,GAAI,EAAE,EACf,QAAS,CAAC,GAAI,EAAE,EAGhB,cAAe,CAAC,IAAK,EAAE,EACvB,OAAQ,CAAC,IAAK,EAAE,EAChB,OAAQ,CAAC,IAAK,EAAE,EAChB,YAAa,CAAC,IAAK,EAAE,EACrB,cAAe,CAAC,IAAK,EAAE,EACvB,eAAgB,CAAC,IAAK,EAAE,EACxB,aAAc,CAAC,IAAK,EAAE,EACtB,gBAAiB,CAAC,IAAK,EAAE,EACzB,aAAc,CAAC,IAAK,EAAE,EACtB,cAAe,CAAC,IAAK,EAAE,CACxB,CACD,EAEaC,GAAgB,OAAO,KAAKD,EAAO,QAAQ,EAC3CE,GAAuB,OAAO,KAAKF,EAAO,KAAK,EAC/CG,GAAuB,OAAO,KAAKH,EAAO,OAAO,EACjDI,GAAa,CAAC,GAAGF,GAAsB,GAAGC,EAAoB,EAE3E,SAASE,IAAiB,CACzB,IAAMC,EAAQ,IAAI,IAElB,OAAW,CAACC,EAAWC,CAAK,IAAK,OAAO,QAAQR,CAAM,EAAG,CACxD,OAAW,CAACS,EAAWC,CAAK,IAAK,OAAO,QAAQF,CAAK,EACpDR,EAAOS,CAAS,EAAI,CACnB,KAAM,QAAUC,EAAM,CAAC,KACvB,MAAO,QAAUA,EAAM,CAAC,IACzB,EAEAF,EAAMC,CAAS,EAAIT,EAAOS,CAAS,EAEnCH,EAAM,IAAII,EAAM,CAAC,EAAGA,EAAM,CAAC,CAAC,EAG7B,OAAO,eAAeV,EAAQO,EAAW,CACxC,MAAOC,EACP,WAAY,EACb,CAAC,EAGF,cAAO,eAAeR,EAAQ,QAAS,CACtC,MAAOM,EACP,WAAY,EACb,CAAC,EAEDN,EAAO,MAAM,MAAQ,WACrBA,EAAO,QAAQ,MAAQ,WAEvBA,EAAO,MAAM,KAAOR,GAAW,EAC/BQ,EAAO,MAAM,QAAUL,GAAY,EACnCK,EAAO,MAAM,QAAUJ,GAAY,EACnCI,EAAO,QAAQ,KAAOR,GAAW,EAAsB,EACvDQ,EAAO,QAAQ,QAAUL,GAAY,EAAsB,EAC3DK,EAAO,QAAQ,QAAUJ,GAAY,EAAsB,EAG3D,OAAO,iBAAiBI,EAAQ,CAC/B,aAAc,CACb,MAAO,CAACH,EAAKC,EAAOC,IAGfF,IAAQC,GAASA,IAAUC,EAC1BF,EAAM,EACF,GAGJA,EAAM,IACF,IAGD,KAAK,OAAQA,EAAM,GAAK,IAAO,EAAE,EAAI,IAGtC,GACH,GAAK,KAAK,MAAMA,EAAM,IAAM,CAAC,EAC7B,EAAI,KAAK,MAAMC,EAAQ,IAAM,CAAC,EAC/B,KAAK,MAAMC,EAAO,IAAM,CAAC,EAE7B,WAAY,EACb,EACA,SAAU,CACT,MAAOY,GAAO,CACb,IAAMC,EAAU,yBAAyB,KAAKD,EAAI,SAAS,EAAE,CAAC,EAC9D,GAAI,CAACC,EACJ,MAAO,CAAC,EAAG,EAAG,CAAC,EAGhB,GAAI,CAACC,CAAW,EAAID,EAEhBC,EAAY,SAAW,IAC1BA,EAAc,CAAC,GAAGA,CAAW,EAAE,IAAIC,GAAaA,EAAYA,CAAS,EAAE,KAAK,EAAE,GAG/E,IAAMC,EAAU,OAAO,SAASF,EAAa,EAAE,EAE/C,MAAO,CAELE,GAAW,GAAM,IACjBA,GAAW,EAAK,IACjBA,EAAU,GAEX,CACD,EACA,WAAY,EACb,EACA,aAAc,CACb,MAAOJ,GAAOX,EAAO,aAAa,GAAGA,EAAO,SAASW,CAAG,CAAC,EACzD,WAAY,EACb,EACA,cAAe,CACd,MAAOjB,GAAQ,CACd,GAAIA,EAAO,EACV,MAAO,IAAKA,EAGb,GAAIA,EAAO,GACV,MAAO,KAAMA,EAAO,GAGrB,IAAIG,EACAC,EACAC,EAEJ,GAAIL,GAAQ,IACXG,IAASH,EAAO,KAAO,GAAM,GAAK,IAClCI,EAAQD,EACRE,EAAOF,MACD,CACNH,GAAQ,GAER,IAAMsB,EAAYtB,EAAO,GAEzBG,EAAM,KAAK,MAAMH,EAAO,EAAE,EAAI,EAC9BI,EAAQ,KAAK,MAAMkB,EAAY,CAAC,EAAI,EACpCjB,EAAQiB,EAAY,EAAK,EAG1B,IAAMC,EAAQ,KAAK,IAAIpB,EAAKC,EAAOC,CAAI,EAAI,EAE3C,GAAIkB,IAAU,EACb,MAAO,IAIR,IAAIC,EAAS,IAAO,KAAK,MAAMnB,CAAI,GAAK,EAAM,KAAK,MAAMD,CAAK,GAAK,EAAK,KAAK,MAAMD,CAAG,GAEtF,OAAIoB,IAAU,IACbC,GAAU,IAGJA,CACR,EACA,WAAY,EACb,EACA,UAAW,CACV,MAAO,CAACrB,EAAKC,EAAOC,IAASC,EAAO,cAAcA,EAAO,aAAaH,EAAKC,EAAOC,CAAI,CAAC,EACvF,WAAY,EACb,EACA,UAAW,CACV,MAAOY,GAAOX,EAAO,cAAcA,EAAO,aAAaW,CAAG,CAAC,EAC3D,WAAY,EACb,CACD,CAAC,EAEMX,CACR,CAEA,IAAMmB,GAAad,GAAe,EAE3Be,GAAQD,G1Q/Mf,IAAME,GAAM,IAAIC,GAAU,CAAC,CAAC,EACtBC,GAAiB,IAAIC,GAAqB,CAAC,CAAC,EAhBlDC,GAkBA,GAAI,CACF,IAAMC,KAAU,YAAS,UAAW,CAAE,SAAU,EAAK,CAAC,EAChDC,KAAa,YAAS,aAAa,GAAK,QAAQ,IAAI,wBACpDC,KAAa,mBAAgB,YAAY,EACzCC,KAAe,mBAAgB,gBAAgB,EAOrD,GALIF,IAAe,YACjB,aAAU,MAAM,kCAAkC,CAAC,EACnD,QAAQ,KAAK,CAAC,GAGZE,EAAc,IAChB,QAAK,yCAAyC,EAC9C,IAAMC,EAAQC,GAAY,OAAM,QAAK,kBAAkB,EAAG,GAAM,EAChED,EAAM,MAAM,EAEZ,MAAME,GAAaL,CAAU,EAE7BM,GAAcH,CAAK,KACnB,QAAK,sBAAsB,EAG7B,IAAMI,EAAkBN,EAAa,0BAA4B,qBAE3DO,EAAsB,MAAMd,GAAI,KACpC,IAAIe,GAAmB,CACrB,aAAcF,EACd,YAAa,CAACP,CAAU,EACxB,WAAY,CAAE,SAAU,CAACD,CAAO,CAAE,EAClC,uBAAwB,CAAE,wBAAyB,EAAK,CAC1D,CAAC,CACH,KAEI,WAAQ,MACV,SAAM,sBAAsBW,GAAQF,CAAmB,GAAG,EAG5D,IAAMG,GAAYb,GAAAU,EAAoB,UAApB,YAAAV,GAA6B,UAE1Ca,OACH,aAAU,MAAM,+DAA+D,CAAC,EAChF,QAAQ,KAAK,CAAC,MAGhB,QAAK,sDAAsD,EAC3D,IAAMR,EAAQC,GAAY,OAAM,QAAK,kBAAkB,EAAG,GAAM,EAChED,EAAM,MAAM,EAEZ,IAAMS,EAAW,MAAMC,GAA8Bb,EAAYW,CAAS,EAQ1E,GANAL,GAAcH,CAAK,KACnB,QAAK,qDAAqDS,EAAS,QAAU,kCAAkC,EAG/G,MAAME,GAAU,KAAK,GAAI,EAErBF,EAAS,sBAAuB,CAClC,IAAMG,EAAW,MAAMC,GAAeJ,EAAU,QAAQ,EACxDK,GAAaF,EAAS,KAAK,EAAE,EAAG,QAAQ,EAG1C,GAAIH,EAAS,qBAAsB,CACjC,IAAMG,EAAW,MAAMC,GAAeJ,EAAU,QAAQ,EACxDK,GAAaF,EAAS,KAAK,EAAE,EAAG,QAAQ,EAGtC,CAACH,EAAS,uBAAyB,CAACA,EAAS,yBAC/C,QAAKM,GAAO,KAAK,KAAOA,GAAO,KAAK,KAAO,kBAAkB,EAG3DN,EAAS,eAAiB,WAC5B,aAAU,YAAaA,EAAS,YAAY,KAG9C,QAAK,2DAA2DA,EAAS,cAAgB,aAAa,CACxG,OAASO,EAAP,CACIA,aAAe,UAAO,aAAUA,CAAG,CACzC,CAEA,eAAed,GAAaL,EAAoBoB,EAAI,EAAkB,CAjGtE,IAAAtB,EAAAuB,EAkGE,IAAMT,EAAW,MAAMlB,GAAI,KACzB,IAAI4B,GAAmC,CACrC,QAAS,CACP,CACE,IAAK,cACL,OAAQ,CAACtB,CAAU,CACrB,CACF,CACF,CAAC,CACH,EAMA,MAJI,WAAQ,MACV,SAAM,sCAAsCU,GAAQE,CAAQ,GAAG,IAG7DS,GAAAvB,EAAAc,EAAS,0BAAT,YAAAd,EAAmC,KAAnC,YAAAuB,EAAuC,cAAe,SACxD,aAAMP,GAAU,KAAK,GAAI,EAClBT,GAAaL,EAAYoB,EAAI,CAAC,CAEzC,CAEA,eAAeP,GACbb,EACAW,EAC4C,CAC5C,MAAMG,GAAU,KAAK,GAAI,EAEzB,IAAMF,EAAW,MAAMlB,GAAI,KACzB,IAAI6B,GAA4B,CAC9B,WAAYvB,EACZ,UAAWW,CACb,CAAC,CACH,EAMA,SAJI,WAAQ,MACV,SAAM,+BAA+BD,GAAQE,CAAQ,GAAG,EAGtDA,EAAS,QAAU,CAAC,UAAW,SAAU,YAAa,UAAU,EAAE,SAASA,EAAS,MAAM,EACrFA,EAGFC,GAA8Bb,EAAYW,CAAS,CAC5D,CAEA,SAASM,GAAaO,EAAiBC,EAA6B,CAClE,IAAMC,EAAQD,IAAW,SAAWP,GAAO,KAAK,KAAOA,GAAO,IAAI,KAAOA,GAAO,KAAK,QACrF,QAAKQ,EAAQ,eAAeD,EAAO,YAAY,iBAAiB,EAChED,EACG,KAAK,EACL,MAAM,OAAO,EACb,QAASG,MAAS,QAAKD,EAAQC,CAAI,CAAC,KACvC,QAAKD,EAAQ,aAAaD,EAAO,YAAY,iBAAiB,CAChE,CAEA,eAAeT,GACbY,EACAH,EACAI,EACmB,CACnB,GAAM,CAAE,aAAAC,EAAc,UAAAC,EAAW,WAAAC,EAAY,WAAAC,CAAW,EAAIL,EAE5D,GAAI,CAACE,EACH,MAAM,MAAM,4BAA4B,EAG1C,GAAI,CAACC,EACH,MAAM,MAAM,yBAAyB,EAGvC,GAAI,CAACC,EACH,MAAM,MAAM,0BAA0B,EAGxC,GAAI,CAACC,EACH,MAAM,MAAM,0BAA0B,EAGxC,IAAMrB,EAAW,MAAMhB,GAAe,KACpC,IAAIsC,GAAoB,CACtB,aAAc,YAAcJ,EAC5B,cAAe,GAAGC,KAAaC,KAAcC,EAAW,QAAQ,IAAK,GAAG,KAAKR,IAC7E,cAAe,GACf,UAAWI,CACb,CAAC,CACH,KAEI,WAAQ,MACV,SAAM,8BAA8BnB,GAAQE,CAAQ,GAAG,EAGzD,IAAMuB,GAAUvB,EAAS,QAAU,CAAC,GAAG,IAAKwB,GAAMA,EAAE,OAAO,EAAE,OAAQC,GAAmBA,IAAM,MAAS,EAEvG,OAAOR,IAAUjB,EAAS,iBACtBuB,EACAA,EAAO,OAAO,MAAMnB,GAAeY,EAAyBH,EAAQb,EAAS,gBAAgB,CAAC,CACpG",
  "names": ["toCommandValue", "input", "exports", "toCommandProperties", "annotationProperties", "os", "__importStar", "utils_1", "issueCommand", "command", "properties", "message", "cmd", "Command", "exports", "issue", "name", "CMD_STRING", "cmdStr", "first", "key", "val", "escapeProperty", "escapeData", "s", "crypto", "rng", "poolPtr", "rnds8Pool", "init_rng", "__esmMin", "regex_default", "init_regex", "__esmMin", "validate", "uuid", "regex_default", "validate_default", "init_validate", "__esmMin", "init_regex", "stringify", "arr", "offset", "uuid", "byteToHex", "validate_default", "stringify_default", "init_stringify", "__esmMin", "init_validate", "i", "v1", "options", "buf", "offset", "i", "b", "node", "_nodeId", "clockseq", "_clockseq", "seedBytes", "rng", "msecs", "nsecs", "_lastNSecs", "dt", "_lastMSecs", "tl", "tmh", "n", "stringify_default", "v1_default", "init_v1", "__esmMin", "init_rng", "init_stringify", "parse", "uuid", "validate_default", "v", "arr", "parse_default", "init_parse", "__esmMin", "init_validate", "stringToBytes", "str", "bytes", "i", "v35_default", "name", "version", "hashfunc", "generateUUID", "value", "namespace", "buf", "offset", "parse_default", "stringify_default", "DNS", "URL", "init_v35", "__esmMin", "init_stringify", "init_parse", "crypto", "md5", "bytes", "md5_default", "init_md5", "__esmMin", "v3", "v3_default", "init_v3", "__esmMin", "init_v35", "init_md5", "v35_default", "md5_default", "v4", "options", "buf", "offset", "rnds", "rng", "i", "stringify_default", "v4_default", "init_v4", "__esmMin", "init_rng", "init_stringify", "crypto", "sha1", "bytes", "sha1_default", "init_sha1", "__esmMin", "v5", "v5_default", "init_v5", "__esmMin", "init_v35", "init_sha1", "v35_default", "sha1_default", "nil_default", "init_nil", "__esmMin", "version", "uuid", "validate_default", "version_default", "init_version", "__esmMin", "init_validate", "esm_node_exports", "__export", "nil_default", "parse_default", "stringify_default", "v1_default", "v3_default", "v4_default", "v5_default", "validate_default", "version_default", "init_esm_node", "__esmMin", "init_v1", "init_v3", "init_v4", "init_v5", "init_nil", "init_version", "init_validate", "init_stringify", "init_parse", "fs", "__importStar", "os", "uuid_1", "utils_1", "issueFileCommand", "command", "message", "filePath", "exports", "prepareKeyValueMessage", "key", "value", "delimiter", "convertedValue", "getProxyUrl", "reqUrl", "usingSsl", "checkBypass", "proxyVar", "exports", "reqHost", "isLoopbackAddress", "noProxy", "reqPort", "upperReqHosts", "upperNoProxyItem", "x", "host", "hostLower", "require_tunnel", "__commonJSMin", "exports", "net", "tls", "http", "https", "events", "assert", "util", "httpOverHttp", "httpsOverHttp", "httpOverHttps", "httpsOverHttps", "options", "agent", "TunnelingAgent", "createSecureSocket", "self", "socket", "host", "port", "localAddress", "toOptions", "i", "len", "pending", "req", "mergeOptions", "onFree", "onCloseOrRemove", "err", "cb", "placeholder", "connectOptions", "debug", "connectReq", "onResponse", "onUpgrade", "onConnect", "onError", "res", "head", "error", "cause", "pos", "hostHeader", "tlsOptions", "secureSocket", "target", "overrides", "keys", "j", "keyLen", "k", "args", "require_tunnel", "__commonJSMin", "exports", "module", "http", "__importStar", "https", "pm", "tunnel", "HttpCodes", "exports", "Headers", "MediaTypes", "getProxyUrl", "serverUrl", "proxyUrl", "HttpRedirectCodes", "HttpResponseRetryCodes", "RetryableHttpVerbs", "ExponentialBackoffCeiling", "ExponentialBackoffTimeSlice", "HttpClientError", "message", "statusCode", "HttpClientResponse", "resolve", "__awaiter", "output", "chunk", "isHttps", "requestUrl", "HttpClient", "userAgent", "handlers", "requestOptions", "additionalHeaders", "data", "verb", "stream", "res", "obj", "headers", "parsedUrl", "info", "maxTries", "numTries", "response", "authenticationHandler", "handler", "redirectsRemaining", "redirectUrl", "parsedRedirectUrl", "header", "reject", "callbackForResult", "err", "onResult", "callbackCalled", "handleResult", "req", "msg", "socket", "sock", "method", "usingSsl", "defaultPort", "lowercaseKeys", "_default", "clientHeader", "agent", "useProxy", "maxSockets", "agentOptions", "tunnelAgent", "overHttps", "options", "retryNumber", "ms", "dateTimeDeserializer", "key", "value", "a", "contents", "c", "k", "BasicCredentialHandler", "username", "password", "options", "exports", "BearerCredentialHandler", "token", "PersonalAccessTokenCredentialHandler", "http_client_1", "auth_1", "core_1", "OidcClient", "allowRetry", "maxRetry", "requestOptions", "token", "runtimeUrl", "id_token_url", "id_token", "_a", "error", "audience", "encodedAudience", "exports", "os_1", "fs_1", "access", "appendFile", "writeFile", "exports", "Summary", "pathFromEnv", "tag", "content", "attrs", "htmlAttrs", "key", "value", "options", "overwrite", "filePath", "text", "addEOL", "code", "lang", "element", "items", "ordered", "listItems", "item", "rows", "tableBody", "row", "cells", "cell", "header", "data", "colspan", "rowspan", "label", "src", "alt", "width", "height", "level", "allowedTag", "cite", "href", "_summary", "path", "__importStar", "toPosixPath", "pth", "exports", "toWin32Path", "toPlatformPath", "command_1", "file_command_1", "utils_1", "os", "__importStar", "path", "oidc_utils_1", "ExitCode", "exports", "exportVariable", "name", "val", "convertedVal", "setSecret", "secret", "addPath", "inputPath", "getInput", "options", "getMultilineInput", "inputs", "x", "input", "getBooleanInput", "trueValue", "falseValue", "setOutput", "value", "setCommandEcho", "enabled", "setFailed", "message", "error", "isDebug", "debug", "properties", "warning", "notice", "info", "startGroup", "endGroup", "group", "fn", "result", "saveState", "getState", "getIDToken", "aud", "summary_1", "summary_2", "path_utils_1", "require_util", "__commonJSMin", "exports", "nameStartChar", "nameChar", "nameRegexp", "regexName", "getAllMatches", "string", "regex", "matches", "match", "allmatches", "len", "index", "isName", "v", "obj", "target", "a", "arrayMode", "keys", "i", "require_validator", "__commonJSMin", "exports", "util", "defaultOptions", "xmlData", "options", "tags", "tagFound", "reachedRoot", "i", "readPI", "tagStartPos", "readCommentAndCDATA", "closingTag", "tagName", "validateTagName", "msg", "getErrorObject", "getLineNumberForPosition", "result", "readAttributeStr", "attrStr", "attrStrStart", "isValid", "validateAttributeString", "otg", "openPos", "afterAmp", "validateAmpersand", "isWhiteSpace", "t", "char", "start", "tagname", "angleBracketsCount", "doubleQuote", "singleQuote", "startChar", "tagClosed", "validAttrStrRegxp", "matches", "attrNames", "getPositionFromMatch", "attrName", "validateAttrName", "validateNumberAmpersand", "re", "count", "code", "message", "lineNumber", "index", "lines", "match", "require_OptionsBuilder", "__commonJSMin", "exports", "defaultOptions", "tagName", "val", "attrName", "buildOptions", "options", "require_xmlNode", "__commonJSMin", "exports", "module", "XmlNode", "tagname", "key", "val", "node", "require_DocTypeReader", "__commonJSMin", "exports", "module", "readDocType", "xmlData", "i", "entities", "angleBracketsCount", "hasBody", "entity", "comment", "exp", "parseEntityExp", "entityRegex", "match", "require_strnum", "__commonJSMin", "exports", "module", "hexRegex", "numRegex", "consider", "toNumber", "str", "options", "trimmedStr", "match", "sign", "leadingZeros", "numTrimmedByZeros", "trimZeros", "eNotation", "num", "numStr", "require_OrderedObjParser", "__commonJSMin", "exports", "module", "util", "xmlNode", "readDocType", "toNumber", "regx", "OrderedObjParser", "options", "addExternalEntities", "parseXml", "parseTextData", "resolveNameSpace", "buildAttributesMap", "isItStopNode", "replaceEntitiesValue", "readStopNodeData", "saveTextToParentTag", "externalEntities", "entKeys", "i", "ent", "val", "tagName", "jPath", "dontTrim", "hasAttributes", "isLeafNode", "escapeEntities", "newval", "parseValue", "tagname", "tags", "prefix", "attrsRegx", "attrStr", "matches", "len", "attrs", "attrName", "oldVal", "aName", "newVal", "attrCollection", "xmlData", "xmlObj", "currentNode", "textData", "closeIndex", "findClosingIndex", "colonIndex", "tagData", "readTagExp", "childNode", "endIndex", "comment", "result", "tagExp", "attrExpPresent", "lastTag", "tagContent", "entityName", "entity", "stopNodes", "currentTagName", "allNodesExp", "stopNodePath", "stopNodeExp", "tagExpWithClosingIndex", "closingChar", "attrBoundary", "index", "ch", "str", "errMsg", "closingIndex", "removeNSPrefix", "separatorIndex", "startIndex", "openTagCount", "shouldParse", "require_node2json", "__commonJSMin", "exports", "prettify", "node", "options", "compress", "arr", "jPath", "text", "compressedObj", "i", "tagObj", "property", "propName", "newJpath", "val", "isLeaf", "isLeafTag", "assignAttributes", "obj", "keys", "key", "attrMap", "jpath", "len", "atrrName", "propCount", "require_XMLParser", "__commonJSMin", "exports", "module", "buildOptions", "OrderedObjParser", "prettify", "validator", "XMLParser", "options", "xmlData", "validationOption", "result", "orderedObjParser", "orderedResult", "key", "value", "require_orderedJs2Xml", "__commonJSMin", "exports", "module", "EOL", "toXml", "jArray", "options", "indentation", "arrToStr", "arr", "jPath", "xmlStr", "isPreviousElementTag", "i", "tagObj", "tagName", "propName", "newJPath", "tagText", "isStopNode", "replaceEntitiesValue", "attStr", "attr_to_str", "tempInd", "piTextNodeName", "newIdentation", "tagStart", "tagValue", "obj", "keys", "key", "attrMap", "attrStr", "attr", "attrVal", "index", "textValue", "entity", "require_json2xml", "__commonJSMin", "exports", "module", "buildFromOrderedJs", "defaultOptions", "key", "a", "attrName", "Builder", "options", "isAttribute", "processTextOrObjNode", "indentate", "jObj", "level", "attrStr", "val", "attr", "newval", "arrLen", "j", "item", "Ks", "L", "object", "result", "tagEndExp", "piClosingChar", "closeTag", "textValue", "i", "entity", "name", "require_fxp", "__commonJSMin", "exports", "module", "validator", "XMLParser", "XMLBuilder", "import_core", "setInterval", "clearInterval", "scheduler", "inspect", "NoOpLogger", "constructStack", "absoluteEntries", "relativeEntries", "entriesNameSet", "sort", "entries", "a", "b", "stepWeights", "priorityWeights", "removeByName", "toRemove", "isRemoved", "filterCb", "entry", "removeByReference", "cloneTo", "toStack", "expandRelativeMiddlewareList", "from", "expandedMiddlewareList", "getMiddlewareList", "debug", "normalizedAbsoluteEntries", "normalizedRelativeEntries", "normalizedEntriesNameMap", "normalizedEntry", "toMiddleware", "wholeList", "expendedMiddlewareList", "stack", "middleware", "options", "name", "override", "toOverrideIndex", "toOverride", "plugin", "tags", "cloned", "mw", "handler", "context", "Client", "config", "constructStack", "command", "optionsOrCb", "cb", "options", "callback", "handler", "result", "err", "Command", "constructStack", "SENSITIVE_STRING", "expectBoolean", "value", "logger", "stackTraceWarning", "lower", "expectNumber", "parsed", "MAX_FLOAT", "expectFloat32", "expected", "expectLong", "expectInt32", "value", "expectSizedInt", "expectShort", "expectByte", "size", "expected", "expectLong", "castInt", "expectNonNull", "location", "expectObject", "receivedType", "expectString", "logger", "stackTraceWarning", "strictParseDouble", "value", "expectNumber", "parseNumber", "strictParseFloat32", "value", "expectFloat32", "parseNumber", "NUMBER_REGEX", "matches", "strictParseInt32", "value", "expectInt32", "parseNumber", "strictParseShort", "expectShort", "strictParseByte", "expectByte", "stackTraceWarning", "message", "s", "logger", "MONTHS", "RFC3339", "RFC3339_WITH_OFFSET", "parseRfc3339DateTimeWithOffset", "value", "match", "_", "yearStr", "monthStr", "dayStr", "hours", "minutes", "seconds", "fractionalMilliseconds", "offsetStr", "year", "strictParseShort", "stripLeadingZeroes", "month", "parseDateValue", "day", "date", "buildDate", "parseOffsetToMilliseconds", "IMF_FIXDATE", "RFC_850_DATE", "ASC_TIME", "parseEpochTimestamp", "value", "valueAsDouble", "strictParseDouble", "buildDate", "year", "month", "day", "time", "adjustedMonth", "validateDayOfMonth", "parseDateValue", "parseMilliseconds", "FIFTY_YEARS_IN_MILLIS", "DAYS_IN_MONTH", "validateDayOfMonth", "year", "month", "day", "maxDays", "isLeapYear", "MONTHS", "parseDateValue", "value", "type", "lower", "upper", "dateVal", "strictParseByte", "stripLeadingZeroes", "parseMilliseconds", "strictParseFloat32", "parseOffsetToMilliseconds", "directionStr", "direction", "hour", "minute", "idx", "ServiceException", "options", "decorateServiceException", "exception", "additions", "v", "k", "message", "throwDefaultError", "output", "parsedBody", "exceptionCtor", "errorCode", "$metadata", "deserializeMetadata", "statusCode", "response", "decorateServiceException", "withBaseException", "ExceptionCtor", "loadConfigsForDefaultMode", "mode", "warningEmitted", "emitWarningIfUnsupportedVersion", "version", "extendedEncodeURIComponent", "str", "c", "getValueFromTextNode", "obj", "textNodeName", "key", "StringWrapper", "Class", "Constructor", "instance", "map", "arg0", "arg1", "arg2", "target", "filter", "instructions", "mapWithFilter", "key", "applyInstruction", "take", "source", "instructions", "out", "key", "applyInstruction", "mapWithFilter", "target", "filter", "map", "_instructions", "value", "targetKey", "instruction", "nonNullish", "valueFn", "pass", "sourceKey", "_value", "defaultFilterPassed", "customFilterPassed", "_", "_json", "obj", "_", "target", "key", "resolveParamsForS3", "endpointParams", "bucket", "isArnBucketName", "isDnsCompatibleBucketName", "DOMAIN_PATTERN", "IP_ADDRESS_PATTERN", "DOTS_PATTERN", "isDnsCompatibleBucketName", "bucketName", "DOMAIN_PATTERN", "IP_ADDRESS_PATTERN", "DOTS_PATTERN", "isArnBucketName", "arn", "partition", "service", "region", "account", "typeOrId", "isArn", "isValidArn", "createConfigValueProvider", "configKey", "canonicalEndpointParamKey", "config", "configProvider", "configValue", "endpoint", "protocol", "hostname", "port", "path", "getEndpointFromInstructions", "commandInput", "instructionsSupplier", "clientConfig", "context", "endpointParams", "resolveParams", "_a", "instructions", "name", "instruction", "createConfigValueProvider", "resolveParamsForS3", "parseQueryString", "querystring", "query", "pair", "key", "value", "parseUrl", "url", "hostname", "pathname", "port", "protocol", "search", "query", "parseQueryString", "toEndpointV1", "endpoint", "parseUrl", "endpointMiddleware", "config", "instructions", "next", "context", "args", "_a", "_b", "endpoint", "getEndpointFromInstructions", "authScheme", "deserializerMiddleware", "options", "deserializer", "next", "context", "args", "response", "parsed", "error", "hint", "serializerMiddleware", "options", "serializer", "next", "context", "args", "_a", "endpoint", "request", "deserializerMiddlewareOption", "serializerMiddlewareOption", "getSerdePlugin", "config", "serializer", "deserializer", "commandStack", "deserializerMiddleware", "serializerMiddleware", "endpointMiddlewareOptions", "serializerMiddlewareOption", "getEndpointPlugin", "config", "instructions", "clientStack", "endpointMiddleware", "normalizeProvider", "input", "promisified", "resolveEndpointConfig", "input", "tls", "endpoint", "customEndpointProvider", "toEndpointV1", "normalizeProvider", "FieldPosition", "HttpRequest", "options", "request", "req", "cloned", "cloneQuery", "query", "carry", "paramName", "param", "HttpResponse", "options", "response", "resp", "SSMServiceException", "ServiceException", "options", "InternalServerError", "SSMServiceException", "opts", "DuplicateInstanceId", "SSMServiceException", "opts", "InvalidCommandId", "InvalidInstanceId", "InvalidParameters", "SSMServiceException", "opts", "InvalidDocument", "SSMServiceException", "opts", "InvalidDocumentVersion", "UnsupportedPlatformType", "SSMServiceException", "opts", "MaxDocumentSizeExceeded", "SSMServiceException", "opts", "InvalidNextToken", "SSMServiceException", "opts", "InvalidFilterKey", "SSMServiceException", "opts", "InvalidInstanceInformationFilterValue", "SSMServiceException", "opts", "InvalidPluginName", "SSMServiceException", "opts", "InvocationDoesNotExist", "InvalidNotificationConfig", "SSMServiceException", "opts", "InvalidOutputFolder", "InvalidRole", "CommandFilterSensitiveLog", "obj", "SENSITIVE_STRING", "SendCommandRequestFilterSensitiveLog", "obj", "SENSITIVE_STRING", "SendCommandResultFilterSensitiveLog", "CommandFilterSensitiveLog", "se_DescribeInstanceInformationCommand", "input", "context", "headers", "sharedHeaders", "body", "_json", "buildHttpRpcRequest", "se_GetCommandInvocationCommand", "input", "context", "headers", "sharedHeaders", "body", "_json", "buildHttpRpcRequest", "se_SendCommandCommand", "input", "context", "headers", "sharedHeaders", "body", "_json", "buildHttpRpcRequest", "de_DescribeInstanceInformationCommand", "output", "context", "de_DescribeInstanceInformationCommandError", "data", "parseBody", "contents", "de_DescribeInstanceInformationResult", "deserializeMetadata", "parsedOutput", "parseErrorBody", "errorCode", "loadRestJsonErrorCode", "de_InternalServerErrorRes", "de_InvalidFilterKeyRes", "de_InvalidInstanceIdRes", "de_InvalidInstanceInformationFilterValueRes", "de_InvalidNextTokenRes", "parsedBody", "throwDefaultError", "de_GetCommandInvocationCommand", "output", "context", "de_GetCommandInvocationCommandError", "data", "parseBody", "contents", "_json", "deserializeMetadata", "parsedOutput", "parseErrorBody", "errorCode", "loadRestJsonErrorCode", "de_InternalServerErrorRes", "de_InvalidCommandIdRes", "de_InvalidInstanceIdRes", "de_InvalidPluginNameRes", "de_InvocationDoesNotExistRes", "parsedBody", "throwDefaultError", "de_SendCommandCommand", "output", "context", "de_SendCommandCommandError", "data", "parseBody", "contents", "de_SendCommandResult", "deserializeMetadata", "parsedOutput", "parseErrorBody", "errorCode", "loadRestJsonErrorCode", "de_DuplicateInstanceIdRes", "de_InternalServerErrorRes", "de_InvalidDocumentRes", "de_InvalidDocumentVersionRes", "de_InvalidInstanceIdRes", "de_InvalidNotificationConfigRes", "de_InvalidOutputFolderRes", "de_InvalidParametersRes", "de_InvalidRoleRes", "de_MaxDocumentSizeExceededRes", "de_UnsupportedPlatformTypeRes", "parsedBody", "throwDefaultError", "de_DuplicateInstanceIdRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "DuplicateInstanceId", "deserializeMetadata", "decorateServiceException", "de_InternalServerErrorRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InternalServerError", "deserializeMetadata", "decorateServiceException", "de_InvalidCommandIdRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InvalidCommandId", "deserializeMetadata", "decorateServiceException", "de_InvalidDocumentRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InvalidDocument", "deserializeMetadata", "decorateServiceException", "de_InvalidDocumentVersionRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InvalidDocumentVersion", "deserializeMetadata", "decorateServiceException", "de_InvalidFilterKeyRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InvalidFilterKey", "deserializeMetadata", "decorateServiceException", "de_InvalidInstanceIdRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InvalidInstanceId", "deserializeMetadata", "decorateServiceException", "de_InvalidInstanceInformationFilterValueRes", "InvalidInstanceInformationFilterValue", "de_InvalidNextTokenRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InvalidNextToken", "deserializeMetadata", "decorateServiceException", "de_InvalidNotificationConfigRes", "InvalidNotificationConfig", "de_InvalidOutputFolderRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InvalidOutputFolder", "deserializeMetadata", "decorateServiceException", "de_InvalidParametersRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InvalidParameters", "deserializeMetadata", "decorateServiceException", "de_InvalidPluginNameRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InvalidPluginName", "deserializeMetadata", "decorateServiceException", "de_InvalidRoleRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InvalidRole", "deserializeMetadata", "decorateServiceException", "de_InvocationDoesNotExistRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InvocationDoesNotExist", "deserializeMetadata", "decorateServiceException", "de_MaxDocumentSizeExceededRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "MaxDocumentSizeExceeded", "deserializeMetadata", "decorateServiceException", "de_UnsupportedPlatformTypeRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "UnsupportedPlatformType", "deserializeMetadata", "decorateServiceException", "de_Command", "output", "context", "take", "_json", "expectString", "expectInt32", "_", "expectNonNull", "parseEpochTimestamp", "expectNumber", "de_DescribeInstanceInformationResult", "output", "context", "take", "_", "de_InstanceInformationList", "expectString", "de_InstanceInformation", "output", "context", "take", "expectString", "_json", "expectBoolean", "_", "expectNonNull", "parseEpochTimestamp", "expectNumber", "de_InstanceInformationList", "e", "entry", "de_SendCommandResult", "output", "context", "take", "_", "de_Command", "deserializeMetadata", "output", "collectBody", "streamBody", "context", "collectBodyString", "body", "throwDefaultError", "withBaseException", "SSMServiceException", "buildHttpRpcRequest", "headers", "path", "resolvedHostname", "hostname", "protocol", "port", "basePath", "contents", "HttpRequest", "sharedHeaders", "operation", "parseBody", "encoded", "parseErrorBody", "errorBody", "value", "loadRestJsonErrorCode", "data", "findKey", "object", "key", "k", "sanitizeErrorCode", "rawValue", "cleanValue", "headerKey", "DescribeInstanceInformationCommand", "Command", "input", "clientStack", "configuration", "options", "getSerdePlugin", "getEndpointPlugin", "stack", "logger", "handlerExecutionContext", "_", "requestHandler", "request", "context", "se_DescribeInstanceInformationCommand", "output", "de_DescribeInstanceInformationCommand", "GetCommandInvocationCommand", "Command", "input", "clientStack", "configuration", "options", "getSerdePlugin", "getEndpointPlugin", "stack", "logger", "handlerExecutionContext", "_", "requestHandler", "request", "context", "se_GetCommandInvocationCommand", "output", "de_GetCommandInvocationCommand", "SendCommandCommand", "Command", "input", "clientStack", "configuration", "options", "getSerdePlugin", "getEndpointPlugin", "stack", "logger", "handlerExecutionContext", "SendCommandRequestFilterSensitiveLog", "SendCommandResultFilterSensitiveLog", "requestHandler", "request", "context", "se_SendCommandCommand", "output", "de_SendCommandCommand", "SelectorType", "booleanSelector", "obj", "key", "type", "ENV_USE_DUALSTACK_ENDPOINT", "CONFIG_USE_DUALSTACK_ENDPOINT", "NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS", "env", "booleanSelector", "ENV_USE_DUALSTACK_ENDPOINT", "SelectorType", "profile", "CONFIG_USE_DUALSTACK_ENDPOINT", "ENV_USE_FIPS_ENDPOINT", "CONFIG_USE_FIPS_ENDPOINT", "NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS", "env", "booleanSelector", "ENV_USE_FIPS_ENDPOINT", "SelectorType", "profile", "CONFIG_USE_FIPS_ENDPOINT", "REGION_ENV_NAME", "REGION_INI_NAME", "NODE_REGION_CONFIG_OPTIONS", "env", "profile", "NODE_REGION_CONFIG_FILE_OPTIONS", "isFipsRegion", "region", "getRealRegion", "region", "isFipsRegion", "resolveRegionConfig", "input", "region", "useFipsEndpoint", "getRealRegion", "providedRegion", "isFipsRegion", "CONTENT_LENGTH_HEADER", "contentLengthMiddleware", "bodyLengthChecker", "next", "args", "request", "HttpRequest", "body", "headers", "str", "length", "contentLengthMiddlewareOptions", "getContentLengthPlugin", "options", "clientStack", "hostHeaderMiddleware", "options", "next", "args", "HttpRequest", "request", "handlerProtocol", "host", "hostHeaderMiddlewareOptions", "getHostHeaderPlugin", "clientStack", "loggerMiddleware", "next", "context", "args", "_a", "_b", "response", "clientName", "commandName", "logger", "dynamoDbDocumentClientOptions", "overrideInputFilterSensitiveLog", "overrideOutputFilterSensitiveLog", "inputFilterSensitiveLog", "outputFilterSensitiveLog", "$metadata", "outputWithoutMetadata", "error", "loggerMiddlewareOptions", "getLoggerPlugin", "options", "clientStack", "TRACE_ID_HEADER_NAME", "ENV_LAMBDA_FUNCTION_NAME", "ENV_TRACE_ID", "recursionDetectionMiddleware", "options", "next", "args", "request", "HttpRequest", "functionName", "traceId", "nonEmptyString", "str", "addRecursionDetectionMiddlewareOptions", "getRecursionDetectionPlugin", "clientStack", "RETRY_MODES", "DEFAULT_MAX_ATTEMPTS", "DEFAULT_RETRY_MODE", "THROTTLING_ERROR_CODES", "TRANSIENT_ERROR_CODES", "TRANSIENT_ERROR_STATUS_CODES", "NODEJS_TIMEOUT_ERROR_CODES", "isThrottlingError", "error", "_a", "_b", "THROTTLING_ERROR_CODES", "isTransientError", "TRANSIENT_ERROR_CODES", "NODEJS_TIMEOUT_ERROR_CODES", "TRANSIENT_ERROR_STATUS_CODES", "isServerError", "statusCode", "DefaultRateLimiter", "options", "currentTimeInSeconds", "amount", "delay", "resolve", "timestamp", "fillAmount", "response", "calculatedRate", "isThrottlingError", "rateToUse", "newRate", "timeBucket", "currentRate", "num", "INVOCATION_ID_HEADER", "REQUEST_HEADER", "getDefaultRetryBackoffStrategy", "delayBase", "attempts", "delay", "getDefaultRetryToken", "initialRetryTokens", "initialRetryDelay", "initialRetryCount", "options", "MAX_CAPACITY", "retryCost", "timeoutRetryCost", "retryBackoffStrategy", "getDefaultRetryBackoffStrategy", "availableCapacity", "retryDelay", "lastRetryCost", "retryCount", "getCapacityAmount", "errorType", "getRetryCount", "getRetryDelay", "getLastRetryCost", "hasRetryTokens", "errorInfo", "capacityAmount", "delayBase", "delayFromErrorType", "delayFromRetryAfterHint", "releaseAmount", "StandardRetryStrategy", "maxAttemptsProvider", "RETRY_MODES", "getDefaultRetryToken", "retryTokenScope", "tokenToRenew", "errorInfo", "maxAttempts", "token", "DEFAULT_MAX_ATTEMPTS", "errorType", "AdaptiveRetryStrategy", "maxAttemptsProvider", "options", "RETRY_MODES", "rateLimiter", "DefaultRateLimiter", "StandardRetryStrategy", "retryTokenScope", "tokenToRenew", "errorInfo", "token", "asSdkError", "error", "ENV_MAX_ATTEMPTS", "CONFIG_MAX_ATTEMPTS", "NODE_MAX_ATTEMPT_CONFIG_OPTIONS", "env", "value", "maxAttempt", "profile", "DEFAULT_MAX_ATTEMPTS", "resolveRetryConfig", "input", "retryStrategy", "maxAttempts", "normalizeProvider", "RETRY_MODES", "AdaptiveRetryStrategy", "StandardRetryStrategy", "ENV_RETRY_MODE", "CONFIG_RETRY_MODE", "NODE_RETRY_MODE_CONFIG_OPTIONS", "DEFAULT_RETRY_MODE", "init_esm_node", "retryMiddleware", "options", "next", "context", "args", "retryStrategy", "maxAttempts", "isRetryStrategyV2", "retryToken", "lastError", "attempts", "totalRetryDelay", "request", "HttpRequest", "INVOCATION_ID_HEADER", "v4_default", "REQUEST_HEADER", "response", "output", "e", "retryErrorInfo", "getRetyErrorInto", "asSdkError", "delay", "resolve", "error", "errorInfo", "getRetryErrorType", "retryAfterHint", "getRetryAfterHint", "isThrottlingError", "isTransientError", "isServerError", "retryMiddlewareOptions", "getRetryPlugin", "clientStack", "HttpResponse", "retryAfterHeaderName", "key", "retryAfter", "retryAfterSeconds", "ProviderError", "message", "tryNextLink", "error", "CredentialsProviderError", "ProviderError", "message", "tryNextLink", "TokenProviderError", "ProviderError", "message", "tryNextLink", "chain", "providers", "promise", "ProviderError", "provider", "err", "fromStatic", "staticValue", "memoize", "provider", "isExpired", "requiresRefresh", "resolved", "pending", "hasResult", "isConstant", "coalesceProvider", "options", "SHORT_TO_HEX", "HEX_TO_SHORT", "i", "encodedByte", "toHex", "bytes", "out", "i", "SHORT_TO_HEX", "isArrayBuffer", "arg", "Buffer", "fromArrayBuffer", "input", "offset", "length", "isArrayBuffer", "fromString", "encoding", "fromUtf8", "input", "buf", "fromString", "toUint8Array", "data", "fromUtf8", "toUtf8", "input", "fromArrayBuffer", "ALGORITHM_QUERY_PARAM", "CREDENTIAL_QUERY_PARAM", "AMZ_DATE_QUERY_PARAM", "SIGNED_HEADERS_QUERY_PARAM", "EXPIRES_QUERY_PARAM", "SIGNATURE_QUERY_PARAM", "TOKEN_QUERY_PARAM", "AUTH_HEADER", "AMZ_DATE_HEADER", "AMZ_DATE_QUERY_PARAM", "DATE_HEADER", "GENERATED_HEADERS", "SIGNATURE_HEADER", "SIGNATURE_QUERY_PARAM", "SHA256_HEADER", "TOKEN_HEADER", "TOKEN_QUERY_PARAM", "ALWAYS_UNSIGNABLE_HEADERS", "PROXY_HEADER_PATTERN", "SEC_HEADER_PATTERN", "ALGORITHM_IDENTIFIER", "EVENT_ALGORITHM_IDENTIFIER", "UNSIGNED_PAYLOAD", "MAX_CACHE_SIZE", "KEY_TYPE_IDENTIFIER", "MAX_PRESIGNED_TTL", "signingKeyCache", "cacheQueue", "createScope", "shortDate", "region", "service", "KEY_TYPE_IDENTIFIER", "getSigningKey", "sha256Constructor", "credentials", "credsHash", "hmac", "cacheKey", "toHex", "MAX_CACHE_SIZE", "key", "signable", "hmac", "ctor", "secret", "data", "hash", "toUint8Array", "getCanonicalHeaders", "headers", "unsignableHeaders", "signableHeaders", "canonical", "headerName", "canonicalHeaderName", "ALWAYS_UNSIGNABLE_HEADERS", "PROXY_HEADER_PATTERN", "SEC_HEADER_PATTERN", "escapeUri", "uri", "hexEncode", "c", "getCanonicalQuery", "query", "keys", "serialized", "key", "SIGNATURE_HEADER", "value", "escapeUri", "encoded", "getPayloadHash", "headers", "body", "hashConstructor", "headerName", "SHA256_HEADER", "isArrayBuffer", "hashCtor", "toUint8Array", "toHex", "UNSIGNED_PAYLOAD", "hasHeader", "soughtHeader", "headers", "headerName", "cloneRequest", "headers", "query", "rest", "cloneQuery", "carry", "paramName", "param", "moveHeadersToQuery", "request", "options", "_a", "headers", "query", "cloneRequest", "name", "lname", "prepareRequest", "request", "cloneRequest", "headerName", "GENERATED_HEADERS", "iso8601", "time", "toDate", "SignatureV4", "applyChecksum", "credentials", "region", "service", "sha256", "uriEscapePath", "normalizeProvider", "originalRequest", "options", "signingDate", "expiresIn", "unsignableHeaders", "unhoistableHeaders", "signableHeaders", "signingRegion", "signingService", "longDate", "shortDate", "formatDate", "MAX_PRESIGNED_TTL", "scope", "createScope", "request", "moveHeadersToQuery", "prepareRequest", "TOKEN_QUERY_PARAM", "ALGORITHM_QUERY_PARAM", "ALGORITHM_IDENTIFIER", "CREDENTIAL_QUERY_PARAM", "AMZ_DATE_QUERY_PARAM", "EXPIRES_QUERY_PARAM", "canonicalHeaders", "getCanonicalHeaders", "SIGNED_HEADERS_QUERY_PARAM", "getCanonicalHeaderList", "SIGNATURE_QUERY_PARAM", "getPayloadHash", "toSign", "headers", "payload", "priorSignature", "hashedPayload", "hash", "hashedHeaders", "toHex", "stringToSign", "EVENT_ALGORITHM_IDENTIFIER", "toUint8Array", "requestToSign", "AMZ_DATE_HEADER", "TOKEN_HEADER", "payloadHash", "hasHeader", "SHA256_HEADER", "signature", "AUTH_HEADER", "sortedHeaders", "getCanonicalQuery", "name", "credentialScope", "canonicalRequest", "hashedRequest", "path", "normalizedPathSegments", "pathSegment", "normalizedPath", "keyPromise", "getSigningKey", "now", "iso8601", "CREDENTIAL_EXPIRE_WINDOW", "resolveAwsAuthConfig", "input", "normalizedCreds", "normalizeCredentialProvider", "signingEscapePath", "systemClockOffset", "sha256", "signer", "normalizeProvider", "region", "regionInfo", "signingRegion", "signingService", "params", "SignerCtor", "SignatureV4", "authScheme", "normalizeCredentialProvider", "credentials", "memoize", "CREDENTIAL_EXPIRE_WINDOW", "normalizeProvider", "getSkewCorrectedDate", "systemClockOffset", "isClockSkewed", "clockTime", "systemClockOffset", "getSkewCorrectedDate", "getUpdatedSystemClockOffset", "clockTime", "currentSystemClockOffset", "clockTimeInMs", "isClockSkewed", "awsAuthMiddleware", "options", "next", "context", "args", "_a", "_b", "_c", "_d", "HttpRequest", "authScheme", "multiRegionOverride", "signer", "output", "getSkewCorrectedDate", "error", "serverTime", "getDateHeader", "getUpdatedSystemClockOffset", "dateHeader", "response", "HttpResponse", "awsAuthMiddlewareOptions", "getAwsAuthPlugin", "clientStack", "resolveUserAgentConfig", "input", "partitions_default", "selectedPartitionsInfo", "partitions_default", "selectedUserAgentPrefix", "partition", "value", "partitions", "regions", "outputs", "region", "regionData", "regionRegex", "DEFAULT_PARTITION", "setPartitionInfo", "partitionsInfo", "userAgentPrefix", "useDefaultPartitionInfo", "getUserAgentPrefix", "debugId", "toDebugString", "input", "EndpointError", "message", "lib_exports", "__export", "aws_exports", "booleanEquals", "getAttr", "isSet", "isValidHostLabel", "not", "parseURL", "stringEquals", "substring", "uriEncode", "aws_exports", "__export", "getUserAgentPrefix", "isVirtualHostableS3Bucket", "parseArn", "partition", "setPartitionInfo", "useDefaultPartitionInfo", "IP_V4_REGEX", "isIpAddress", "value", "VALID_HOST_LABEL_REGEX", "isValidHostLabel", "value", "allowSubDomains", "labels", "label", "isVirtualHostableS3Bucket", "value", "allowSubDomains", "label", "isValidHostLabel", "isIpAddress", "parseArn", "value", "segments", "arn", "partition", "service", "region", "accountId", "resourceId", "booleanEquals", "value1", "value2", "getAttrPathList", "path", "parts", "pathList", "part", "squareBracketIndex", "EndpointError", "arrayIndex", "getAttr", "value", "path", "getAttrPathList", "acc", "index", "EndpointError", "isSet", "value", "not", "value", "HttpAuthLocation", "HostAddressType", "EndpointURLScheme", "RequestHandlerProtocol", "DEFAULT_PORTS", "EndpointURLScheme", "parseURL", "value", "whatwgURL", "hostname", "port", "protocol", "path", "query", "url", "k", "v", "urlString", "host", "pathname", "search", "scheme", "isIp", "isIpAddress", "inputContainsDefaultPort", "authority", "stringEquals", "value1", "value2", "substring", "input", "start", "stop", "reverse", "uriEncode", "value", "c", "evaluateTemplate", "template", "options", "evaluatedTemplateArr", "templateContext", "currentIndex", "openingBraceIndex", "closingBraceIndex", "parameterName", "refName", "attrName", "getAttr", "getReferenceValue", "ref", "options", "evaluateExpression", "obj", "keyName", "options", "evaluateTemplate", "callFunction", "getReferenceValue", "EndpointError", "callFunction", "fn", "argv", "options", "evaluatedArgs", "arg", "evaluateExpression", "acc", "key", "lib_exports", "evaluateCondition", "assign", "fnArgs", "options", "_a", "_b", "EndpointError", "value", "callFunction", "debugId", "toDebugString", "evaluateConditions", "conditions", "options", "_a", "_b", "conditionsReferenceRecord", "condition", "result", "toAssign", "evaluateCondition", "debugId", "toDebugString", "getEndpointHeaders", "headers", "options", "acc", "headerKey", "headerVal", "headerValEntry", "processedExpr", "evaluateExpression", "EndpointError", "getEndpointProperty", "property", "options", "propertyEntry", "evaluateTemplate", "EndpointError", "getEndpointProperties", "getEndpointProperties", "properties", "options", "acc", "propertyKey", "propertyVal", "getEndpointProperty", "getEndpointUrl", "endpointUrl", "options", "expression", "evaluateExpression", "error", "EndpointError", "evaluateEndpointRule", "endpointRule", "options", "_a", "_b", "conditions", "endpoint", "result", "referenceRecord", "evaluateConditions", "endpointRuleOptions", "url", "properties", "headers", "debugId", "toDebugString", "getEndpointHeaders", "getEndpointProperties", "getEndpointUrl", "evaluateErrorRule", "errorRule", "options", "conditions", "error", "result", "referenceRecord", "evaluateConditions", "EndpointError", "evaluateExpression", "evaluateTreeRule", "treeRule", "options", "conditions", "rules", "result", "referenceRecord", "evaluateConditions", "evaluateRules", "evaluateRules", "rules", "options", "rule", "endpointOrUndefined", "evaluateEndpointRule", "evaluateErrorRule", "evaluateTreeRule", "EndpointError", "resolveEndpoint", "ruleSetObject", "options", "_a", "_b", "_c", "_d", "_e", "endpointParams", "logger", "parameters", "rules", "debugId", "toDebugString", "paramsWithDefault", "v", "k", "paramKey", "paramDefaultValue", "requiredParams", "requiredParam", "EndpointError", "endpoint", "evaluateRules", "givenEndpoint", "protocol", "port", "USER_AGENT", "X_AMZ_USER_AGENT", "SPACE", "UA_ESCAPE_REGEX", "userAgentMiddleware", "options", "next", "context", "args", "_a", "_b", "request", "HttpRequest", "headers", "userAgent", "escapeUserAgent", "defaultUserAgent", "customUserAgent", "prefix", "getUserAgentPrefix", "sdkUserAgentValue", "SPACE", "normalUAValue", "section", "X_AMZ_USER_AGENT", "USER_AGENT", "name", "version", "prefixSeparatorIndex", "uaName", "item", "UA_ESCAPE_REGEX", "getUserAgentMiddlewareOptions", "getUserAgentPlugin", "config", "clientStack", "resolveClientEndpointParameters", "options", "package_default", "import_fast_xml_parser", "STSServiceException", "ServiceException", "options", "ExpiredTokenException", "STSServiceException", "opts", "MalformedPolicyDocumentException", "PackedPolicyTooLargeException", "RegionDisabledException", "IDPRejectedClaimException", "InvalidIdentityTokenException", "IDPCommunicationErrorException", "se_AssumeRoleCommand", "input", "context", "headers", "SHARED_HEADERS", "body", "buildFormUrlencodedString", "se_AssumeRoleRequest", "buildHttpRpcRequest", "se_AssumeRoleWithWebIdentityCommand", "input", "context", "headers", "SHARED_HEADERS", "body", "buildFormUrlencodedString", "se_AssumeRoleWithWebIdentityRequest", "buildHttpRpcRequest", "de_AssumeRoleCommand", "output", "context", "de_AssumeRoleCommandError", "data", "parseBody", "contents", "de_AssumeRoleResponse", "deserializeMetadata", "parsedOutput", "parseErrorBody", "errorCode", "loadQueryErrorCode", "de_ExpiredTokenExceptionRes", "de_MalformedPolicyDocumentExceptionRes", "de_PackedPolicyTooLargeExceptionRes", "de_RegionDisabledExceptionRes", "parsedBody", "throwDefaultError", "de_AssumeRoleWithWebIdentityCommand", "output", "context", "de_AssumeRoleWithWebIdentityCommandError", "data", "parseBody", "contents", "de_AssumeRoleWithWebIdentityResponse", "deserializeMetadata", "parsedOutput", "parseErrorBody", "errorCode", "loadQueryErrorCode", "de_ExpiredTokenExceptionRes", "de_IDPCommunicationErrorExceptionRes", "de_IDPRejectedClaimExceptionRes", "de_InvalidIdentityTokenExceptionRes", "de_MalformedPolicyDocumentExceptionRes", "de_PackedPolicyTooLargeExceptionRes", "de_RegionDisabledExceptionRes", "parsedBody", "throwDefaultError", "de_ExpiredTokenExceptionRes", "parsedOutput", "context", "body", "deserialized", "de_ExpiredTokenException", "exception", "ExpiredTokenException", "deserializeMetadata", "decorateServiceException", "de_IDPCommunicationErrorExceptionRes", "de_IDPCommunicationErrorException", "IDPCommunicationErrorException", "de_IDPRejectedClaimExceptionRes", "de_IDPRejectedClaimException", "IDPRejectedClaimException", "de_InvalidIdentityTokenExceptionRes", "parsedOutput", "context", "body", "deserialized", "de_InvalidIdentityTokenException", "exception", "InvalidIdentityTokenException", "deserializeMetadata", "decorateServiceException", "de_MalformedPolicyDocumentExceptionRes", "de_MalformedPolicyDocumentException", "MalformedPolicyDocumentException", "de_PackedPolicyTooLargeExceptionRes", "de_PackedPolicyTooLargeException", "PackedPolicyTooLargeException", "de_RegionDisabledExceptionRes", "de_RegionDisabledException", "RegionDisabledException", "se_AssumeRoleRequest", "input", "_a", "_b", "_c", "entries", "memberEntries", "se_policyDescriptorListType", "key", "value", "loc", "se_tagListType", "se_tagKeyListType", "se_AssumeRoleWithWebIdentityRequest", "input", "context", "_a", "entries", "memberEntries", "se_policyDescriptorListType", "key", "value", "loc", "se_policyDescriptorListType", "input", "context", "entries", "counter", "entry", "memberEntries", "se_PolicyDescriptorType", "key", "value", "se_Tag", "se_tagKeyListType", "se_tagListType", "de_AssumedRoleUser", "output", "contents", "expectString", "de_AssumeRoleResponse", "de_Credentials", "strictParseInt32", "de_AssumeRoleWithWebIdentityResponse", "output", "context", "contents", "de_Credentials", "expectString", "de_AssumedRoleUser", "strictParseInt32", "expectNonNull", "parseRfc3339DateTimeWithOffset", "de_ExpiredTokenException", "output", "context", "contents", "expectString", "de_IDPCommunicationErrorException", "output", "context", "contents", "expectString", "de_IDPRejectedClaimException", "de_InvalidIdentityTokenException", "output", "context", "contents", "expectString", "de_MalformedPolicyDocumentException", "de_PackedPolicyTooLargeException", "de_RegionDisabledException", "deserializeMetadata", "collectBody", "streamBody", "collectBodyString", "body", "throwDefaultError", "withBaseException", "STSServiceException", "buildHttpRpcRequest", "headers", "path", "resolvedHostname", "hostname", "protocol", "port", "basePath", "HttpRequest", "SHARED_HEADERS", "parseBody", "encoded", "parser", "_", "val", "parsedObj", "textNodeName", "key", "parsedObjToReturn", "getValueFromTextNode", "parseErrorBody", "errorBody", "value", "buildFormUrlencodedString", "formEntries", "extendedEncodeURIComponent", "loadQueryErrorCode", "data", "_a", "AssumeRoleCommand", "Command", "input", "clientStack", "configuration", "options", "getSerdePlugin", "getEndpointPlugin", "getAwsAuthPlugin", "stack", "logger", "handlerExecutionContext", "_", "requestHandler", "request", "context", "se_AssumeRoleCommand", "output", "de_AssumeRoleCommand", "AssumeRoleWithWebIdentityCommand", "Command", "input", "clientStack", "configuration", "options", "getSerdePlugin", "getEndpointPlugin", "stack", "logger", "handlerExecutionContext", "_", "requestHandler", "request", "context", "se_AssumeRoleWithWebIdentityCommand", "output", "de_AssumeRoleWithWebIdentityCommand", "resolveStsAuthConfig", "input", "stsClientCtor", "resolveAwsAuthConfig", "resolveClientEndpointParameters", "options", "package_default", "ASSUME_ROLE_DEFAULT_REGION", "decorateDefaultRegion", "region", "getDefaultRoleAssumer", "stsOptions", "stsClientCtor", "stsClient", "closureSourceCreds", "sourceCreds", "params", "logger", "requestHandler", "Credentials", "AssumeRoleCommand", "getDefaultRoleAssumerWithWebIdentity", "AssumeRoleWithWebIdentityCommand", "decorateDefaultCredentialProvider", "provider", "input", "ENV_KEY", "ENV_SECRET", "ENV_SESSION", "ENV_EXPIRATION", "fromEnv", "accessKeyId", "secretAccessKey", "sessionToken", "expiry", "CredentialsProviderError", "homedir", "sep", "getHomeDir", "HOME", "USERPROFILE", "HOMEPATH", "HOMEDRIVE", "ENV_PROFILE", "DEFAULT_PROFILE", "getProfileName", "init", "createHash", "join", "getSSOTokenFilepath", "id", "cacheName", "createHash", "join", "getHomeDir", "fsPromises", "readFile", "fsPromises", "getSSOTokenFromFile", "id", "ssoTokenFilepath", "getSSOTokenFilepath", "ssoTokenText", "join", "ENV_CONFIG_PATH", "getConfigFilepath", "join", "getHomeDir", "join", "ENV_CREDENTIALS_PATH", "getCredentialsFilepath", "join", "getHomeDir", "profileKeyRegex", "getProfileData", "data", "key", "acc", "value", "profileNameBlockList", "parseIni", "iniData", "map", "currentSection", "line", "indexOfEqualsSign", "start", "end", "name", "value", "fsPromises", "readFile", "filePromisesHash", "slurpFile", "path", "options", "swallowError", "loadSharedConfigFiles", "init", "filepath", "getCredentialsFilepath", "configFilepath", "getConfigFilepath", "parsedFiles", "slurpFile", "parseIni", "getProfileData", "ssoSessionKeyRegex", "getSsoSessionData", "data", "key", "acc", "value", "swallowError", "loadSsoSessionData", "init", "slurpFile", "getConfigFilepath", "parseIni", "getSsoSessionData", "mergeConfigFiles", "files", "merged", "file", "key", "values", "parseKnownFiles", "init", "parsedFiles", "loadSharedConfigFiles", "mergeConfigFiles", "parse", "Buffer", "request", "httpRequest", "options", "resolve", "reject", "_a", "req", "err", "ProviderError", "res", "statusCode", "chunks", "chunk", "isImdsCredentials", "arg", "fromImdsCredentials", "creds", "providerConfigFromInit", "maxRetries", "timeout", "retry", "toRetry", "maxRetries", "promise", "i", "ENV_CMDS_FULL_URI", "ENV_CMDS_RELATIVE_URI", "ENV_CMDS_AUTH_TOKEN", "fromContainerMetadata", "init", "timeout", "maxRetries", "providerConfigFromInit", "retry", "requestOptions", "getCmdsUri", "credsResponse", "requestFromEcsImds", "isImdsCredentials", "CredentialsProviderError", "fromImdsCredentials", "options", "httpRequest", "CMDS_IP", "GREENGRASS_HOSTS", "GREENGRASS_PROTOCOLS", "parsed", "parse", "fromEnv", "envVarSelector", "config", "e", "CredentialsProviderError", "fromSharedConfigFiles", "configSelector", "preferredFile", "init", "profile", "getProfileName", "configFile", "credentialsFile", "loadSharedConfigFiles", "profileFromCredentials", "profileFromConfig", "mergedProfile", "configValue", "e", "CredentialsProviderError", "isFunction", "func", "fromStatic", "defaultValue", "loadConfig", "environmentVariableSelector", "configFileSelector", "defaultValue", "configuration", "memoize", "chain", "fromEnv", "fromSharedConfigFiles", "fromStatic", "Endpoint", "ENV_ENDPOINT_NAME", "CONFIG_ENDPOINT_NAME", "ENDPOINT_CONFIG_OPTIONS", "env", "profile", "EndpointMode", "ENV_ENDPOINT_MODE_NAME", "CONFIG_ENDPOINT_MODE_NAME", "ENDPOINT_MODE_CONFIG_OPTIONS", "env", "profile", "EndpointMode", "getInstanceMetadataEndpoint", "parseUrl", "getFromEndpointConfig", "getFromEndpointModeConfig", "loadConfig", "ENDPOINT_CONFIG_OPTIONS", "endpointMode", "ENDPOINT_MODE_CONFIG_OPTIONS", "EndpointMode", "Endpoint", "STATIC_STABILITY_DOC_URL", "getExtendedInstanceMetadataCredentials", "credentials", "logger", "refreshInterval", "newExpiration", "originalExpiration", "staticStabilityProvider", "provider", "options", "logger", "pastCredentials", "credentials", "getExtendedInstanceMetadataCredentials", "e", "IMDS_PATH", "IMDS_TOKEN_PATH", "fromInstanceMetadata", "init", "staticStabilityProvider", "getInstanceImdsProvider", "disableFetchToken", "timeout", "maxRetries", "providerConfigFromInit", "getCredentials", "options", "profile", "retry", "getProfile", "err", "creds", "getCredentialsFromProfile", "endpoint", "getInstanceMetadataEndpoint", "token", "getMetadataToken", "error", "httpRequest", "credsResponse", "isImdsCredentials", "CredentialsProviderError", "fromImdsCredentials", "resolveCredentialSource", "credentialSource", "profileName", "sourceProvidersMap", "fromContainerMetadata", "fromInstanceMetadata", "fromEnv", "CredentialsProviderError", "isAssumeRoleProfile", "arg", "isAssumeRoleWithSourceProfile", "isAssumeRoleWithProviderProfile", "resolveAssumeRoleCredentials", "profileName", "profiles", "options", "visitedProfiles", "data", "CredentialsProviderError", "source_profile", "getProfileName", "sourceCredsProvider", "resolveProfileData", "resolveCredentialSource", "params", "mfa_serial", "sourceCreds", "exec", "promisify", "getValidatedProcessCredentials", "profileName", "data", "currentTime", "resolveProcessCredentials", "profileName", "profiles", "profile", "credentialProcess", "execPromise", "promisify", "exec", "stdout", "data", "getValidatedProcessCredentials", "error", "CredentialsProviderError", "fromProcess", "init", "profiles", "parseKnownFiles", "resolveProcessCredentials", "getProfileName", "isProcessProfile", "arg", "resolveProcessCredentials", "options", "profile", "fromProcess", "isSsoProfile", "arg", "SSOServiceException", "ServiceException", "options", "InvalidRequestException", "SSOServiceException", "opts", "ResourceNotFoundException", "TooManyRequestsException", "UnauthorizedException", "GetRoleCredentialsRequestFilterSensitiveLog", "obj", "SENSITIVE_STRING", "RoleCredentialsFilterSensitiveLog", "GetRoleCredentialsResponseFilterSensitiveLog", "se_GetRoleCredentialsCommand", "input", "context", "hostname", "protocol", "port", "basePath", "headers", "map", "isSerializableHeaderValue", "resolvedPath", "query", "expectNonNull", "body", "HttpRequest", "de_GetRoleCredentialsCommand", "output", "context", "de_GetRoleCredentialsCommandError", "contents", "map", "deserializeMetadata", "data", "expectNonNull", "expectObject", "parseBody", "doc", "take", "_json", "parsedOutput", "parseErrorBody", "errorCode", "loadRestJsonErrorCode", "de_InvalidRequestExceptionRes", "de_ResourceNotFoundExceptionRes", "de_TooManyRequestsExceptionRes", "de_UnauthorizedExceptionRes", "parsedBody", "throwDefaultError", "throwDefaultError", "withBaseException", "SSOServiceException", "de_InvalidRequestExceptionRes", "parsedOutput", "context", "contents", "map", "data", "doc", "take", "expectString", "exception", "InvalidRequestException", "deserializeMetadata", "decorateServiceException", "de_ResourceNotFoundExceptionRes", "ResourceNotFoundException", "de_TooManyRequestsExceptionRes", "TooManyRequestsException", "de_UnauthorizedExceptionRes", "UnauthorizedException", "output", "collectBody", "streamBody", "collectBodyString", "body", "isSerializableHeaderValue", "value", "parseBody", "encoded", "parseErrorBody", "errorBody", "loadRestJsonErrorCode", "findKey", "object", "key", "k", "sanitizeErrorCode", "rawValue", "cleanValue", "headerKey", "GetRoleCredentialsCommand", "Command", "input", "clientStack", "configuration", "options", "getSerdePlugin", "getEndpointPlugin", "stack", "logger", "handlerExecutionContext", "GetRoleCredentialsRequestFilterSensitiveLog", "GetRoleCredentialsResponseFilterSensitiveLog", "requestHandler", "request", "context", "se_GetRoleCredentialsCommand", "output", "de_GetRoleCredentialsCommand", "resolveClientEndpointParameters", "options", "package_default", "Buffer", "createHash", "createHmac", "Hash", "algorithmIdentifier", "secret", "toHash", "encoding", "toUint8Array", "castSourceData", "toCast", "fromString", "fromArrayBuffer", "buildQueryString", "query", "parts", "key", "value", "escapeUri", "i", "iLen", "qsEntry", "hAgent", "hRequest", "hsAgent", "hsRequest", "NODEJS_TIMEOUT_ERROR_CODES", "getTransformedHeaders", "headers", "transformedHeaders", "name", "headerValues", "setConnectionTimeout", "request", "reject", "timeoutInMs", "socket", "timeoutId", "setSocketTimeout", "request", "reject", "timeoutInMs", "Readable", "writeRequestBody", "httpRequest", "request", "writeBody", "body", "NodeHttpHandler", "options", "resolve", "reject", "_options", "requestTimeout", "connectionTimeout", "socketTimeout", "httpAgent", "httpsAgent", "keepAlive", "maxSockets", "hAgent", "hsAgent", "_a", "_b", "_c", "_d", "request", "abortSignal", "abortError", "isSSL", "queryString", "buildQueryString", "nodeHttpsOptions", "req", "hsRequest", "hRequest", "res", "httpResponse", "HttpResponse", "getTransformedHeaders", "err", "NODEJS_TIMEOUT_ERROR_CODES", "setConnectionTimeout", "setSocketTimeout", "writeRequestBody", "NodeHttp2ConnectionPool", "sessions", "session", "connection", "Writable", "Collector", "chunk", "encoding", "callback", "streamCollector", "stream", "resolve", "reject", "collector", "Collector", "err", "bytes", "fstatSync", "lstatSync", "calculateBodyLength", "body", "platform", "release", "env", "versions", "isCrtAvailable", "__require", "UA_APP_ID_ENV_NAME", "UA_APP_ID_INI_NAME", "defaultUserAgent", "serviceId", "clientVersion", "sections", "platform", "release", "versions", "crtAvailable", "isCrtAvailable", "env", "appIdPromise", "loadConfig", "profile", "resolvedUserAgent", "appId", "BASE64_REGEX", "fromBase64", "input", "buffer", "fromString", "toBase64", "input", "fromArrayBuffer", "p", "q", "r", "s", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "_data", "ruleSet", "defaultEndpointResolver", "endpointParams", "context", "resolveEndpoint", "ruleSet", "getRuntimeConfig", "config", "fromBase64", "toBase64", "defaultEndpointResolver", "NoOpLogger", "parseUrl", "fromUtf8", "toUtf8", "AWS_EXECUTION_ENV", "AWS_REGION_ENV", "AWS_DEFAULT_REGION_ENV", "ENV_IMDS_DISABLED", "DEFAULTS_MODE_OPTIONS", "IMDS_REGION_PATH", "AWS_DEFAULTS_MODE_ENV", "AWS_DEFAULTS_MODE_CONFIG", "NODE_DEFAULTS_MODE_CONFIG_OPTIONS", "env", "profile", "resolveDefaultsModeConfig", "region", "loadConfig", "NODE_REGION_CONFIG_OPTIONS", "defaultsMode", "NODE_DEFAULTS_MODE_CONFIG_OPTIONS", "memoize", "mode", "resolveNodeDefaultsModeAuto", "DEFAULTS_MODE_OPTIONS", "clientRegion", "resolvedRegion", "inferredRegion", "inferPhysicalRegion", "AWS_EXECUTION_ENV", "AWS_REGION_ENV", "AWS_DEFAULT_REGION_ENV", "ENV_IMDS_DISABLED", "endpoint", "getInstanceMetadataEndpoint", "httpRequest", "IMDS_REGION_PATH", "getRuntimeConfig", "config", "emitWarningIfUnsupportedVersion", "defaultsMode", "resolveDefaultsModeConfig", "defaultConfigProvider", "loadConfigsForDefaultMode", "clientSharedValues", "calculateBodyLength", "defaultUserAgent", "package_default", "loadConfig", "NODE_MAX_ATTEMPT_CONFIG_OPTIONS", "NODE_REGION_CONFIG_OPTIONS", "NODE_REGION_CONFIG_FILE_OPTIONS", "NodeHttpHandler", "NODE_RETRY_MODE_CONFIG_OPTIONS", "DEFAULT_RETRY_MODE", "Hash", "streamCollector", "NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS", "NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS", "SSOClient", "Client", "configuration", "_config_0", "getRuntimeConfig", "_config_1", "resolveClientEndpointParameters", "_config_2", "resolveRegionConfig", "_config_3", "resolveEndpointConfig", "_config_4", "resolveRetryConfig", "_config_5", "_config_6", "resolveUserAgentConfig", "getRetryPlugin", "getContentLengthPlugin", "getHostHeaderPlugin", "getLoggerPlugin", "getRecursionDetectionPlugin", "getUserAgentPlugin", "REFRESH_MESSAGE", "SSOOIDCServiceException", "ServiceException", "options", "AccessDeniedException", "SSOOIDCServiceException", "opts", "AuthorizationPendingException", "ExpiredTokenException", "InternalServerException", "InvalidClientException", "InvalidGrantException", "InvalidRequestException", "InvalidScopeException", "SlowDownException", "UnauthorizedClientException", "UnsupportedGrantTypeException", "se_CreateTokenCommand", "input", "context", "hostname", "protocol", "port", "basePath", "headers", "resolvedPath", "body", "take", "_", "_json", "HttpRequest", "de_CreateTokenCommand", "output", "context", "de_CreateTokenCommandError", "contents", "map", "deserializeMetadata", "data", "expectNonNull", "expectObject", "parseBody", "doc", "take", "expectString", "expectInt32", "parsedOutput", "parseErrorBody", "errorCode", "loadRestJsonErrorCode", "de_AccessDeniedExceptionRes", "de_AuthorizationPendingExceptionRes", "de_ExpiredTokenExceptionRes", "de_InternalServerExceptionRes", "de_InvalidClientExceptionRes", "de_InvalidGrantExceptionRes", "de_InvalidRequestExceptionRes", "de_InvalidScopeExceptionRes", "de_SlowDownExceptionRes", "de_UnauthorizedClientExceptionRes", "de_UnsupportedGrantTypeExceptionRes", "parsedBody", "throwDefaultError", "throwDefaultError", "withBaseException", "SSOOIDCServiceException", "de_AccessDeniedExceptionRes", "parsedOutput", "context", "contents", "map", "data", "doc", "take", "expectString", "exception", "AccessDeniedException", "deserializeMetadata", "decorateServiceException", "de_AuthorizationPendingExceptionRes", "AuthorizationPendingException", "de_ExpiredTokenExceptionRes", "ExpiredTokenException", "de_InternalServerExceptionRes", "InternalServerException", "de_InvalidClientExceptionRes", "InvalidClientException", "de_InvalidGrantExceptionRes", "parsedOutput", "context", "contents", "map", "data", "doc", "take", "expectString", "exception", "InvalidGrantException", "deserializeMetadata", "decorateServiceException", "de_InvalidRequestExceptionRes", "InvalidRequestException", "de_InvalidScopeExceptionRes", "InvalidScopeException", "de_SlowDownExceptionRes", "SlowDownException", "de_UnauthorizedClientExceptionRes", "UnauthorizedClientException", "de_UnsupportedGrantTypeExceptionRes", "UnsupportedGrantTypeException", "output", "collectBody", "streamBody", "collectBodyString", "body", "parseBody", "streamBody", "context", "collectBodyString", "encoded", "parseErrorBody", "errorBody", "value", "loadRestJsonErrorCode", "output", "data", "findKey", "object", "key", "k", "sanitizeErrorCode", "rawValue", "cleanValue", "headerKey", "CreateTokenCommand", "Command", "input", "clientStack", "configuration", "options", "getSerdePlugin", "getEndpointPlugin", "stack", "logger", "handlerExecutionContext", "_", "requestHandler", "request", "context", "se_CreateTokenCommand", "output", "de_CreateTokenCommand", "resolveClientEndpointParameters", "options", "package_default", "p", "q", "r", "s", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "_data", "ruleSet", "defaultEndpointResolver", "endpointParams", "context", "resolveEndpoint", "ruleSet", "getRuntimeConfig", "config", "fromBase64", "toBase64", "defaultEndpointResolver", "NoOpLogger", "parseUrl", "fromUtf8", "toUtf8", "getRuntimeConfig", "config", "emitWarningIfUnsupportedVersion", "defaultsMode", "resolveDefaultsModeConfig", "defaultConfigProvider", "loadConfigsForDefaultMode", "clientSharedValues", "calculateBodyLength", "defaultUserAgent", "package_default", "loadConfig", "NODE_MAX_ATTEMPT_CONFIG_OPTIONS", "NODE_REGION_CONFIG_OPTIONS", "NODE_REGION_CONFIG_FILE_OPTIONS", "NodeHttpHandler", "NODE_RETRY_MODE_CONFIG_OPTIONS", "DEFAULT_RETRY_MODE", "Hash", "streamCollector", "NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS", "NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS", "SSOOIDCClient", "Client", "configuration", "_config_0", "getRuntimeConfig", "_config_1", "resolveClientEndpointParameters", "_config_2", "resolveRegionConfig", "_config_3", "resolveEndpointConfig", "_config_4", "resolveRetryConfig", "_config_5", "_config_6", "resolveUserAgentConfig", "getRetryPlugin", "getContentLengthPlugin", "getHostHeaderPlugin", "getLoggerPlugin", "getRecursionDetectionPlugin", "getUserAgentPlugin", "ssoOidcClientsHash", "getSsoOidcClient", "ssoRegion", "ssoOidcClient", "SSOOIDCClient", "getNewSsoOidcToken", "ssoToken", "ssoRegion", "getSsoOidcClient", "CreateTokenCommand", "validateTokenExpiry", "token", "TokenProviderError", "REFRESH_MESSAGE", "validateTokenKey", "key", "value", "forRefresh", "TokenProviderError", "REFRESH_MESSAGE", "fsPromises", "writeFile", "writeSSOTokenToFile", "id", "ssoToken", "tokenFilepath", "getSSOTokenFilepath", "tokenString", "lastRefreshAttemptTime", "fromSso", "init", "profiles", "parseKnownFiles", "profileName", "getProfileName", "profile", "TokenProviderError", "ssoSessionName", "ssoSession", "loadSsoSessionData", "ssoSessionRequiredKey", "ssoStartUrl", "ssoRegion", "ssoToken", "getSSOTokenFromFile", "REFRESH_MESSAGE", "validateTokenKey", "accessToken", "expiresAt", "existingToken", "validateTokenExpiry", "newSsoOidcToken", "getNewSsoOidcToken", "newTokenExpiration", "writeSSOTokenToFile", "EXPIRE_WINDOW_MS", "SHOULD_FAIL_CREDENTIAL_CHAIN", "resolveSSOCredentials", "ssoStartUrl", "ssoSession", "ssoAccountId", "ssoRegion", "ssoRoleName", "ssoClient", "profile", "token", "refreshMessage", "_token", "fromSso", "e", "CredentialsProviderError", "getSSOTokenFromFile", "accessToken", "sso", "SSOClient", "ssoResp", "GetRoleCredentialsCommand", "accessKeyId", "secretAccessKey", "sessionToken", "expiration", "validateSsoProfile", "profile", "sso_start_url", "sso_account_id", "sso_region", "sso_role_name", "CredentialsProviderError", "fromSSO", "init", "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName", "ssoClient", "ssoSession", "profileName", "getProfileName", "profile", "parseKnownFiles", "CredentialsProviderError", "isSsoProfile", "session", "loadSsoSessionData", "conflictMsg", "sso_start_url", "sso_account_id", "sso_region", "sso_role_name", "sso_session", "validateSsoProfile", "resolveSSOCredentials", "resolveSsoCredentials", "data", "sso_start_url", "sso_account_id", "sso_session", "sso_region", "sso_role_name", "validateSsoProfile", "fromSSO", "isStaticCredsProfile", "arg", "resolveStaticCredentials", "profile", "readFileSync", "fromWebToken", "init", "roleArn", "roleSessionName", "webIdentityToken", "providerId", "policyArns", "policy", "durationSeconds", "roleAssumerWithWebIdentity", "CredentialsProviderError", "ENV_TOKEN_FILE", "ENV_ROLE_ARN", "ENV_ROLE_SESSION_NAME", "fromTokenFile", "init", "resolveTokenFile", "webIdentityTokenFile", "roleArn", "roleSessionName", "CredentialsProviderError", "fromWebToken", "readFileSync", "isWebIdentityProfile", "arg", "resolveWebIdentityCredentials", "profile", "options", "fromTokenFile", "resolveProfileData", "profileName", "profiles", "options", "visitedProfiles", "data", "isStaticCredsProfile", "resolveStaticCredentials", "isAssumeRoleProfile", "resolveAssumeRoleCredentials", "isWebIdentityProfile", "resolveWebIdentityCredentials", "isProcessProfile", "resolveProcessCredentials", "isSsoProfile", "resolveSsoCredentials", "CredentialsProviderError", "fromIni", "init", "profiles", "parseKnownFiles", "resolveProfileData", "getProfileName", "ENV_IMDS_DISABLED", "remoteProvider", "init", "ENV_CMDS_RELATIVE_URI", "ENV_CMDS_FULL_URI", "fromContainerMetadata", "CredentialsProviderError", "fromInstanceMetadata", "defaultProvider", "init", "memoize", "chain", "ENV_PROFILE", "fromEnv", "fromSSO", "fromIni", "fromProcess", "fromTokenFile", "remoteProvider", "CredentialsProviderError", "credentials", "G", "H", "I", "J", "K", "L", "M", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "G", "H", "o", "p", "K", "q", "r", "s", "I", "J", "t", "u", "L", "M", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "_data", "ruleSet", "defaultEndpointResolver", "endpointParams", "context", "resolveEndpoint", "ruleSet", "getRuntimeConfig", "config", "fromBase64", "toBase64", "defaultEndpointResolver", "NoOpLogger", "parseUrl", "fromUtf8", "toUtf8", "getRuntimeConfig", "config", "emitWarningIfUnsupportedVersion", "defaultsMode", "resolveDefaultsModeConfig", "defaultConfigProvider", "loadConfigsForDefaultMode", "clientSharedValues", "calculateBodyLength", "decorateDefaultCredentialProvider", "defaultProvider", "defaultUserAgent", "package_default", "loadConfig", "NODE_MAX_ATTEMPT_CONFIG_OPTIONS", "NODE_REGION_CONFIG_OPTIONS", "NODE_REGION_CONFIG_FILE_OPTIONS", "NodeHttpHandler", "NODE_RETRY_MODE_CONFIG_OPTIONS", "DEFAULT_RETRY_MODE", "Hash", "streamCollector", "NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS", "NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS", "STSClient", "Client", "configuration", "_config_0", "getRuntimeConfig", "_config_1", "resolveClientEndpointParameters", "_config_2", "resolveRegionConfig", "_config_3", "resolveEndpointConfig", "_config_4", "resolveRetryConfig", "_config_5", "_config_6", "resolveStsAuthConfig", "_config_7", "resolveUserAgentConfig", "getRetryPlugin", "getContentLengthPlugin", "getHostHeaderPlugin", "getLoggerPlugin", "getRecursionDetectionPlugin", "getUserAgentPlugin", "getCustomizableStsClientCtor", "baseCtor", "customizations", "config", "customization", "getDefaultRoleAssumer", "stsOptions", "stsPlugins", "STSClient", "getDefaultRoleAssumerWithWebIdentity", "decorateDefaultCredentialProvider", "provider", "input", "s", "t", "u", "v", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "_data", "ruleSet", "defaultEndpointResolver", "endpointParams", "context", "resolveEndpoint", "ruleSet", "getRuntimeConfig", "config", "fromBase64", "toBase64", "defaultEndpointResolver", "NoOpLogger", "parseUrl", "fromUtf8", "toUtf8", "getRuntimeConfig", "config", "emitWarningIfUnsupportedVersion", "defaultsMode", "resolveDefaultsModeConfig", "defaultConfigProvider", "loadConfigsForDefaultMode", "clientSharedValues", "calculateBodyLength", "decorateDefaultCredentialProvider", "defaultProvider", "defaultUserAgent", "package_default", "loadConfig", "NODE_MAX_ATTEMPT_CONFIG_OPTIONS", "NODE_REGION_CONFIG_OPTIONS", "NODE_REGION_CONFIG_FILE_OPTIONS", "NodeHttpHandler", "NODE_RETRY_MODE_CONFIG_OPTIONS", "DEFAULT_RETRY_MODE", "Hash", "streamCollector", "NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS", "NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS", "SSMClient", "Client", "configuration", "_config_0", "getRuntimeConfig", "_config_1", "resolveClientEndpointParameters", "_config_2", "resolveRegionConfig", "_config_3", "resolveEndpointConfig", "_config_4", "resolveRetryConfig", "_config_5", "_config_6", "resolveAwsAuthConfig", "_config_7", "resolveUserAgentConfig", "getRetryPlugin", "getContentLengthPlugin", "getHostHeaderPlugin", "getLoggerPlugin", "getRecursionDetectionPlugin", "getAwsAuthPlugin", "getUserAgentPlugin", "resolveClientEndpointParameters", "options", "package_default", "s", "t", "u", "c", "d", "e", "f", "g", "h", "i", "j", "u", "k", "l", "s", "t", "m", "n", "o", "p", "q", "r", "_data", "ruleSet", "defaultEndpointResolver", "endpointParams", "context", "resolveEndpoint", "ruleSet", "getRuntimeConfig", "config", "fromBase64", "toBase64", "defaultEndpointResolver", "NoOpLogger", "parseUrl", "fromUtf8", "toUtf8", "getRuntimeConfig", "config", "emitWarningIfUnsupportedVersion", "defaultsMode", "resolveDefaultsModeConfig", "defaultConfigProvider", "loadConfigsForDefaultMode", "clientSharedValues", "calculateBodyLength", "decorateDefaultCredentialProvider", "defaultProvider", "defaultUserAgent", "package_default", "loadConfig", "NODE_MAX_ATTEMPT_CONFIG_OPTIONS", "NODE_REGION_CONFIG_OPTIONS", "NODE_REGION_CONFIG_FILE_OPTIONS", "NodeHttpHandler", "NODE_RETRY_MODE_CONFIG_OPTIONS", "DEFAULT_RETRY_MODE", "Hash", "streamCollector", "NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS", "NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS", "CloudWatchLogsClient", "Client", "configuration", "_config_0", "getRuntimeConfig", "_config_1", "resolveClientEndpointParameters", "_config_2", "resolveRegionConfig", "_config_3", "resolveEndpointConfig", "_config_4", "resolveRetryConfig", "_config_5", "_config_6", "resolveAwsAuthConfig", "_config_7", "resolveUserAgentConfig", "getRetryPlugin", "getContentLengthPlugin", "getHostHeaderPlugin", "getLoggerPlugin", "getRecursionDetectionPlugin", "getAwsAuthPlugin", "getUserAgentPlugin", "CloudWatchLogsServiceException", "ServiceException", "options", "InvalidParameterException", "CloudWatchLogsServiceException", "opts", "ResourceNotFoundException", "CloudWatchLogsServiceException", "opts", "ServiceUnavailableException", "se_GetLogEventsCommand", "input", "context", "headers", "sharedHeaders", "body", "_json", "buildHttpRpcRequest", "de_GetLogEventsCommand", "output", "context", "de_GetLogEventsCommandError", "data", "parseBody", "contents", "_json", "deserializeMetadata", "parsedOutput", "parseErrorBody", "errorCode", "loadRestJsonErrorCode", "de_InvalidParameterExceptionRes", "de_ResourceNotFoundExceptionRes", "de_ServiceUnavailableExceptionRes", "parsedBody", "throwDefaultError", "de_InvalidParameterExceptionRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "InvalidParameterException", "deserializeMetadata", "decorateServiceException", "de_ResourceNotFoundExceptionRes", "parsedOutput", "context", "body", "deserialized", "_json", "exception", "ResourceNotFoundException", "deserializeMetadata", "decorateServiceException", "de_ServiceUnavailableExceptionRes", "ServiceUnavailableException", "deserializeMetadata", "output", "collectBody", "streamBody", "context", "collectBodyString", "body", "throwDefaultError", "withBaseException", "CloudWatchLogsServiceException", "buildHttpRpcRequest", "headers", "path", "resolvedHostname", "hostname", "protocol", "port", "basePath", "contents", "HttpRequest", "sharedHeaders", "operation", "parseBody", "encoded", "parseErrorBody", "errorBody", "value", "loadRestJsonErrorCode", "data", "findKey", "object", "key", "k", "sanitizeErrorCode", "rawValue", "cleanValue", "headerKey", "GetLogEventsCommand", "Command", "input", "clientStack", "configuration", "options", "getSerdePlugin", "getEndpointPlugin", "stack", "logger", "handlerExecutionContext", "_", "requestHandler", "request", "context", "se_GetLogEventsCommand", "output", "de_GetLogEventsCommand", "wrapAnsi16", "offset", "code", "wrapAnsi256", "wrapAnsi16m", "red", "green", "blue", "styles", "modifierNames", "foregroundColorNames", "backgroundColorNames", "colorNames", "assembleStyles", "codes", "groupName", "group", "styleName", "style", "hex", "matches", "colorString", "character", "integer", "remainder", "value", "result", "ansiStyles", "ansi_styles_default", "ssm", "SSMClient", "cloudWatchLogs", "CloudWatchLogsClient", "_a", "command", "instanceId", "powershell", "waitForAgent", "timer", "setInterval", "waitSsmAgent", "clearInterval", "ssmDocumentName", "sendCommandResponse", "SendCommandCommand", "inspect", "commandId", "response", "waitCommandInvocationComplete", "scheduler", "messages", "getLogMessages", "printContent", "ansi_styles_default", "err", "i", "_b", "DescribeInstanceInformationCommand", "GetCommandInvocationCommand", "content", "stream", "style", "line", "commandInvocationOutput", "token", "DocumentName", "CommandId", "InstanceId", "PluginName", "GetLogEventsCommand", "result", "e", "m"]
}
